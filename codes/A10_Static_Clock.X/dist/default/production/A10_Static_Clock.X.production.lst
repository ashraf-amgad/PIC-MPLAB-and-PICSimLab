

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 05 08:00:17 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177                           
   178                           	psect	idataCOMMON
   179  02A6                     __pidataCOMMON:
   180                           
   181                           ;initializer for _LED_BLINK_STATUS
   182  02A6  3401               	retlw	1
   183                           
   184                           	psect	idataBANK0
   185  029A                     __pidataBANK0:
   186                           
   187                           ;initializer for _SSD
   188  029A  343F               	retlw	63
   189  029B  3406               	retlw	6
   190  029C  345B               	retlw	91
   191  029D  344F               	retlw	79
   192  029E  3466               	retlw	102
   193  029F  346D               	retlw	109
   194  02A0  347D               	retlw	125
   195  02A1  3407               	retlw	7
   196  02A2  347F               	retlw	127
   197  02A3  346F               	retlw	111
   198                           
   199                           ;initializer for _SSD_status
   200  02A4  3401               	retlw	1
   201                           
   202                           ;initializer for _Hours_Counter
   203  02A5  340C               	retlw	12
   204  000E                     _TMR1	set	14
   205  0008                     _PORTD	set	8
   206  0047                     _RD7	set	71
   207  005F                     _GIE	set	95
   208  005E                     _PEIE	set	94
   209  0080                     _TMR1ON	set	128
   210  0030                     _RB0	set	48
   211  0085                     _T1CKPS1	set	133
   212  0084                     _T1CKPS0	set	132
   213  0081                     _TMR1CS	set	129
   214  002D                     _RA5	set	45
   215  002C                     _RA4	set	44
   216  002B                     _RA3	set	43
   217  002A                     _RA2	set	42
   218  0060                     _TMR1IF	set	96
   219  0085                     _TRISA	set	133
   220  0088                     _TRISD	set	136
   221  0460                     _TMR1IE	set	1120
   222                           
   223                           	psect	cinit
   224  0015                     start_initialization:	
   225                           ; #config settings
   226                           
   227  0015                     __initialization:
   228                           
   229                           ; Initialize objects allocated to BANK0
   230  0015  1383               	bcf	3,7	;select IRP bank0
   231  0016  302C               	movlw	low (__pdataBANK0+12)
   232  0017  00FD               	movwf	btemp+-1
   233  0018  3002               	movlw	high __pidataBANK0
   234  0019  00FE               	movwf	btemp
   235  001A  309A               	movlw	low __pidataBANK0
   236  001B  00FF               	movwf	btemp+1
   237  001C  3020               	movlw	low __pdataBANK0
   238  001D  0084               	movwf	4
   239  001E  120A  118A  228B  120A  118A  	fcall	init_ram0
   240                           
   241                           ; Initialize objects allocated to COMMON
   242  0023  120A  118A  22A6  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   243  0028  00FC               	movwf	__pdataCOMMON& (0+127)
   244                           
   245                           ; Clear objects allocated to BANK0
   246  0029  01B6               	clrf	__pbssBANK0& (0+127)
   247  002A  01B7               	clrf	(__pbssBANK0+1)& (0+127)
   248  002B  01B8               	clrf	(__pbssBANK0+2)& (0+127)
   249  002C  01B9               	clrf	(__pbssBANK0+3)& (0+127)
   250  002D  01BA               	clrf	(__pbssBANK0+4)& (0+127)
   251  002E  01BB               	clrf	(__pbssBANK0+5)& (0+127)
   252  002F  01BC               	clrf	(__pbssBANK0+6)& (0+127)
   253  0030  01BD               	clrf	(__pbssBANK0+7)& (0+127)
   254                           
   255                           ; Clear objects allocated to COMMON
   256  0031  01FB               	clrf	__pbssCOMMON& (0+127)
   257  0032                     end_of_initialization:	
   258                           ;End of C runtime variable initialization code
   259                           
   260  0032                     __end_of__initialization:
   261  0032  0183               	clrf	3
   262  0033  120A  118A  2836   	ljmp	_main	;jump to C main() function
   263                           
   264                           	psect	bssCOMMON
   265  007B                     __pbssCOMMON:
   266  007B                     _LED_BLINK_FLAG:
   267  007B                     	ds	1
   268                           
   269                           	psect	dataCOMMON
   270  007C                     __pdataCOMMON:
   271  007C                     _LED_BLINK_STATUS:
   272  007C                     	ds	1
   273                           
   274                           	psect	bssBANK0
   275  0036                     __pbssBANK0:
   276  0036                     _Timer_Counter:
   277  0036                     	ds	2
   278  0038                     _SSD4_counter:
   279  0038                     	ds	1
   280  0039                     _SSD3_counter:
   281  0039                     	ds	1
   282  003A                     _SSD2_counter:
   283  003A                     	ds	1
   284  003B                     _SSD1_counter:
   285  003B                     	ds	1
   286  003C                     _Minute_Counter:
   287  003C                     	ds	1
   288  003D                     _Seconds_Counter:
   289  003D                     	ds	1
   290                           
   291                           	psect	dataBANK0
   292  0020                     __pdataBANK0:
   293  0020                     _SSD:
   294  0020                     	ds	10
   295  002A                     _SSD_status:
   296  002A                     	ds	1
   297  002B                     _Hours_Counter:
   298  002B                     	ds	1
   299                           
   300                           	psect	inittext
   301  0287                     init_fetch0:	
   302                           ;	Called with low address in FSR and high address in W
   303                           
   304  0287  087E               	movf	btemp,w
   305  0288  008A               	movwf	10
   306  0289  087F               	movf	btemp+1,w
   307  028A  0082               	movwf	2
   308  028B                     init_ram0:	
   309                           ;Called with:
   310                           ;	high address of idata address in btemp 
   311                           ;	low address of idata address in btemp+1 
   312                           ;	low address of data in FSR
   313                           ;	high address + 1 of data in btemp-1
   314                           
   315  028B  120A  118A  2287  120A  118A  	fcall	init_fetch0
   316  0290  0080               	movwf	0
   317  0291  0A84               	incf	4,f
   318  0292  0804               	movf	4,w
   319  0293  067D               	xorwf	btemp+-1,w
   320  0294  1903               	btfsc	3,2
   321  0295  3400               	retlw	0
   322  0296  0AFF               	incf	btemp+1,f
   323  0297  1903               	btfsc	3,2
   324  0298  0AFE               	incf	btemp,f
   325  0299  2A8B               	goto	init_ram0
   326                           
   327                           	psect	cstackCOMMON
   328  0070                     __pcstackCOMMON:
   329  0070                     ?_ISR:
   330  0070                     ?_main:	
   331                           ; 1 bytes @ 0x0
   332                           
   333  0070                     ?___lwmod:	
   334                           ; 1 bytes @ 0x0
   335                           
   336  0070                     ___lwmod@divisor:	
   337                           ; 2 bytes @ 0x0
   338                           
   339                           
   340                           ; 2 bytes @ 0x0
   341  0070                     	ds	2
   342  0072                     ___lwmod@dividend:
   343                           
   344                           ; 2 bytes @ 0x2
   345  0072                     	ds	2
   346  0074                     ??___lwmod:
   347  0074                     ___lwmod@counter:	
   348                           ; 1 bytes @ 0x4
   349                           
   350                           
   351                           ; 1 bytes @ 0x4
   352  0074                     	ds	1
   353  0075                     ??_ISR:
   354                           
   355                           ; 1 bytes @ 0x5
   356  0075                     	ds	6
   357                           
   358                           	psect	cstackBANK0
   359  002C                     __pcstackBANK0:
   360  002C                     ?___awdiv:
   361  002C                     ?___awmod:	
   362                           ; 2 bytes @ 0x0
   363                           
   364  002C                     ___awdiv@divisor:	
   365                           ; 2 bytes @ 0x0
   366                           
   367  002C                     ___awmod@divisor:	
   368                           ; 2 bytes @ 0x0
   369                           
   370                           
   371                           ; 2 bytes @ 0x0
   372  002C                     	ds	2
   373  002E                     ___awdiv@dividend:
   374  002E                     ___awmod@dividend:	
   375                           ; 2 bytes @ 0x2
   376                           
   377                           
   378                           ; 2 bytes @ 0x2
   379  002E                     	ds	2
   380  0030                     ??___awdiv:
   381  0030                     ??___awmod:	
   382                           ; 1 bytes @ 0x4
   383                           
   384  0030                     ___awdiv@counter:	
   385                           ; 1 bytes @ 0x4
   386                           
   387  0030                     ___awmod@counter:	
   388                           ; 1 bytes @ 0x4
   389                           
   390                           
   391                           ; 1 bytes @ 0x4
   392  0030                     	ds	1
   393  0031                     ___awdiv@sign:
   394  0031                     ___awmod@sign:	
   395                           ; 1 bytes @ 0x5
   396                           
   397                           
   398                           ; 1 bytes @ 0x5
   399  0031                     	ds	1
   400  0032                     ___awdiv@quotient:
   401                           
   402                           ; 2 bytes @ 0x6
   403  0032                     	ds	2
   404  0034                     ??_main:
   405                           
   406                           ; 1 bytes @ 0x8
   407  0034                     	ds	2
   408                           
   409                           	psect	maintext
   410  0036                     __pmaintext:	
   411 ;;
   412 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   413 ;;
   414 ;; *************** function _main *****************
   415 ;; Defined at:
   416 ;;		line 70 in file "main.c"
   417 ;; Parameters:    Size  Location     Type
   418 ;;		None
   419 ;; Auto vars:     Size  Location     Type
   420 ;;		None
   421 ;; Return value:  Size  Location     Type
   422 ;;                  1    wreg      void 
   423 ;; Registers used:
   424 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   425 ;; Tracked objects:
   426 ;;		On entry : B00/0
   427 ;;		On exit  : 0/0
   428 ;;		Unchanged: 0/0
   429 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   430 ;;      Params:         0       0       0       0       0
   431 ;;      Locals:         0       0       0       0       0
   432 ;;      Temps:          0       2       0       0       0
   433 ;;      Totals:         0       2       0       0       0
   434 ;;Total ram usage:        2 bytes
   435 ;; Hardware stack levels required when called:    3
   436 ;; This function calls:
   437 ;;		___awdiv
   438 ;;		___awmod
   439 ;; This function is called by:
   440 ;;		Startup code after reset
   441 ;; This function uses a non-reentrant model
   442 ;;
   443                           
   444                           
   445                           ;psect for function _main
   446  0036                     _main:
   447  0036                     l1129:	
   448                           ;incstack = 0
   449                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   450                           
   451                           
   452                           ;main.c: 74:     TRISD = 0x00;
   453  0036  1683               	bsf	3,5	;RP0=1, select bank1
   454  0037  1303               	bcf	3,6	;RP1=0, select bank1
   455  0038  0188               	clrf	8	;volatile
   456                           
   457                           ;main.c: 75:     TRISA = 0;
   458  0039  0185               	clrf	5	;volatile
   459  003A                     l1131:
   460                           
   461                           ;main.c: 76:     RA2=0;
   462  003A  1283               	bcf	3,5	;RP0=0, select bank0
   463  003B  1303               	bcf	3,6	;RP1=0, select bank0
   464  003C  1105               	bcf	5,2	;volatile
   465  003D                     l1133:
   466                           
   467                           ;main.c: 77:     RA3=0;
   468  003D  1185               	bcf	5,3	;volatile
   469  003E                     l1135:
   470                           
   471                           ;main.c: 78:     RA4=0;
   472  003E  1205               	bcf	5,4	;volatile
   473  003F                     l1137:
   474                           
   475                           ;main.c: 79:     RA5=0;
   476  003F  1285               	bcf	5,5	;volatile
   477  0040                     l1139:
   478                           
   479                           ;main.c: 80:     PORTD = SSD[0];
   480  0040  0820               	movf	_SSD,w
   481  0041  0088               	movwf	8	;volatile
   482  0042                     l1141:
   483                           
   484                           ;main.c: 84:     TMR1 = 65536-50000;
   485  0042  303C               	movlw	60
   486  0043  008F               	movwf	15	;volatile
   487  0044  30B0               	movlw	176
   488  0045  008E               	movwf	14	;volatile
   489  0046                     l1143:
   490                           
   491                           ;main.c: 86:     TMR1CS = 0;
   492  0046  1090               	bcf	16,1	;volatile
   493  0047                     l1145:
   494                           
   495                           ;main.c: 88:     T1CKPS0 = 1;
   496  0047  1610               	bsf	16,4	;volatile
   497  0048                     l1147:
   498                           
   499                           ;main.c: 89:     T1CKPS1 = 0;
   500  0048  1290               	bcf	16,5	;volatile
   501  0049                     l1149:
   502                           
   503                           ;main.c: 91:     RB0 = 1;
   504  0049  1406               	bsf	6,0	;volatile
   505  004A                     l1151:
   506                           
   507                           ;main.c: 93:     TMR1ON = 1;
   508  004A  1410               	bsf	16,0	;volatile
   509  004B                     l1153:
   510                           
   511                           ;main.c: 95:     TMR1IE = 1;
   512  004B  1683               	bsf	3,5	;RP0=1, select bank1
   513  004C  1303               	bcf	3,6	;RP1=0, select bank1
   514  004D  140C               	bsf	12,0	;volatile
   515  004E                     l1155:
   516                           
   517                           ;main.c: 96:     TMR1IF = 0;
   518  004E  1283               	bcf	3,5	;RP0=0, select bank0
   519  004F  1303               	bcf	3,6	;RP1=0, select bank0
   520  0050  100C               	bcf	12,0	;volatile
   521  0051                     l1157:
   522                           
   523                           ;main.c: 97:     PEIE = 1;
   524  0051  170B               	bsf	11,6	;volatile
   525  0052                     l1159:
   526                           
   527                           ;main.c: 98:     GIE = 1;
   528  0052  178B               	bsf	11,7	;volatile
   529  0053                     l1161:
   530                           
   531                           ;main.c: 102:         if (Seconds_Counter == 60) {
   532  0053  303C               	movlw	60
   533  0054  063D               	xorwf	_Seconds_Counter,w
   534  0055  1D03               	btfss	3,2
   535  0056  2858               	goto	u601
   536  0057  2859               	goto	u600
   537  0058                     u601:
   538  0058  285E               	goto	l1167
   539  0059                     u600:
   540  0059                     l1163:
   541                           
   542                           ;main.c: 103:             Minute_Counter++;
   543  0059  3001               	movlw	1
   544  005A  00FF               	movwf	btemp+1
   545  005B  087F               	movf	btemp+1,w
   546  005C  07BC               	addwf	_Minute_Counter,f
   547  005D                     l1165:
   548                           
   549                           ;main.c: 104:             Seconds_Counter = 0;
   550  005D  01BD               	clrf	_Seconds_Counter
   551  005E                     l1167:
   552                           
   553                           ;main.c: 107:         if (Minute_Counter == 60) {
   554  005E  303C               	movlw	60
   555  005F  063C               	xorwf	_Minute_Counter,w
   556  0060  1D03               	btfss	3,2
   557  0061  2863               	goto	u611
   558  0062  2864               	goto	u610
   559  0063                     u611:
   560  0063  2869               	goto	l1173
   561  0064                     u610:
   562  0064                     l1169:
   563                           
   564                           ;main.c: 108:             Hours_Counter++;
   565  0064  3001               	movlw	1
   566  0065  00FF               	movwf	btemp+1
   567  0066  087F               	movf	btemp+1,w
   568  0067  07AB               	addwf	_Hours_Counter,f
   569  0068                     l1171:
   570                           
   571                           ;main.c: 109:             Minute_Counter = 0;
   572  0068  01BC               	clrf	_Minute_Counter
   573  0069                     l1173:
   574                           
   575                           ;main.c: 112:         if (Hours_Counter == 24) {
   576  0069  3018               	movlw	24
   577  006A  062B               	xorwf	_Hours_Counter,w
   578  006B  1D03               	btfss	3,2
   579  006C  286E               	goto	u621
   580  006D  286F               	goto	u620
   581  006E                     u621:
   582  006E  2870               	goto	l1177
   583  006F                     u620:
   584  006F                     l1175:
   585                           
   586                           ;main.c: 113:             Hours_Counter = 0;
   587  006F  01AB               	clrf	_Hours_Counter
   588  0070                     l1177:
   589                           
   590                           ;main.c: 121:         SSD1_counter = (Minute_Counter % 10);
   591  0070  300A               	movlw	10
   592  0071  00AC               	movwf	___awmod@divisor
   593  0072  3000               	movlw	0
   594  0073  00AD               	movwf	___awmod@divisor+1
   595  0074  083C               	movf	_Minute_Counter,w
   596  0075  00B4               	movwf	??_main
   597  0076  01B5               	clrf	??_main+1
   598  0077  0834               	movf	??_main,w
   599  0078  00AE               	movwf	___awmod@dividend
   600  0079  0835               	movf	??_main+1,w
   601  007A  00AF               	movwf	___awmod@dividend+1
   602  007B  120A  118A  21A0  120A  118A  	fcall	___awmod
   603  0080  1283               	bcf	3,5	;RP0=0, select bank0
   604  0081  1303               	bcf	3,6	;RP1=0, select bank0
   605  0082  082C               	movf	?___awmod,w
   606  0083  00FF               	movwf	btemp+1
   607  0084  087F               	movf	btemp+1,w
   608  0085  00BB               	movwf	_SSD1_counter
   609  0086                     l1179:
   610                           
   611                           ;main.c: 122:         SSD2_counter = (Minute_Counter / 10);
   612  0086  300A               	movlw	10
   613  0087  00AC               	movwf	___awdiv@divisor
   614  0088  3000               	movlw	0
   615  0089  00AD               	movwf	___awdiv@divisor+1
   616  008A  083C               	movf	_Minute_Counter,w
   617  008B  00B4               	movwf	??_main
   618  008C  01B5               	clrf	??_main+1
   619  008D  0834               	movf	??_main,w
   620  008E  00AE               	movwf	___awdiv@dividend
   621  008F  0835               	movf	??_main+1,w
   622  0090  00AF               	movwf	___awdiv@dividend+1
   623  0091  120A  118A  2137  120A  118A  	fcall	___awdiv
   624  0096  1283               	bcf	3,5	;RP0=0, select bank0
   625  0097  1303               	bcf	3,6	;RP1=0, select bank0
   626  0098  082C               	movf	?___awdiv,w
   627  0099  00FF               	movwf	btemp+1
   628  009A  087F               	movf	btemp+1,w
   629  009B  00BA               	movwf	_SSD2_counter
   630  009C                     l1181:
   631                           
   632                           ;main.c: 123:         SSD3_counter = (Hours_Counter % 10);
   633  009C  300A               	movlw	10
   634  009D  00AC               	movwf	___awmod@divisor
   635  009E  3000               	movlw	0
   636  009F  00AD               	movwf	___awmod@divisor+1
   637  00A0  082B               	movf	_Hours_Counter,w
   638  00A1  00B4               	movwf	??_main
   639  00A2  01B5               	clrf	??_main+1
   640  00A3  0834               	movf	??_main,w
   641  00A4  00AE               	movwf	___awmod@dividend
   642  00A5  0835               	movf	??_main+1,w
   643  00A6  00AF               	movwf	___awmod@dividend+1
   644  00A7  120A  118A  21A0  120A  118A  	fcall	___awmod
   645  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   646  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   647  00AE  082C               	movf	?___awmod,w
   648  00AF  00FF               	movwf	btemp+1
   649  00B0  087F               	movf	btemp+1,w
   650  00B1  00B9               	movwf	_SSD3_counter
   651  00B2                     l1183:
   652                           
   653                           ;main.c: 124:         SSD4_counter = (Hours_Counter / 10);
   654  00B2  300A               	movlw	10
   655  00B3  00AC               	movwf	___awdiv@divisor
   656  00B4  3000               	movlw	0
   657  00B5  00AD               	movwf	___awdiv@divisor+1
   658  00B6  082B               	movf	_Hours_Counter,w
   659  00B7  00B4               	movwf	??_main
   660  00B8  01B5               	clrf	??_main+1
   661  00B9  0834               	movf	??_main,w
   662  00BA  00AE               	movwf	___awdiv@dividend
   663  00BB  0835               	movf	??_main+1,w
   664  00BC  00AF               	movwf	___awdiv@dividend+1
   665  00BD  120A  118A  2137  120A  118A  	fcall	___awdiv
   666  00C2  1283               	bcf	3,5	;RP0=0, select bank0
   667  00C3  1303               	bcf	3,6	;RP1=0, select bank0
   668  00C4  082C               	movf	?___awdiv,w
   669  00C5  00FF               	movwf	btemp+1
   670  00C6  087F               	movf	btemp+1,w
   671  00C7  00B8               	movwf	_SSD4_counter
   672                           
   673                           ;main.c: 125:         switch (SSD_status) {
   674  00C8  291E               	goto	l1209
   675  00C9                     l82:	
   676                           ;main.c: 126:             case 1:
   677                           
   678                           
   679                           ;main.c: 127:                 RA2 = 0;
   680  00C9  1105               	bcf	5,2	;volatile
   681                           
   682                           ;main.c: 128:                 RA3 = 0;
   683  00CA  1185               	bcf	5,3	;volatile
   684                           
   685                           ;main.c: 129:                 RA4 = 0;
   686  00CB  1205               	bcf	5,4	;volatile
   687                           
   688                           ;main.c: 130:                 RA5 = 1;
   689  00CC  1685               	bsf	5,5	;volatile
   690  00CD                     l1185:
   691                           
   692                           ;main.c: 131:                 PORTD &= ~0x7F;
   693  00CD  3080               	movlw	128
   694  00CE  00FF               	movwf	btemp+1
   695  00CF  087F               	movf	btemp+1,w
   696  00D0  0588               	andwf	8,f	;volatile
   697  00D1                     l1187:
   698                           
   699                           ;main.c: 132:                 PORTD |= SSD[SSD1_counter];
   700  00D1  083B               	movf	_SSD1_counter,w
   701  00D2  3E20               	addlw	(low (_SSD| 0))& (0+255)
   702  00D3  0084               	movwf	4
   703  00D4  1383               	bcf	3,7	;select IRP bank0
   704  00D5  0800               	movf	0,w
   705  00D6  00FF               	movwf	btemp+1
   706  00D7  087F               	movf	btemp+1,w
   707  00D8  0488               	iorwf	8,f	;volatile
   708  00D9                     l1189:
   709                           
   710                           ;main.c: 133:                 SSD_status = 2;
   711  00D9  3002               	movlw	2
   712  00DA  00FF               	movwf	btemp+1
   713  00DB  087F               	movf	btemp+1,w
   714  00DC  00AA               	movwf	_SSD_status
   715                           
   716                           ;main.c: 135:                 break;
   717  00DD  2853               	goto	l1161
   718  00DE                     l84:	
   719                           ;main.c: 137:             case 2:
   720                           
   721                           
   722                           ;main.c: 138:                 RA2 = 0;
   723  00DE  1105               	bcf	5,2	;volatile
   724                           
   725                           ;main.c: 139:                 RA3 = 0;
   726  00DF  1185               	bcf	5,3	;volatile
   727                           
   728                           ;main.c: 140:                 RA4 = 1;
   729  00E0  1605               	bsf	5,4	;volatile
   730                           
   731                           ;main.c: 141:                 RA5 = 0;
   732  00E1  1285               	bcf	5,5	;volatile
   733  00E2                     l1191:
   734                           
   735                           ;main.c: 142:                 PORTD = SSD[SSD2_counter];
   736  00E2  083A               	movf	_SSD2_counter,w
   737  00E3  3E20               	addlw	(low (_SSD| 0))& (0+255)
   738  00E4  0084               	movwf	4
   739  00E5  1383               	bcf	3,7	;select IRP bank0
   740  00E6  0800               	movf	0,w
   741  00E7  0088               	movwf	8	;volatile
   742  00E8                     l1193:
   743                           
   744                           ;main.c: 143:                 SSD_status = 3;
   745  00E8  3003               	movlw	3
   746  00E9  00FF               	movwf	btemp+1
   747  00EA  087F               	movf	btemp+1,w
   748  00EB  00AA               	movwf	_SSD_status
   749                           
   750                           ;main.c: 145:                 break;
   751  00EC  2853               	goto	l1161
   752  00ED                     l85:	
   753                           ;main.c: 147:             case 3:
   754                           
   755                           
   756                           ;main.c: 148:                 RA2 = 0;
   757  00ED  1105               	bcf	5,2	;volatile
   758                           
   759                           ;main.c: 149:                 RA3 = 1;
   760  00EE  1585               	bsf	5,3	;volatile
   761                           
   762                           ;main.c: 150:                 RA4 = 0;
   763  00EF  1205               	bcf	5,4	;volatile
   764                           
   765                           ;main.c: 151:                 RA5 = 0;
   766  00F0  1285               	bcf	5,5	;volatile
   767  00F1                     l1195:
   768                           
   769                           ;main.c: 152:                 PORTD = SSD[SSD3_counter];
   770  00F1  0839               	movf	_SSD3_counter,w
   771  00F2  3E20               	addlw	(low (_SSD| 0))& (0+255)
   772  00F3  0084               	movwf	4
   773  00F4  1383               	bcf	3,7	;select IRP bank0
   774  00F5  0800               	movf	0,w
   775  00F6  0088               	movwf	8	;volatile
   776                           
   777                           ;main.c: 154:                 switch (LED_BLINK_STATUS) {
   778  00F7  28FC               	goto	l1199
   779  00F8                     l87:	
   780                           ;main.c: 155:                     case (0):
   781                           
   782                           
   783                           ;main.c: 156:                         RD7 = 1;
   784  00F8  1788               	bsf	8,7	;volatile
   785                           
   786                           ;main.c: 157:                         break;
   787  00F9  290C               	goto	l1201
   788  00FA                     l89:	
   789                           ;main.c: 159:                     case (1):
   790                           
   791                           
   792                           ;main.c: 160:                         RD7 = 0;
   793  00FA  1388               	bcf	8,7	;volatile
   794                           
   795                           ;main.c: 161:                         break;
   796  00FB  290C               	goto	l1201
   797  00FC                     l1199:
   798  00FC  087C               	movf	_LED_BLINK_STATUS,w
   799  00FD  00B4               	movwf	??_main
   800  00FE  01B5               	clrf	??_main+1
   801                           
   802                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   803                           ; Switch size 1, requested type "simple"
   804                           ; Number of cases is 1, Range of values is 0 to 0
   805                           ; switch strategies available:
   806                           ; Name         Instructions Cycles
   807                           ; simple_byte            4     3 (average)
   808                           ; direct_byte           11     8 (fixed)
   809                           ; jumptable            260     6 (fixed)
   810                           ;	Chosen strategy is simple_byte
   811  00FF  0835               	movf	??_main+1,w
   812  0100  3A00               	xorlw	0	; case 0
   813  0101  1903               	skipnz
   814  0102  2904               	goto	l1313
   815  0103  290C               	goto	l1201
   816  0104                     l1313:
   817                           
   818                           ; Switch size 1, requested type "simple"
   819                           ; Number of cases is 2, Range of values is 0 to 1
   820                           ; switch strategies available:
   821                           ; Name         Instructions Cycles
   822                           ; simple_byte            7     4 (average)
   823                           ; direct_byte           14     8 (fixed)
   824                           ; jumptable            260     6 (fixed)
   825                           ;	Chosen strategy is simple_byte
   826  0104  0834               	movf	??_main,w
   827  0105  3A00               	xorlw	0	; case 0
   828  0106  1903               	skipnz
   829  0107  28F8               	goto	l87
   830  0108  3A01               	xorlw	1	; case 1
   831  0109  1903               	skipnz
   832  010A  28FA               	goto	l89
   833  010B  290C               	goto	l1201
   834  010C                     l1201:
   835                           
   836                           ;main.c: 163:                 SSD_status = 4;
   837  010C  3004               	movlw	4
   838  010D  00FF               	movwf	btemp+1
   839  010E  087F               	movf	btemp+1,w
   840  010F  00AA               	movwf	_SSD_status
   841                           
   842                           ;main.c: 164:                 break;
   843  0110  2853               	goto	l1161
   844  0111                     l90:	
   845                           ;main.c: 166:             case 4:
   846                           
   847                           
   848                           ;main.c: 167:                 RA2 = 1;
   849  0111  1505               	bsf	5,2	;volatile
   850                           
   851                           ;main.c: 168:                 RA3 = 0;
   852  0112  1185               	bcf	5,3	;volatile
   853                           
   854                           ;main.c: 169:                 RA4 = 0;
   855  0113  1205               	bcf	5,4	;volatile
   856                           
   857                           ;main.c: 170:                 RA5 = 0;
   858  0114  1285               	bcf	5,5	;volatile
   859  0115                     l1203:
   860                           
   861                           ;main.c: 171:                 PORTD = SSD[SSD4_counter];
   862  0115  0838               	movf	_SSD4_counter,w
   863  0116  3E20               	addlw	(low (_SSD| 0))& (0+255)
   864  0117  0084               	movwf	4
   865  0118  1383               	bcf	3,7	;select IRP bank0
   866  0119  0800               	movf	0,w
   867  011A  0088               	movwf	8	;volatile
   868  011B                     l1205:
   869                           
   870                           ;main.c: 172:                 SSD_status = 1;
   871  011B  01AA               	clrf	_SSD_status
   872  011C  0AAA               	incf	_SSD_status,f
   873                           
   874                           ;main.c: 174:                 break;
   875  011D  2853               	goto	l1161
   876  011E                     l1209:
   877  011E  082A               	movf	_SSD_status,w
   878  011F  00B4               	movwf	??_main
   879  0120  01B5               	clrf	??_main+1
   880                           
   881                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   882                           ; Switch size 1, requested type "simple"
   883                           ; Number of cases is 1, Range of values is 0 to 0
   884                           ; switch strategies available:
   885                           ; Name         Instructions Cycles
   886                           ; simple_byte            4     3 (average)
   887                           ; direct_byte           11     8 (fixed)
   888                           ; jumptable            260     6 (fixed)
   889                           ;	Chosen strategy is simple_byte
   890  0121  0835               	movf	??_main+1,w
   891  0122  3A00               	xorlw	0	; case 0
   892  0123  1903               	skipnz
   893  0124  2926               	goto	l1315
   894  0125  2853               	goto	l1161
   895  0126                     l1315:
   896                           
   897                           ; Switch size 1, requested type "simple"
   898                           ; Number of cases is 4, Range of values is 1 to 4
   899                           ; switch strategies available:
   900                           ; Name         Instructions Cycles
   901                           ; simple_byte           13     7 (average)
   902                           ; direct_byte           23    11 (fixed)
   903                           ; jumptable            263     9 (fixed)
   904                           ;	Chosen strategy is simple_byte
   905  0126  0834               	movf	??_main,w
   906  0127  3A01               	xorlw	1	; case 1
   907  0128  1903               	skipnz
   908  0129  28C9               	goto	l82
   909  012A  3A03               	xorlw	3	; case 2
   910  012B  1903               	skipnz
   911  012C  28DE               	goto	l84
   912  012D  3A01               	xorlw	1	; case 3
   913  012E  1903               	skipnz
   914  012F  28ED               	goto	l85
   915  0130  3A07               	xorlw	7	; case 4
   916  0131  1903               	skipnz
   917  0132  2911               	goto	l90
   918  0133  2853               	goto	l1161
   919  0134  120A  118A  2812   	ljmp	start
   920  0137                     __end_of_main:
   921                           
   922                           	psect	text1
   923  01A0                     __ptext1:	
   924 ;; *************** function ___awmod *****************
   925 ;; Defined at:
   926 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
   927 ;; Parameters:    Size  Location     Type
   928 ;;  divisor         2    0[BANK0 ] int 
   929 ;;  dividend        2    2[BANK0 ] int 
   930 ;; Auto vars:     Size  Location     Type
   931 ;;  sign            1    5[BANK0 ] unsigned char 
   932 ;;  counter         1    4[BANK0 ] unsigned char 
   933 ;; Return value:  Size  Location     Type
   934 ;;                  2    0[BANK0 ] int 
   935 ;; Registers used:
   936 ;;		wreg, status,2, status,0, btemp+1
   937 ;; Tracked objects:
   938 ;;		On entry : 0/0
   939 ;;		On exit  : 0/0
   940 ;;		Unchanged: 0/0
   941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   942 ;;      Params:         0       4       0       0       0
   943 ;;      Locals:         0       2       0       0       0
   944 ;;      Temps:          0       0       0       0       0
   945 ;;      Totals:         0       6       0       0       0
   946 ;;Total ram usage:        6 bytes
   947 ;; Hardware stack levels used:    1
   948 ;; Hardware stack levels required when called:    2
   949 ;; This function calls:
   950 ;;		Nothing
   951 ;; This function is called by:
   952 ;;		_main
   953 ;; This function uses a non-reentrant model
   954 ;;
   955                           
   956                           
   957                           ;psect for function ___awmod
   958  01A0                     ___awmod:
   959  01A0                     l1043:	
   960                           ;incstack = 0
   961                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
   962                           
   963  01A0  1283               	bcf	3,5	;RP0=0, select bank0
   964  01A1  1303               	bcf	3,6	;RP1=0, select bank0
   965  01A2  01B1               	clrf	___awmod@sign
   966  01A3                     l1045:
   967  01A3  1FAF               	btfss	___awmod@dividend+1,7
   968  01A4  29A6               	goto	u421
   969  01A5  29A7               	goto	u420
   970  01A6                     u421:
   971  01A6  29AE               	goto	l1051
   972  01A7                     u420:
   973  01A7                     l1047:
   974  01A7  09AE               	comf	___awmod@dividend,f
   975  01A8  09AF               	comf	___awmod@dividend+1,f
   976  01A9  0AAE               	incf	___awmod@dividend,f
   977  01AA  1903               	skipnz
   978  01AB  0AAF               	incf	___awmod@dividend+1,f
   979  01AC                     l1049:
   980  01AC  01B1               	clrf	___awmod@sign
   981  01AD  0AB1               	incf	___awmod@sign,f
   982  01AE                     l1051:
   983  01AE  1FAD               	btfss	___awmod@divisor+1,7
   984  01AF  29B1               	goto	u431
   985  01B0  29B2               	goto	u430
   986  01B1                     u431:
   987  01B1  29B7               	goto	l1055
   988  01B2                     u430:
   989  01B2                     l1053:
   990  01B2  09AC               	comf	___awmod@divisor,f
   991  01B3  09AD               	comf	___awmod@divisor+1,f
   992  01B4  0AAC               	incf	___awmod@divisor,f
   993  01B5  1903               	skipnz
   994  01B6  0AAD               	incf	___awmod@divisor+1,f
   995  01B7                     l1055:
   996  01B7  082C               	movf	___awmod@divisor,w
   997  01B8  042D               	iorwf	___awmod@divisor+1,w
   998  01B9  1903               	btfsc	3,2
   999  01BA  29BC               	goto	u441
  1000  01BB  29BD               	goto	u440
  1001  01BC                     u441:
  1002  01BC  29EC               	goto	l1073
  1003  01BD                     u440:
  1004  01BD                     l1057:
  1005  01BD  01B0               	clrf	___awmod@counter
  1006  01BE  0AB0               	incf	___awmod@counter,f
  1007  01BF  29CB               	goto	l1063
  1008  01C0                     l1059:
  1009  01C0  3001               	movlw	1
  1010  01C1                     u455:
  1011  01C1  1003               	clrc
  1012  01C2  0DAC               	rlf	___awmod@divisor,f
  1013  01C3  0DAD               	rlf	___awmod@divisor+1,f
  1014  01C4  3EFF               	addlw	-1
  1015  01C5  1D03               	skipz
  1016  01C6  29C1               	goto	u455
  1017  01C7                     l1061:
  1018  01C7  3001               	movlw	1
  1019  01C8  00FF               	movwf	btemp+1
  1020  01C9  087F               	movf	btemp+1,w
  1021  01CA  07B0               	addwf	___awmod@counter,f
  1022  01CB                     l1063:
  1023  01CB  1FAD               	btfss	___awmod@divisor+1,7
  1024  01CC  29CE               	goto	u461
  1025  01CD  29CF               	goto	u460
  1026  01CE                     u461:
  1027  01CE  29C0               	goto	l1059
  1028  01CF                     u460:
  1029  01CF                     l1065:
  1030  01CF  082D               	movf	___awmod@divisor+1,w
  1031  01D0  022F               	subwf	___awmod@dividend+1,w
  1032  01D1  1D03               	skipz
  1033  01D2  29D5               	goto	u475
  1034  01D3  082C               	movf	___awmod@divisor,w
  1035  01D4  022E               	subwf	___awmod@dividend,w
  1036  01D5                     u475:
  1037  01D5  1C03               	skipc
  1038  01D6  29D8               	goto	u471
  1039  01D7  29D9               	goto	u470
  1040  01D8                     u471:
  1041  01D8  29DF               	goto	l1069
  1042  01D9                     u470:
  1043  01D9                     l1067:
  1044  01D9  082C               	movf	___awmod@divisor,w
  1045  01DA  02AE               	subwf	___awmod@dividend,f
  1046  01DB  082D               	movf	___awmod@divisor+1,w
  1047  01DC  1C03               	skipc
  1048  01DD  03AF               	decf	___awmod@dividend+1,f
  1049  01DE  02AF               	subwf	___awmod@dividend+1,f
  1050  01DF                     l1069:
  1051  01DF  3001               	movlw	1
  1052  01E0                     u485:
  1053  01E0  1003               	clrc
  1054  01E1  0CAD               	rrf	___awmod@divisor+1,f
  1055  01E2  0CAC               	rrf	___awmod@divisor,f
  1056  01E3  3EFF               	addlw	-1
  1057  01E4  1D03               	skipz
  1058  01E5  29E0               	goto	u485
  1059  01E6                     l1071:
  1060  01E6  3001               	movlw	1
  1061  01E7  02B0               	subwf	___awmod@counter,f
  1062  01E8  1D03               	btfss	3,2
  1063  01E9  29EB               	goto	u491
  1064  01EA  29EC               	goto	u490
  1065  01EB                     u491:
  1066  01EB  29CF               	goto	l1065
  1067  01EC                     u490:
  1068  01EC                     l1073:
  1069  01EC  0831               	movf	___awmod@sign,w
  1070  01ED  1903               	btfsc	3,2
  1071  01EE  29F0               	goto	u501
  1072  01EF  29F1               	goto	u500
  1073  01F0                     u501:
  1074  01F0  29F6               	goto	l1077
  1075  01F1                     u500:
  1076  01F1                     l1075:
  1077  01F1  09AE               	comf	___awmod@dividend,f
  1078  01F2  09AF               	comf	___awmod@dividend+1,f
  1079  01F3  0AAE               	incf	___awmod@dividend,f
  1080  01F4  1903               	skipnz
  1081  01F5  0AAF               	incf	___awmod@dividend+1,f
  1082  01F6                     l1077:
  1083  01F6  082F               	movf	___awmod@dividend+1,w
  1084  01F7  00AD               	movwf	?___awmod+1
  1085  01F8  082E               	movf	___awmod@dividend,w
  1086  01F9  00AC               	movwf	?___awmod
  1087  01FA                     l345:
  1088  01FA  0008               	return
  1089  01FB                     __end_of___awmod:
  1090                           
  1091                           	psect	text2
  1092  0137                     __ptext2:	
  1093 ;; *************** function ___awdiv *****************
  1094 ;; Defined at:
  1095 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;  divisor         2    0[BANK0 ] int 
  1098 ;;  dividend        2    2[BANK0 ] int 
  1099 ;; Auto vars:     Size  Location     Type
  1100 ;;  quotient        2    6[BANK0 ] int 
  1101 ;;  sign            1    5[BANK0 ] unsigned char 
  1102 ;;  counter         1    4[BANK0 ] unsigned char 
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  2    0[BANK0 ] int 
  1105 ;; Registers used:
  1106 ;;		wreg, status,2, status,0, btemp+1
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         0       4       0       0       0
  1113 ;;      Locals:         0       4       0       0       0
  1114 ;;      Temps:          0       0       0       0       0
  1115 ;;      Totals:         0       8       0       0       0
  1116 ;;Total ram usage:        8 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    2
  1119 ;; This function calls:
  1120 ;;		Nothing
  1121 ;; This function is called by:
  1122 ;;		_main
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function ___awdiv
  1128  0137                     ___awdiv:
  1129  0137                     l999:	
  1130                           ;incstack = 0
  1131                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1132                           
  1133  0137  1283               	bcf	3,5	;RP0=0, select bank0
  1134  0138  1303               	bcf	3,6	;RP1=0, select bank0
  1135  0139  01B1               	clrf	___awdiv@sign
  1136  013A                     l1001:
  1137  013A  1FAD               	btfss	___awdiv@divisor+1,7
  1138  013B  293D               	goto	u321
  1139  013C  293E               	goto	u320
  1140  013D                     u321:
  1141  013D  2945               	goto	l1007
  1142  013E                     u320:
  1143  013E                     l1003:
  1144  013E  09AC               	comf	___awdiv@divisor,f
  1145  013F  09AD               	comf	___awdiv@divisor+1,f
  1146  0140  0AAC               	incf	___awdiv@divisor,f
  1147  0141  1903               	skipnz
  1148  0142  0AAD               	incf	___awdiv@divisor+1,f
  1149  0143                     l1005:
  1150  0143  01B1               	clrf	___awdiv@sign
  1151  0144  0AB1               	incf	___awdiv@sign,f
  1152  0145                     l1007:
  1153  0145  1FAF               	btfss	___awdiv@dividend+1,7
  1154  0146  2948               	goto	u331
  1155  0147  2949               	goto	u330
  1156  0148                     u331:
  1157  0148  2952               	goto	l1013
  1158  0149                     u330:
  1159  0149                     l1009:
  1160  0149  09AE               	comf	___awdiv@dividend,f
  1161  014A  09AF               	comf	___awdiv@dividend+1,f
  1162  014B  0AAE               	incf	___awdiv@dividend,f
  1163  014C  1903               	skipnz
  1164  014D  0AAF               	incf	___awdiv@dividend+1,f
  1165  014E                     l1011:
  1166  014E  3001               	movlw	1
  1167  014F  00FF               	movwf	btemp+1
  1168  0150  087F               	movf	btemp+1,w
  1169  0151  06B1               	xorwf	___awdiv@sign,f
  1170  0152                     l1013:
  1171  0152  01B2               	clrf	___awdiv@quotient
  1172  0153  01B3               	clrf	___awdiv@quotient+1
  1173  0154                     l1015:
  1174  0154  082C               	movf	___awdiv@divisor,w
  1175  0155  042D               	iorwf	___awdiv@divisor+1,w
  1176  0156  1903               	btfsc	3,2
  1177  0157  2959               	goto	u341
  1178  0158  295A               	goto	u340
  1179  0159                     u341:
  1180  0159  2991               	goto	l1035
  1181  015A                     u340:
  1182  015A                     l1017:
  1183  015A  01B0               	clrf	___awdiv@counter
  1184  015B  0AB0               	incf	___awdiv@counter,f
  1185  015C  2968               	goto	l1023
  1186  015D                     l1019:
  1187  015D  3001               	movlw	1
  1188  015E                     u355:
  1189  015E  1003               	clrc
  1190  015F  0DAC               	rlf	___awdiv@divisor,f
  1191  0160  0DAD               	rlf	___awdiv@divisor+1,f
  1192  0161  3EFF               	addlw	-1
  1193  0162  1D03               	skipz
  1194  0163  295E               	goto	u355
  1195  0164                     l1021:
  1196  0164  3001               	movlw	1
  1197  0165  00FF               	movwf	btemp+1
  1198  0166  087F               	movf	btemp+1,w
  1199  0167  07B0               	addwf	___awdiv@counter,f
  1200  0168                     l1023:
  1201  0168  1FAD               	btfss	___awdiv@divisor+1,7
  1202  0169  296B               	goto	u361
  1203  016A  296C               	goto	u360
  1204  016B                     u361:
  1205  016B  295D               	goto	l1019
  1206  016C                     u360:
  1207  016C                     l1025:
  1208  016C  3001               	movlw	1
  1209  016D                     u375:
  1210  016D  1003               	clrc
  1211  016E  0DB2               	rlf	___awdiv@quotient,f
  1212  016F  0DB3               	rlf	___awdiv@quotient+1,f
  1213  0170  3EFF               	addlw	-1
  1214  0171  1D03               	skipz
  1215  0172  296D               	goto	u375
  1216  0173  082D               	movf	___awdiv@divisor+1,w
  1217  0174  022F               	subwf	___awdiv@dividend+1,w
  1218  0175  1D03               	skipz
  1219  0176  2979               	goto	u385
  1220  0177  082C               	movf	___awdiv@divisor,w
  1221  0178  022E               	subwf	___awdiv@dividend,w
  1222  0179                     u385:
  1223  0179  1C03               	skipc
  1224  017A  297C               	goto	u381
  1225  017B  297D               	goto	u380
  1226  017C                     u381:
  1227  017C  2984               	goto	l1031
  1228  017D                     u380:
  1229  017D                     l1027:
  1230  017D  082C               	movf	___awdiv@divisor,w
  1231  017E  02AE               	subwf	___awdiv@dividend,f
  1232  017F  082D               	movf	___awdiv@divisor+1,w
  1233  0180  1C03               	skipc
  1234  0181  03AF               	decf	___awdiv@dividend+1,f
  1235  0182  02AF               	subwf	___awdiv@dividend+1,f
  1236  0183                     l1029:
  1237  0183  1432               	bsf	___awdiv@quotient,0
  1238  0184                     l1031:
  1239  0184  3001               	movlw	1
  1240  0185                     u395:
  1241  0185  1003               	clrc
  1242  0186  0CAD               	rrf	___awdiv@divisor+1,f
  1243  0187  0CAC               	rrf	___awdiv@divisor,f
  1244  0188  3EFF               	addlw	-1
  1245  0189  1D03               	skipz
  1246  018A  2985               	goto	u395
  1247  018B                     l1033:
  1248  018B  3001               	movlw	1
  1249  018C  02B0               	subwf	___awdiv@counter,f
  1250  018D  1D03               	btfss	3,2
  1251  018E  2990               	goto	u401
  1252  018F  2991               	goto	u400
  1253  0190                     u401:
  1254  0190  296C               	goto	l1025
  1255  0191                     u400:
  1256  0191                     l1035:
  1257  0191  0831               	movf	___awdiv@sign,w
  1258  0192  1903               	btfsc	3,2
  1259  0193  2995               	goto	u411
  1260  0194  2996               	goto	u410
  1261  0195                     u411:
  1262  0195  299B               	goto	l1039
  1263  0196                     u410:
  1264  0196                     l1037:
  1265  0196  09B2               	comf	___awdiv@quotient,f
  1266  0197  09B3               	comf	___awdiv@quotient+1,f
  1267  0198  0AB2               	incf	___awdiv@quotient,f
  1268  0199  1903               	skipnz
  1269  019A  0AB3               	incf	___awdiv@quotient+1,f
  1270  019B                     l1039:
  1271  019B  0833               	movf	___awdiv@quotient+1,w
  1272  019C  00AD               	movwf	?___awdiv+1
  1273  019D  0832               	movf	___awdiv@quotient,w
  1274  019E  00AC               	movwf	?___awdiv
  1275  019F                     l332:
  1276  019F  0008               	return
  1277  01A0                     __end_of___awdiv:
  1278                           
  1279                           	psect	text3
  1280  01FB                     __ptext3:	
  1281 ;; *************** function _ISR *****************
  1282 ;; Defined at:
  1283 ;;		line 39 in file "main.c"
  1284 ;; Parameters:    Size  Location     Type
  1285 ;;		None
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;		None
  1288 ;; Return value:  Size  Location     Type
  1289 ;;                  1    wreg      void 
  1290 ;; Registers used:
  1291 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1292 ;; Tracked objects:
  1293 ;;		On entry : 0/0
  1294 ;;		On exit  : 0/0
  1295 ;;		Unchanged: 0/0
  1296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1297 ;;      Params:         0       0       0       0       0
  1298 ;;      Locals:         0       0       0       0       0
  1299 ;;      Temps:          6       0       0       0       0
  1300 ;;      Totals:         6       0       0       0       0
  1301 ;;Total ram usage:        6 bytes
  1302 ;; Hardware stack levels used:    1
  1303 ;; Hardware stack levels required when called:    1
  1304 ;; This function calls:
  1305 ;;		___lwmod
  1306 ;; This function is called by:
  1307 ;;		Interrupt level 1
  1308 ;; This function uses a non-reentrant model
  1309 ;;
  1310                           
  1311                           
  1312                           ;psect for function _ISR
  1313  01FB                     _ISR:
  1314  01FB                     i1l1103:
  1315                           
  1316                           ;main.c: 43:     if (TMR1IF) {
  1317  01FB  1C0C               	btfss	12,0	;volatile
  1318  01FC  29FE               	goto	u57_21
  1319  01FD  29FF               	goto	u57_20
  1320  01FE                     u57_21:
  1321  01FE  2A42               	goto	i1l72
  1322  01FF                     u57_20:
  1323  01FF                     i1l1105:
  1324                           
  1325                           ;main.c: 45:         Timer_Counter++;
  1326  01FF  3001               	movlw	1
  1327  0200  07B6               	addwf	_Timer_Counter,f
  1328  0201  1803               	skipnc
  1329  0202  0AB7               	incf	_Timer_Counter+1,f
  1330  0203  3000               	movlw	0
  1331  0204  07B7               	addwf	_Timer_Counter+1,f
  1332  0205                     i1l1107:
  1333                           
  1334                           ;main.c: 47:         if (Timer_Counter == 20) {
  1335  0205  3014               	movlw	20
  1336  0206  0636               	xorwf	_Timer_Counter,w
  1337  0207  0437               	iorwf	_Timer_Counter+1,w
  1338  0208  1D03               	btfss	3,2
  1339  0209  2A0B               	goto	u58_21
  1340  020A  2A0C               	goto	u58_20
  1341  020B                     u58_21:
  1342  020B  2A12               	goto	i1l1113
  1343  020C                     u58_20:
  1344  020C                     i1l1109:
  1345                           
  1346                           ;main.c: 48:             Seconds_Counter++;
  1347  020C  3001               	movlw	1
  1348  020D  00FF               	movwf	btemp+1
  1349  020E  087F               	movf	btemp+1,w
  1350  020F  07BD               	addwf	_Seconds_Counter,f
  1351  0210                     i1l1111:
  1352                           
  1353                           ;main.c: 49:             Timer_Counter = 0;
  1354  0210  01B6               	clrf	_Timer_Counter
  1355  0211  01B7               	clrf	_Timer_Counter+1
  1356  0212                     i1l1113:
  1357                           
  1358                           ;main.c: 53:         if (Timer_Counter%10 == 0) {
  1359  0212  300A               	movlw	10
  1360  0213  00F0               	movwf	___lwmod@divisor
  1361  0214  3000               	movlw	0
  1362  0215  00F1               	movwf	___lwmod@divisor+1
  1363  0216  0837               	movf	_Timer_Counter+1,w
  1364  0217  00F3               	movwf	___lwmod@dividend+1
  1365  0218  0836               	movf	_Timer_Counter,w
  1366  0219  00F2               	movwf	___lwmod@dividend
  1367  021A  120A  118A  224D  120A  118A  	fcall	___lwmod
  1368  021F  0870               	movf	?___lwmod,w
  1369  0220  0471               	iorwf	?___lwmod+1,w
  1370  0221  1D03               	btfss	3,2
  1371  0222  2A24               	goto	u59_21
  1372  0223  2A25               	goto	u59_20
  1373  0224                     u59_21:
  1374  0224  2A3B               	goto	i1l67
  1375  0225                     u59_20:
  1376  0225  2A2B               	goto	i1l1121
  1377  0226                     i1l69:	
  1378                           ;main.c: 55:                 case (0):
  1379                           
  1380                           
  1381                           ;main.c: 56:                     LED_BLINK_STATUS = 1;
  1382  0226  01FC               	clrf	_LED_BLINK_STATUS
  1383  0227  0AFC               	incf	_LED_BLINK_STATUS,f
  1384                           
  1385                           ;main.c: 57:                     break;
  1386  0228  2A3B               	goto	i1l67
  1387  0229                     i1l1117:
  1388                           
  1389                           ;main.c: 60:                     LED_BLINK_STATUS = 0;
  1390  0229  01FC               	clrf	_LED_BLINK_STATUS
  1391                           
  1392                           ;main.c: 61:                     break;
  1393  022A  2A3B               	goto	i1l67
  1394  022B                     i1l1121:
  1395  022B  087C               	movf	_LED_BLINK_STATUS,w
  1396  022C  00F5               	movwf	??_ISR
  1397  022D  01F6               	clrf	??_ISR+1
  1398                           
  1399                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1400                           ; Switch size 1, requested type "simple"
  1401                           ; Number of cases is 1, Range of values is 0 to 0
  1402                           ; switch strategies available:
  1403                           ; Name         Instructions Cycles
  1404                           ; simple_byte            4     3 (average)
  1405                           ; direct_byte           11     8 (fixed)
  1406                           ; jumptable            260     6 (fixed)
  1407                           ;	Chosen strategy is simple_byte
  1408  022E  0876               	movf	??_ISR+1,w
  1409  022F  3A00               	xorlw	0	; case 0
  1410  0230  1903               	skipnz
  1411  0231  2A33               	goto	i1l1317
  1412  0232  2A3B               	goto	i1l67
  1413  0233                     i1l1317:
  1414                           
  1415                           ; Switch size 1, requested type "simple"
  1416                           ; Number of cases is 2, Range of values is 0 to 1
  1417                           ; switch strategies available:
  1418                           ; Name         Instructions Cycles
  1419                           ; simple_byte            7     4 (average)
  1420                           ; direct_byte           14     8 (fixed)
  1421                           ; jumptable            260     6 (fixed)
  1422                           ;	Chosen strategy is simple_byte
  1423  0233  0875               	movf	??_ISR,w
  1424  0234  3A00               	xorlw	0	; case 0
  1425  0235  1903               	skipnz
  1426  0236  2A26               	goto	i1l69
  1427  0237  3A01               	xorlw	1	; case 1
  1428  0238  1903               	skipnz
  1429  0239  2A29               	goto	i1l1117
  1430  023A  2A3B               	goto	i1l67
  1431  023B                     i1l67:	
  1432                           ;main.c: 63:         }
  1433                           
  1434                           
  1435                           ;main.c: 65:         TMR1 = 65536-50000;
  1436  023B  303C               	movlw	60
  1437  023C  1283               	bcf	3,5	;RP0=0, select bank0
  1438  023D  1303               	bcf	3,6	;RP1=0, select bank0
  1439  023E  008F               	movwf	15	;volatile
  1440  023F  30B0               	movlw	176
  1441  0240  008E               	movwf	14	;volatile
  1442                           
  1443                           ;main.c: 66:         TMR1IF = 0;
  1444  0241  100C               	bcf	12,0	;volatile
  1445  0242                     i1l72:
  1446  0242  087A               	movf	??_ISR+5,w
  1447  0243  00FF               	movwf	btemp+1
  1448  0244  0879               	movf	??_ISR+4,w
  1449  0245  008A               	movwf	10
  1450  0246  0878               	movf	??_ISR+3,w
  1451  0247  0084               	movwf	4
  1452  0248  0E77               	swapf	(??_ISR+2)^(0+4294967168),w
  1453  0249  0083               	movwf	3
  1454  024A  0EFE               	swapf	btemp,f
  1455  024B  0E7E               	swapf	btemp,w
  1456  024C  0009               	retfie
  1457  024D                     __end_of_ISR:
  1458                           
  1459                           	psect	intentry
  1460  0004                     __pintentry:	
  1461                           ;incstack = 0
  1462                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1463                           
  1464  0004                     interrupt_function:
  1465  007E                     saved_w	set	btemp
  1466  0004  00FE               	movwf	btemp
  1467  0005  0E03               	swapf	3,w
  1468  0006  00F7               	movwf	??_ISR+2
  1469  0007  0804               	movf	4,w
  1470  0008  00F8               	movwf	??_ISR+3
  1471  0009  080A               	movf	10,w
  1472  000A  00F9               	movwf	??_ISR+4
  1473  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1474  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1475  000D  087F               	movf	btemp+1,w
  1476  000E  00FA               	movwf	??_ISR+5
  1477  000F  120A  118A  29FB   	ljmp	_ISR
  1478                           
  1479                           	psect	text4
  1480  024D                     __ptext4:	
  1481 ;; *************** function ___lwmod *****************
  1482 ;; Defined at:
  1483 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
  1484 ;; Parameters:    Size  Location     Type
  1485 ;;  divisor         2    0[COMMON] unsigned int 
  1486 ;;  dividend        2    2[COMMON] unsigned int 
  1487 ;; Auto vars:     Size  Location     Type
  1488 ;;  counter         1    4[COMMON] unsigned char 
  1489 ;; Return value:  Size  Location     Type
  1490 ;;                  2    0[COMMON] unsigned int 
  1491 ;; Registers used:
  1492 ;;		wreg, status,2, status,0, btemp+1
  1493 ;; Tracked objects:
  1494 ;;		On entry : 0/0
  1495 ;;		On exit  : 0/0
  1496 ;;		Unchanged: 0/0
  1497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1498 ;;      Params:         4       0       0       0       0
  1499 ;;      Locals:         1       0       0       0       0
  1500 ;;      Temps:          0       0       0       0       0
  1501 ;;      Totals:         5       0       0       0       0
  1502 ;;Total ram usage:        5 bytes
  1503 ;; Hardware stack levels used:    1
  1504 ;; This function calls:
  1505 ;;		Nothing
  1506 ;; This function is called by:
  1507 ;;		_ISR
  1508 ;; This function uses a non-reentrant model
  1509 ;;
  1510                           
  1511                           
  1512                           ;psect for function ___lwmod
  1513  024D                     ___lwmod:
  1514  024D                     i1l1081:	
  1515                           ;incstack = 0
  1516                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
  1517                           
  1518  024D  0870               	movf	___lwmod@divisor,w
  1519  024E  0471               	iorwf	___lwmod@divisor+1,w
  1520  024F  1903               	btfsc	3,2
  1521  0250  2A52               	goto	u51_21
  1522  0251  2A53               	goto	u51_20
  1523  0252                     u51_21:
  1524  0252  2A82               	goto	i1l1099
  1525  0253                     u51_20:
  1526  0253                     i1l1083:
  1527  0253  01F4               	clrf	___lwmod@counter
  1528  0254  0AF4               	incf	___lwmod@counter,f
  1529  0255  2A61               	goto	i1l1089
  1530  0256                     i1l1085:
  1531  0256  3001               	movlw	1
  1532  0257                     u52_25:
  1533  0257  1003               	clrc
  1534  0258  0DF0               	rlf	___lwmod@divisor,f
  1535  0259  0DF1               	rlf	___lwmod@divisor+1,f
  1536  025A  3EFF               	addlw	-1
  1537  025B  1D03               	skipz
  1538  025C  2A57               	goto	u52_25
  1539  025D                     i1l1087:
  1540  025D  3001               	movlw	1
  1541  025E  00FF               	movwf	btemp+1
  1542  025F  087F               	movf	btemp+1,w
  1543  0260  07F4               	addwf	___lwmod@counter,f
  1544  0261                     i1l1089:
  1545  0261  1FF1               	btfss	___lwmod@divisor+1,7
  1546  0262  2A64               	goto	u53_21
  1547  0263  2A65               	goto	u53_20
  1548  0264                     u53_21:
  1549  0264  2A56               	goto	i1l1085
  1550  0265                     u53_20:
  1551  0265                     i1l1091:
  1552  0265  0871               	movf	___lwmod@divisor+1,w
  1553  0266  0273               	subwf	___lwmod@dividend+1,w
  1554  0267  1D03               	skipz
  1555  0268  2A6B               	goto	u54_25
  1556  0269  0870               	movf	___lwmod@divisor,w
  1557  026A  0272               	subwf	___lwmod@dividend,w
  1558  026B                     u54_25:
  1559  026B  1C03               	skipc
  1560  026C  2A6E               	goto	u54_21
  1561  026D  2A6F               	goto	u54_20
  1562  026E                     u54_21:
  1563  026E  2A75               	goto	i1l1095
  1564  026F                     u54_20:
  1565  026F                     i1l1093:
  1566  026F  0870               	movf	___lwmod@divisor,w
  1567  0270  02F2               	subwf	___lwmod@dividend,f
  1568  0271  0871               	movf	___lwmod@divisor+1,w
  1569  0272  1C03               	skipc
  1570  0273  03F3               	decf	___lwmod@dividend+1,f
  1571  0274  02F3               	subwf	___lwmod@dividend+1,f
  1572  0275                     i1l1095:
  1573  0275  3001               	movlw	1
  1574  0276                     u55_25:
  1575  0276  1003               	clrc
  1576  0277  0CF1               	rrf	___lwmod@divisor+1,f
  1577  0278  0CF0               	rrf	___lwmod@divisor,f
  1578  0279  3EFF               	addlw	-1
  1579  027A  1D03               	skipz
  1580  027B  2A76               	goto	u55_25
  1581  027C                     i1l1097:
  1582  027C  3001               	movlw	1
  1583  027D  02F4               	subwf	___lwmod@counter,f
  1584  027E  1D03               	btfss	3,2
  1585  027F  2A81               	goto	u56_21
  1586  0280  2A82               	goto	u56_20
  1587  0281                     u56_21:
  1588  0281  2A65               	goto	i1l1091
  1589  0282                     u56_20:
  1590  0282                     i1l1099:
  1591  0282  0873               	movf	___lwmod@dividend+1,w
  1592  0283  00F1               	movwf	?___lwmod+1
  1593  0284  0872               	movf	___lwmod@dividend,w
  1594  0285  00F0               	movwf	?___lwmod
  1595  0286                     i1l461:
  1596  0286  0008               	return
  1597  0287                     __end_of___lwmod:
  1598  007E                     btemp	set	126	;btemp
  1599  007E                     wtemp0	set	126
  1600                           
  1601                           	psect	config
  1602                           
  1603                           ;Config register CONFIG @ 0x2007
  1604                           ;	Oscillator Selection bits
  1605                           ;	FOSC = XT, XT oscillator
  1606                           ;	Watchdog Timer Enable bit
  1607                           ;	WDTE = OFF, WDT disabled
  1608                           ;	Power-up Timer Enable bit
  1609                           ;	PWRTE = ON, PWRT enabled
  1610                           ;	Brown-out Reset Enable bit
  1611                           ;	BOREN = ON, BOR enabled
  1612                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1613                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1614                           ;	Data EEPROM Memory Code Protection bit
  1615                           ;	CPD = OFF, Data EEPROM code protection off
  1616                           ;	Flash Program Memory Write Enable bits
  1617                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1618                           ;	In-Circuit Debugger Mode bit
  1619                           ;	DEBUG = 0x1, unprogrammed default
  1620                           ;	Flash Program Memory Code Protection bit
  1621                           ;	CP = OFF, Code protection off
  1622  2007                     	org	8199
  1623  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        13
    BSS         9
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80     10      30
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->___lwmod

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1204
                                              8 BANK0      2     2      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     604
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  6     6      0     311
                                              5 COMMON     6     6      0
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod

 _ISR (ROOT)
   ___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      1E       5       37.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      2B      12        0.0%
ABS                  0      0      2B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 05 08:00:17 2020

                      pc 0002                       l90 0111                       l82 00C9  
                     l84 00DE                       l85 00ED                       l87 00F8  
                     l89 00FA             ___awdiv@sign 0031                       fsr 0004  
                    l332 019F                      l345 01FA                      _GIE 005F  
                    l999 0137                      _RA2 002A                      _RB0 0030  
                    _RA3 002B                      _RA4 002C                      _RA5 002D  
                    _RD7 0047                      u400 0191                      u320 013E  
                    u401 0190                      u321 013D                      u410 0196  
                    u330 0149                      u411 0195                      u331 0148  
                    u340 015A                      u500 01F1                      u420 01A7  
                    u341 0159                      u501 01F0                      u421 01A6  
                    u430 01B2                      u431 01B1                      u360 016C  
                    u440 01BD                      u600 0059                      u361 016B  
                    u441 01BC                      u601 0058                      u610 0064  
                    u355 015E                      u611 0063                      u380 017D  
                    u460 01CF                      u620 006F                      _ISR 01FB  
                    u381 017C                      u461 01CE                      u621 006E  
                    u470 01D9                      u375 016D                      u471 01D8  
                    u455 01C1                      u385 0179                      u490 01EC  
                    u395 0185                      u491 01EB                      u475 01D5  
                    u485 01E0                      _SSD 0020               _SSD_status 002A  
                    fsr0 0004                      indf 0000             ___awmod@sign 0031  
                   ?_ISR 0070                     l1001 013A                     l1011 014E  
                   l1003 013E                     l1021 0164                     l1013 0152  
                   l1005 0143                     l1031 0184                     l1023 0168  
                   l1015 0154                     l1007 0145                     l1033 018B  
                   l1025 016C                     l1017 015A                     l1009 0149  
                   l1201 010C                     l1027 017D                     l1019 015D  
                   l1035 0191                     l1051 01AE                     l1043 01A0  
                   l1203 0115                     l1131 003A                     l1037 0196  
                   l1029 0183                     l1061 01C7                     l1053 01B2  
                   l1045 01A3                     l1205 011B                     l1141 0042  
                   l1133 003D                     l1039 019B                     l1071 01E6  
                   l1063 01CB                     l1055 01B7                     l1047 01A7  
                   l1151 004A                     l1143 0046                     l1135 003E  
                   l1065 01CF                     l1057 01BD                     l1073 01EC  
                   l1049 01AC                     l1313 0104                     l1209 011E  
                   l1161 0053                     l1153 004B                     l1145 0047  
                   l1137 003F                     l1129 0036                     l1075 01F1  
                   l1067 01D9                     l1059 01C0                     l1315 0126  
                   l1171 0068                     l1163 0059                     l1155 004E  
                   l1147 0048                     l1139 0040                     l1077 01F6  
                   l1069 01DF                     l1181 009C                     l1173 0069  
                   l1165 005D                     l1157 0051                     l1149 0049  
                   l1191 00E2                     l1183 00B2                     l1175 006F  
                   l1167 005E                     l1159 0052                     l1193 00E8  
                   l1185 00CD                     l1177 0070                     l1169 0064  
                   l1195 00F1                     l1187 00D1                     l1179 0086  
                   l1189 00D9                     l1199 00FC                     _PEIE 005E  
                   i1l72 0242                     i1l67 023B                     i1l69 0226  
                   _TMR1 000E                     _main 0036                     btemp 007E  
                   start 0012                    ??_ISR 0075                    ?_main 0070  
        __end_of___awdiv 01A0          __end_of___awmod 01FB          ___awdiv@divisor 002C  
        __end_of___lwmod 0287                    i1l461 0286          ___awdiv@counter 0030  
                  u51_20 0253                    u51_21 0252                    _PORTD 0008  
                  u52_25 0257                    u53_20 0265                    u53_21 0264  
                  u54_20 026F                    u54_21 026E                    u54_25 026B  
                  u55_25 0276                    u56_20 0282                    u56_21 0281  
                  u57_20 01FF                    u57_21 01FE                    _TRISA 0085  
                  _TRISD 0088                    u58_20 020C                    u58_21 020B  
                  u59_20 0225                    u59_21 0224                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 0015  
           __end_of_main 0137                   ??_main 0034         ___awdiv@dividend 002E  
                 i1l1111 0210                   i1l1103 01FB                   i1l1121 022B  
                 i1l1113 0212                   i1l1105 01FF                   i1l1107 0205  
                 i1l1117 0229                   i1l1109 020C                   i1l1081 024D  
                 i1l1091 0265                   i1l1083 0253                   i1l1093 026F  
                 i1l1085 0256                   i1l1317 0233                   i1l1095 0275  
                 i1l1087 025D                   i1l1097 027C                   i1l1089 0261  
                 i1l1099 0282                   _TMR1IE 0460                   _TMR1IF 0060  
                 _TMR1CS 0081                   _TMR1ON 0080                ??___awdiv 0030  
              ??___awmod 0030                ??___lwmod 0074         ___awdiv@quotient 0032  
        ___awmod@divisor 002C          ___awmod@counter 0030             __pdataCOMMON 007C  
       _LED_BLINK_STATUS 007C                   saved_w 007E  __end_of__initialization 0032  
         __pcstackCOMMON 0070             __pidataBANK0 029A               __pbssBANK0 0036  
          _Hours_Counter 002B               __pmaintext 0036               __pintentry 0004  
                _T1CKPS0 0084                  _T1CKPS1 0085                  ___awdiv 0137  
                ___awmod 01A0                  ___lwmod 024D                  __ptext1 01A0  
                __ptext2 0137                  __ptext3 01FB                  __ptext4 024D  
           __size_of_ISR 0052         ___awmod@dividend 002E     end_of_initialization 0032  
          __pidataCOMMON 02A6      start_initialization 0015              __end_of_ISR 024D  
             init_fetch0 0287              __pdataBANK0 0020              __pbssCOMMON 007B  
              ___latbits 0002            __pcstackBANK0 002C          _Seconds_Counter 003D  
               ?___awdiv 002C                 ?___awmod 002C                 ?___lwmod 0070  
          _Timer_Counter 0036        interrupt_function 0004           _Minute_Counter 003C  
         _LED_BLINK_FLAG 007B         __size_of___awdiv 0069         __size_of___awmod 005B  
       __size_of___lwmod 003A            __size_of_main 0101             _SSD1_counter 003B  
           _SSD2_counter 003A             _SSD3_counter 0039             _SSD4_counter 0038  
               init_ram0 028B                 intlevel1 0000         ___lwmod@dividend 0072  
        ___lwmod@divisor 0070          ___lwmod@counter 0074  
