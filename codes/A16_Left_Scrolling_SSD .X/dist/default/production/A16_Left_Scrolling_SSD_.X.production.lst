

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 05 02:35:45 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173                           
   174                           	psect	idataBANK0
   175  0125                     __pidataBANK0:
   176                           
   177                           ;initializer for _SSD
   178  0125  343F               	retlw	63
   179  0126  3406               	retlw	6
   180  0127  345B               	retlw	91
   181  0128  344F               	retlw	79
   182  0129  3466               	retlw	102
   183  012A  346D               	retlw	109
   184  012B  347D               	retlw	125
   185  012C  3407               	retlw	7
   186  012D  347F               	retlw	127
   187  012E  346F               	retlw	111
   188  012F  3400               	retlw	0
   189                           
   190                           ;initializer for _SSD_status
   191  0130  3401               	retlw	1
   192                           
   193                           ;initializer for _Massage
   194  0131  3431               	retlw	49
   195  0132  3432               	retlw	50
   196  0133  3433               	retlw	51
   197  0134  3434               	retlw	52
   198  0135  3435               	retlw	53
   199  0136  3436               	retlw	54
   200  0137  3437               	retlw	55
   201  0138  3438               	retlw	56
   202  0139  3439               	retlw	57
   203  013A  3430               	retlw	48
   204  013B  3431               	retlw	49
   205  013C  3432               	retlw	50
   206  013D  3434               	retlw	52
   207  013E  3438               	retlw	56
   208  013F  3431               	retlw	49
   209  0140  3436               	retlw	54
   210  0141  3400               	retlw	0
   211  0142  3400               	retlw	0
   212  0143  3400               	retlw	0
   213  0144  3400               	retlw	0
   214  0145  3400               	retlw	0
   215  0146  3400               	retlw	0
   216  0147  3400               	retlw	0
   217  0148  3400               	retlw	0
   218  0149  3400               	retlw	0
   219  000E                     _TMR1	set	14
   220  0008                     _PORTD	set	8
   221  0047                     _RD7	set	71
   222  005F                     _GIE	set	95
   223  005E                     _PEIE	set	94
   224  0080                     _TMR1ON	set	128
   225  0030                     _RB0	set	48
   226  0085                     _T1CKPS1	set	133
   227  0084                     _T1CKPS0	set	132
   228  0081                     _TMR1CS	set	129
   229  002D                     _RA5	set	45
   230  002C                     _RA4	set	44
   231  002B                     _RA3	set	43
   232  002A                     _RA2	set	42
   233  0060                     _TMR1IF	set	96
   234  0085                     _TRISA	set	133
   235  0088                     _TRISD	set	136
   236  0460                     _TMR1IE	set	1120
   237                           
   238                           	psect	cinit
   239  000F                     start_initialization:	
   240                           ; #config settings
   241                           
   242  000F                     __initialization:
   243                           
   244                           ; Initialize objects allocated to BANK0
   245  000F  1383               	bcf	3,7	;select IRP bank0
   246  0010  3045               	movlw	low (__pdataBANK0+37)
   247  0011  00FD               	movwf	btemp+-1
   248  0012  3001               	movlw	high __pidataBANK0
   249  0013  00FE               	movwf	btemp
   250  0014  3025               	movlw	low __pidataBANK0
   251  0015  00FF               	movwf	btemp+1
   252  0016  3020               	movlw	low __pdataBANK0
   253  0017  0084               	movwf	4
   254  0018  120A  118A  218C  120A  118A  	fcall	init_ram0
   255                           
   256                           ; Clear objects allocated to BANK0
   257  001D  01C5               	clrf	__pbssBANK0& (0+127)
   258  001E  01C6               	clrf	(__pbssBANK0+1)& (0+127)
   259  001F  01C7               	clrf	(__pbssBANK0+2)& (0+127)
   260  0020  01C8               	clrf	(__pbssBANK0+3)& (0+127)
   261  0021  01C9               	clrf	(__pbssBANK0+4)& (0+127)
   262                           
   263                           ; Clear objects allocated to COMMON
   264  0022  01F7               	clrf	__pbssCOMMON& (0+127)
   265  0023  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   266  0024  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   267  0025  01FA               	clrf	(__pbssCOMMON+3)& (0+127)
   268  0026  01FB               	clrf	(__pbssCOMMON+4)& (0+127)
   269  0027                     end_of_initialization:	
   270                           ;End of C runtime variable initialization code
   271                           
   272  0027                     __end_of__initialization:
   273  0027  0183               	clrf	3
   274  0028  120A  118A  282B   	ljmp	_main	;jump to C main() function
   275                           
   276                           	psect	bssCOMMON
   277  0077                     __pbssCOMMON:
   278  0077                     _Massage_Offset:
   279  0077                     	ds	1
   280  0078                     _SSD4_counter:
   281  0078                     	ds	1
   282  0079                     _SSD3_counter:
   283  0079                     	ds	1
   284  007A                     _SSD2_counter:
   285  007A                     	ds	1
   286  007B                     _SSD1_counter:
   287  007B                     	ds	1
   288                           
   289                           	psect	bssBANK0
   290  0045                     __pbssBANK0:
   291  0045                     _Timer_Flag:
   292  0045                     	ds	2
   293  0047                     _Timer_Counter:
   294  0047                     	ds	2
   295  0049                     _LED_BLINK_FLAG:
   296  0049                     	ds	1
   297                           
   298                           	psect	dataBANK0
   299  0020                     __pdataBANK0:
   300  0020                     _SSD:
   301  0020                     	ds	11
   302  002B                     _SSD_status:
   303  002B                     	ds	1
   304  002C                     _Massage:
   305  002C                     	ds	25
   306                           
   307                           	psect	inittext
   308  0188                     init_fetch0:	
   309                           ;	Called with low address in FSR and high address in W
   310                           
   311  0188  087E               	movf	btemp,w
   312  0189  008A               	movwf	10
   313  018A  087F               	movf	btemp+1,w
   314  018B  0082               	movwf	2
   315  018C                     init_ram0:	
   316                           ;Called with:
   317                           ;	high address of idata address in btemp 
   318                           ;	low address of idata address in btemp+1 
   319                           ;	low address of data in FSR
   320                           ;	high address + 1 of data in btemp-1
   321                           
   322  018C  120A  118A  2188  120A  118A  	fcall	init_fetch0
   323  0191  0080               	movwf	0
   324  0192  0A84               	incf	4,f
   325  0193  0804               	movf	4,w
   326  0194  067D               	xorwf	btemp+-1,w
   327  0195  1903               	btfsc	3,2
   328  0196  3400               	retlw	0
   329  0197  0AFF               	incf	btemp+1,f
   330  0198  1903               	btfsc	3,2
   331  0199  0AFE               	incf	btemp,f
   332  019A  298C               	goto	init_ram0
   333                           
   334                           	psect	cstackCOMMON
   335  0070                     __pcstackCOMMON:
   336  0070                     ?_ISR:
   337  0070                     ??_ISR:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_main:	
   341                           ; 1 bytes @ 0x0
   342                           
   343                           
   344                           ; 1 bytes @ 0x0
   345  0070                     	ds	2
   346  0072                     ?_strlen:
   347                           
   348                           ; 2 bytes @ 0x2
   349  0072                     	ds	3
   350  0075                     ??_strlen:
   351  0075                     strlen@s:	
   352                           ; 1 bytes @ 0x5
   353                           
   354                           
   355                           ; 1 bytes @ 0x5
   356  0075                     	ds	1
   357  0076                     strlen@cp:
   358                           
   359                           ; 1 bytes @ 0x6
   360  0076                     	ds	1
   361                           
   362                           	psect	cstackBANK0
   363  004A                     __pcstackBANK0:
   364  004A                     ??_main:
   365                           
   366                           ; 1 bytes @ 0x0
   367  004A                     	ds	2
   368                           
   369                           	psect	maintext
   370  002B                     __pmaintext:	
   371 ;;
   372 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   373 ;;
   374 ;; *************** function _main *****************
   375 ;; Defined at:
   376 ;;		line 57 in file "main.c"
   377 ;; Parameters:    Size  Location     Type
   378 ;;		None
   379 ;; Auto vars:     Size  Location     Type
   380 ;;		None
   381 ;; Return value:  Size  Location     Type
   382 ;;                  1    wreg      void 
   383 ;; Registers used:
   384 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   385 ;; Tracked objects:
   386 ;;		On entry : B00/0
   387 ;;		On exit  : 0/0
   388 ;;		Unchanged: 0/0
   389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   390 ;;      Params:         0       0       0       0       0
   391 ;;      Locals:         0       0       0       0       0
   392 ;;      Temps:          0       2       0       0       0
   393 ;;      Totals:         0       2       0       0       0
   394 ;;Total ram usage:        2 bytes
   395 ;; Hardware stack levels required when called:    2
   396 ;; This function calls:
   397 ;;		_strlen
   398 ;; This function is called by:
   399 ;;		Startup code after reset
   400 ;; This function uses a non-reentrant model
   401 ;;
   402                           
   403                           
   404                           ;psect for function _main
   405  002B                     _main:
   406  002B                     l1006:	
   407                           ;incstack = 0
   408                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   409                           
   410                           
   411                           ;main.c: 61:     TRISD = 0x00;
   412  002B  1683               	bsf	3,5	;RP0=1, select bank1
   413  002C  1303               	bcf	3,6	;RP1=0, select bank1
   414  002D  0188               	clrf	8	;volatile
   415                           
   416                           ;main.c: 62:     TRISA = 0;
   417  002E  0185               	clrf	5	;volatile
   418  002F                     l1008:
   419                           
   420                           ;main.c: 63:     RA2=0;
   421  002F  1283               	bcf	3,5	;RP0=0, select bank0
   422  0030  1303               	bcf	3,6	;RP1=0, select bank0
   423  0031  1105               	bcf	5,2	;volatile
   424  0032                     l1010:
   425                           
   426                           ;main.c: 64:     RA3=0;
   427  0032  1185               	bcf	5,3	;volatile
   428  0033                     l1012:
   429                           
   430                           ;main.c: 65:     RA4=0;
   431  0033  1205               	bcf	5,4	;volatile
   432  0034                     l1014:
   433                           
   434                           ;main.c: 66:     RA5=0;
   435  0034  1285               	bcf	5,5	;volatile
   436  0035                     l1016:
   437                           
   438                           ;main.c: 67:     PORTD = SSD[0];
   439  0035  0820               	movf	_SSD,w
   440  0036  0088               	movwf	8	;volatile
   441  0037                     l1018:
   442                           
   443                           ;main.c: 71:     TMR1 = 65536-50000;
   444  0037  303C               	movlw	60
   445  0038  008F               	movwf	15	;volatile
   446  0039  30B0               	movlw	176
   447  003A  008E               	movwf	14	;volatile
   448  003B                     l1020:
   449                           
   450                           ;main.c: 73:     TMR1CS = 0;
   451  003B  1090               	bcf	16,1	;volatile
   452  003C                     l1022:
   453                           
   454                           ;main.c: 75:     T1CKPS0 = 1;
   455  003C  1610               	bsf	16,4	;volatile
   456  003D                     l1024:
   457                           
   458                           ;main.c: 76:     T1CKPS1 = 0;
   459  003D  1290               	bcf	16,5	;volatile
   460  003E                     l1026:
   461                           
   462                           ;main.c: 78:     RB0 = 1;
   463  003E  1406               	bsf	6,0	;volatile
   464  003F                     l1028:
   465                           
   466                           ;main.c: 80:     TMR1ON = 1;
   467  003F  1410               	bsf	16,0	;volatile
   468  0040                     l1030:
   469                           
   470                           ;main.c: 82:     TMR1IE = 1;
   471  0040  1683               	bsf	3,5	;RP0=1, select bank1
   472  0041  1303               	bcf	3,6	;RP1=0, select bank1
   473  0042  140C               	bsf	12,0	;volatile
   474  0043                     l1032:
   475                           
   476                           ;main.c: 83:     TMR1IF = 0;
   477  0043  1283               	bcf	3,5	;RP0=0, select bank0
   478  0044  1303               	bcf	3,6	;RP1=0, select bank0
   479  0045  100C               	bcf	12,0	;volatile
   480  0046                     l1034:
   481                           
   482                           ;main.c: 84:     PEIE = 1;
   483  0046  170B               	bsf	11,6	;volatile
   484  0047                     l1036:
   485                           
   486                           ;main.c: 85:     GIE = 1;
   487  0047  178B               	bsf	11,7	;volatile
   488  0048                     l1038:
   489                           
   490                           ;main.c: 93:         if(Timer_Flag==1){
   491  0048  0345               	decf	_Timer_Flag,w
   492  0049  0446               	iorwf	_Timer_Flag+1,w
   493  004A  1D03               	btfss	3,2
   494  004B  284D               	goto	u211
   495  004C  284E               	goto	u210
   496  004D                     u211:
   497  004D  2854               	goto	l1044
   498  004E                     u210:
   499  004E                     l1040:
   500                           
   501                           ;main.c: 94:             Massage_Offset += 4;
   502  004E  3004               	movlw	4
   503  004F  00FF               	movwf	btemp+1
   504  0050  087F               	movf	btemp+1,w
   505  0051  07F7               	addwf	_Massage_Offset,f
   506  0052                     l1042:
   507                           
   508                           ;main.c: 95:             Timer_Flag=0;
   509  0052  01C5               	clrf	_Timer_Flag
   510  0053  01C6               	clrf	_Timer_Flag+1
   511  0054                     l1044:
   512                           
   513                           ;main.c: 97:         if (Massage_Offset > strlen(Massage)){
   514  0054  0877               	movf	_Massage_Offset,w
   515  0055  00CA               	movwf	??_main
   516  0056  01CB               	clrf	??_main+1
   517  0057  302C               	movlw	(low (_Massage| 0))& (0+255)
   518  0058  120A  118A  216F  120A  118A  	fcall	_strlen
   519  005D  1283               	bcf	3,5	;RP0=0, select bank0
   520  005E  1303               	bcf	3,6	;RP1=0, select bank0
   521  005F  084B               	movf	??_main+1,w
   522  0060  0273               	subwf	?_strlen+1,w
   523  0061  1D03               	skipz
   524  0062  2865               	goto	u225
   525  0063  084A               	movf	??_main,w
   526  0064  0272               	subwf	?_strlen,w
   527  0065                     u225:
   528  0065  1803               	skipnc
   529  0066  2868               	goto	u221
   530  0067  2869               	goto	u220
   531  0068                     u221:
   532  0068  286C               	goto	l1048
   533  0069                     u220:
   534  0069                     l1046:
   535                           
   536                           ;main.c: 98:             Massage_Offset=0;
   537  0069  01F7               	clrf	_Massage_Offset
   538                           
   539                           ;main.c: 99:             Timer_Flag=0;
   540  006A  01C5               	clrf	_Timer_Flag
   541  006B  01C6               	clrf	_Timer_Flag+1
   542  006C                     l1048:
   543                           
   544                           ;main.c: 103:         SSD4_counter = Massage[0+Massage_Offset] - '0';
   545  006C  0877               	movf	_Massage_Offset,w
   546  006D  3E2C               	addlw	(low (_Massage| 0))& (0+255)
   547  006E  0084               	movwf	4
   548  006F  1383               	bcf	3,7	;select IRP bank0
   549  0070  0800               	movf	0,w
   550  0071  3ED0               	addlw	208
   551  0072  00FF               	movwf	btemp+1
   552  0073  087F               	movf	btemp+1,w
   553  0074  00F8               	movwf	_SSD4_counter
   554  0075                     l1050:
   555                           
   556                           ;main.c: 104:         if(SSD4_counter>10)
   557  0075  300B               	movlw	11
   558  0076  0278               	subwf	_SSD4_counter,w
   559  0077  1C03               	skipc
   560  0078  287A               	goto	u231
   561  0079  287B               	goto	u230
   562  007A                     u231:
   563  007A  287F               	goto	l1054
   564  007B                     u230:
   565  007B                     l1052:
   566                           
   567                           ;main.c: 105:             SSD4_counter=10;
   568  007B  300A               	movlw	10
   569  007C  00FF               	movwf	btemp+1
   570  007D  087F               	movf	btemp+1,w
   571  007E  00F8               	movwf	_SSD4_counter
   572  007F                     l1054:
   573                           
   574                           ;main.c: 106:         SSD3_counter = Massage[1+Massage_Offset] - '0';
   575  007F  0877               	movf	_Massage_Offset,w
   576  0080  3E2D               	addlw	(low ((_Massage| 0+1)))& (0+255)
   577  0081  0084               	movwf	4
   578  0082  0800               	movf	0,w
   579  0083  3ED0               	addlw	208
   580  0084  00FF               	movwf	btemp+1
   581  0085  087F               	movf	btemp+1,w
   582  0086  00F9               	movwf	_SSD3_counter
   583  0087                     l1056:
   584                           
   585                           ;main.c: 107:         if(SSD3_counter>10)
   586  0087  300B               	movlw	11
   587  0088  0279               	subwf	_SSD3_counter,w
   588  0089  1C03               	skipc
   589  008A  288C               	goto	u241
   590  008B  288D               	goto	u240
   591  008C                     u241:
   592  008C  2891               	goto	l1060
   593  008D                     u240:
   594  008D                     l1058:
   595                           
   596                           ;main.c: 108:             SSD3_counter=10;
   597  008D  300A               	movlw	10
   598  008E  00FF               	movwf	btemp+1
   599  008F  087F               	movf	btemp+1,w
   600  0090  00F9               	movwf	_SSD3_counter
   601  0091                     l1060:
   602                           
   603                           ;main.c: 109:         SSD2_counter = Massage[2+Massage_Offset] - '0';
   604  0091  0877               	movf	_Massage_Offset,w
   605  0092  3E2E               	addlw	(low ((_Massage| 0+2)))& (0+255)
   606  0093  0084               	movwf	4
   607  0094  0800               	movf	0,w
   608  0095  3ED0               	addlw	208
   609  0096  00FF               	movwf	btemp+1
   610  0097  087F               	movf	btemp+1,w
   611  0098  00FA               	movwf	_SSD2_counter
   612  0099                     l1062:
   613                           
   614                           ;main.c: 110:         if(SSD2_counter>10)
   615  0099  300B               	movlw	11
   616  009A  027A               	subwf	_SSD2_counter,w
   617  009B  1C03               	skipc
   618  009C  289E               	goto	u251
   619  009D  289F               	goto	u250
   620  009E                     u251:
   621  009E  28A3               	goto	l1066
   622  009F                     u250:
   623  009F                     l1064:
   624                           
   625                           ;main.c: 111:             SSD2_counter=10;
   626  009F  300A               	movlw	10
   627  00A0  00FF               	movwf	btemp+1
   628  00A1  087F               	movf	btemp+1,w
   629  00A2  00FA               	movwf	_SSD2_counter
   630  00A3                     l1066:
   631                           
   632                           ;main.c: 112:         SSD1_counter = Massage[3+Massage_Offset] - '0';
   633  00A3  0877               	movf	_Massage_Offset,w
   634  00A4  3E2F               	addlw	(low ((_Massage| 0+3)))& (0+255)
   635  00A5  0084               	movwf	4
   636  00A6  0800               	movf	0,w
   637  00A7  3ED0               	addlw	208
   638  00A8  00FF               	movwf	btemp+1
   639  00A9  087F               	movf	btemp+1,w
   640  00AA  00FB               	movwf	_SSD1_counter
   641  00AB                     l1068:
   642                           
   643                           ;main.c: 113:         if(SSD1_counter>10)
   644  00AB  300B               	movlw	11
   645  00AC  027B               	subwf	_SSD1_counter,w
   646  00AD  1C03               	skipc
   647  00AE  28B0               	goto	u261
   648  00AF  28B1               	goto	u260
   649  00B0                     u261:
   650  00B0  290C               	goto	l1104
   651  00B1                     u260:
   652  00B1                     l1070:
   653                           
   654                           ;main.c: 114:             SSD1_counter=10;
   655  00B1  300A               	movlw	10
   656  00B2  00FF               	movwf	btemp+1
   657  00B3  087F               	movf	btemp+1,w
   658  00B4  00FB               	movwf	_SSD1_counter
   659  00B5  290C               	goto	l1104
   660  00B6                     l80:	
   661                           ;main.c: 117:             case 1:
   662                           
   663                           
   664                           ;main.c: 118:                 RA2 = 0;
   665  00B6  1105               	bcf	5,2	;volatile
   666                           
   667                           ;main.c: 119:                 RA3 = 0;
   668  00B7  1185               	bcf	5,3	;volatile
   669                           
   670                           ;main.c: 120:                 RA4 = 0;
   671  00B8  1205               	bcf	5,4	;volatile
   672                           
   673                           ;main.c: 121:                 RA5 = 1;
   674  00B9  1685               	bsf	5,5	;volatile
   675  00BA                     l1072:
   676                           
   677                           ;main.c: 122:                 PORTD &= ~0x7F;
   678  00BA  3080               	movlw	128
   679  00BB  00FF               	movwf	btemp+1
   680  00BC  087F               	movf	btemp+1,w
   681  00BD  0588               	andwf	8,f	;volatile
   682  00BE                     l1074:
   683                           
   684                           ;main.c: 123:                 PORTD |= SSD[SSD1_counter];
   685  00BE  087B               	movf	_SSD1_counter,w
   686  00BF  3E20               	addlw	(low (_SSD| 0))& (0+255)
   687  00C0  0084               	movwf	4
   688  00C1  0800               	movf	0,w
   689  00C2  00FF               	movwf	btemp+1
   690  00C3  087F               	movf	btemp+1,w
   691  00C4  0488               	iorwf	8,f	;volatile
   692  00C5                     l1076:
   693                           
   694                           ;main.c: 124:                 SSD_status = 2;
   695  00C5  3002               	movlw	2
   696  00C6  00FF               	movwf	btemp+1
   697  00C7  087F               	movf	btemp+1,w
   698  00C8  00AB               	movwf	_SSD_status
   699                           
   700                           ;main.c: 126:                 break;
   701  00C9  2848               	goto	l1038
   702  00CA                     l82:	
   703                           ;main.c: 128:             case 2:
   704                           
   705                           
   706                           ;main.c: 129:                 RA2 = 0;
   707  00CA  1105               	bcf	5,2	;volatile
   708                           
   709                           ;main.c: 130:                 RA3 = 0;
   710  00CB  1185               	bcf	5,3	;volatile
   711                           
   712                           ;main.c: 131:                 RA4 = 1;
   713  00CC  1605               	bsf	5,4	;volatile
   714                           
   715                           ;main.c: 132:                 RA5 = 0;
   716  00CD  1285               	bcf	5,5	;volatile
   717  00CE                     l1078:
   718                           
   719                           ;main.c: 133:                 PORTD &= ~0x7F;
   720  00CE  3080               	movlw	128
   721  00CF  00FF               	movwf	btemp+1
   722  00D0  087F               	movf	btemp+1,w
   723  00D1  0588               	andwf	8,f	;volatile
   724  00D2                     l1080:
   725                           
   726                           ;main.c: 134:                 PORTD |= SSD[SSD2_counter];
   727  00D2  087A               	movf	_SSD2_counter,w
   728  00D3  3E20               	addlw	(low (_SSD| 0))& (0+255)
   729  00D4  0084               	movwf	4
   730  00D5  0800               	movf	0,w
   731  00D6  00FF               	movwf	btemp+1
   732  00D7  087F               	movf	btemp+1,w
   733  00D8  0488               	iorwf	8,f	;volatile
   734  00D9                     l1082:
   735                           
   736                           ;main.c: 135:                 SSD_status = 3;
   737  00D9  3003               	movlw	3
   738  00DA  00FF               	movwf	btemp+1
   739  00DB  087F               	movf	btemp+1,w
   740  00DC  00AB               	movwf	_SSD_status
   741                           
   742                           ;main.c: 137:                 break;
   743  00DD  2848               	goto	l1038
   744  00DE                     l83:	
   745                           ;main.c: 139:             case 3:
   746                           
   747                           
   748                           ;main.c: 140:                 RA2 = 0;
   749  00DE  1105               	bcf	5,2	;volatile
   750                           
   751                           ;main.c: 141:                 RA3 = 1;
   752  00DF  1585               	bsf	5,3	;volatile
   753                           
   754                           ;main.c: 142:                 RA4 = 0;
   755  00E0  1205               	bcf	5,4	;volatile
   756                           
   757                           ;main.c: 143:                 RA5 = 0;
   758  00E1  1285               	bcf	5,5	;volatile
   759  00E2                     l1084:
   760                           
   761                           ;main.c: 144:                 PORTD &= ~0x7F;
   762  00E2  3080               	movlw	128
   763  00E3  00FF               	movwf	btemp+1
   764  00E4  087F               	movf	btemp+1,w
   765  00E5  0588               	andwf	8,f	;volatile
   766  00E6                     l1086:
   767                           
   768                           ;main.c: 145:                 PORTD |= SSD[SSD3_counter];
   769  00E6  0879               	movf	_SSD3_counter,w
   770  00E7  3E20               	addlw	(low (_SSD| 0))& (0+255)
   771  00E8  0084               	movwf	4
   772  00E9  0800               	movf	0,w
   773  00EA  00FF               	movwf	btemp+1
   774  00EB  087F               	movf	btemp+1,w
   775  00EC  0488               	iorwf	8,f	;volatile
   776  00ED                     l1088:
   777                           
   778                           ;main.c: 147:                 if (LED_BLINK_FLAG == 1) {
   779  00ED  0349               	decf	_LED_BLINK_FLAG,w
   780  00EE  1D03               	btfss	3,2
   781  00EF  28F1               	goto	u271
   782  00F0  28F2               	goto	u270
   783  00F1                     u271:
   784  00F1  28F5               	goto	l1094
   785  00F2                     u270:
   786  00F2                     l1090:
   787                           
   788                           ;main.c: 148:                     RD7 = ~RD7;
   789  00F2  3080               	movlw	128
   790  00F3  0688               	xorwf	8,f
   791  00F4                     l1092:
   792                           
   793                           ;main.c: 149:                     LED_BLINK_FLAG = 0;
   794  00F4  01C9               	clrf	_LED_BLINK_FLAG
   795  00F5                     l1094:
   796                           
   797                           ;main.c: 151:                 SSD_status = 4;
   798  00F5  3004               	movlw	4
   799  00F6  00FF               	movwf	btemp+1
   800  00F7  087F               	movf	btemp+1,w
   801  00F8  00AB               	movwf	_SSD_status
   802                           
   803                           ;main.c: 152:                 break;
   804  00F9  2848               	goto	l1038
   805  00FA                     l85:	
   806                           ;main.c: 154:             case 4:
   807                           
   808                           
   809                           ;main.c: 155:                 RA2 = 1;
   810  00FA  1505               	bsf	5,2	;volatile
   811                           
   812                           ;main.c: 156:                 RA3 = 0;
   813  00FB  1185               	bcf	5,3	;volatile
   814                           
   815                           ;main.c: 157:                 RA4 = 0;
   816  00FC  1205               	bcf	5,4	;volatile
   817                           
   818                           ;main.c: 158:                 RA5 = 0;
   819  00FD  1285               	bcf	5,5	;volatile
   820  00FE                     l1096:
   821                           
   822                           ;main.c: 159:                 PORTD &= ~0x7F;
   823  00FE  3080               	movlw	128
   824  00FF  00FF               	movwf	btemp+1
   825  0100  087F               	movf	btemp+1,w
   826  0101  0588               	andwf	8,f	;volatile
   827  0102                     l1098:
   828                           
   829                           ;main.c: 160:                 PORTD |= SSD[SSD4_counter];
   830  0102  0878               	movf	_SSD4_counter,w
   831  0103  3E20               	addlw	(low (_SSD| 0))& (0+255)
   832  0104  0084               	movwf	4
   833  0105  0800               	movf	0,w
   834  0106  00FF               	movwf	btemp+1
   835  0107  087F               	movf	btemp+1,w
   836  0108  0488               	iorwf	8,f	;volatile
   837  0109                     l1100:
   838                           
   839                           ;main.c: 161:                 SSD_status = 1;
   840  0109  01AB               	clrf	_SSD_status
   841  010A  0AAB               	incf	_SSD_status,f
   842                           
   843                           ;main.c: 163:                 break;
   844  010B  2848               	goto	l1038
   845  010C                     l1104:
   846  010C  082B               	movf	_SSD_status,w
   847  010D  00CA               	movwf	??_main
   848  010E  01CB               	clrf	??_main+1
   849                           
   850                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   851                           ; Switch size 1, requested type "simple"
   852                           ; Number of cases is 1, Range of values is 0 to 0
   853                           ; switch strategies available:
   854                           ; Name         Instructions Cycles
   855                           ; simple_byte            4     3 (average)
   856                           ; direct_byte           11     8 (fixed)
   857                           ; jumptable            260     6 (fixed)
   858                           ;	Chosen strategy is simple_byte
   859  010F  084B               	movf	??_main+1,w
   860  0110  3A00               	xorlw	0	; case 0
   861  0111  1903               	skipnz
   862  0112  2914               	goto	l1142
   863  0113  2848               	goto	l1038
   864  0114                     l1142:
   865                           
   866                           ; Switch size 1, requested type "simple"
   867                           ; Number of cases is 4, Range of values is 1 to 4
   868                           ; switch strategies available:
   869                           ; Name         Instructions Cycles
   870                           ; simple_byte           13     7 (average)
   871                           ; direct_byte           23    11 (fixed)
   872                           ; jumptable            263     9 (fixed)
   873                           ;	Chosen strategy is simple_byte
   874  0114  084A               	movf	??_main,w
   875  0115  3A01               	xorlw	1	; case 1
   876  0116  1903               	skipnz
   877  0117  28B6               	goto	l80
   878  0118  3A03               	xorlw	3	; case 2
   879  0119  1903               	skipnz
   880  011A  28CA               	goto	l82
   881  011B  3A01               	xorlw	1	; case 3
   882  011C  1903               	skipnz
   883  011D  28DE               	goto	l83
   884  011E  3A07               	xorlw	7	; case 4
   885  011F  1903               	skipnz
   886  0120  28FA               	goto	l85
   887  0121  2848               	goto	l1038
   888  0122  120A  118A  280C   	ljmp	start
   889  0125                     __end_of_main:
   890                           
   891                           	psect	text1
   892  016F                     __ptext1:	
   893 ;; *************** function _strlen *****************
   894 ;; Defined at:
   895 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strlen.c"
   896 ;; Parameters:    Size  Location     Type
   897 ;;  s               1    wreg     PTR const unsigned char 
   898 ;;		 -> Massage(25), 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  s               1    5[COMMON] PTR const unsigned char 
   901 ;;		 -> Massage(25), 
   902 ;;  cp              1    6[COMMON] PTR const unsigned char 
   903 ;;		 -> Massage(25), 
   904 ;; Return value:  Size  Location     Type
   905 ;;                  2    2[COMMON] unsigned int 
   906 ;; Registers used:
   907 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   908 ;; Tracked objects:
   909 ;;		On entry : 0/0
   910 ;;		On exit  : 0/0
   911 ;;		Unchanged: 0/0
   912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   913 ;;      Params:         3       0       0       0       0
   914 ;;      Locals:         2       0       0       0       0
   915 ;;      Temps:          0       0       0       0       0
   916 ;;      Totals:         5       0       0       0       0
   917 ;;Total ram usage:        5 bytes
   918 ;; Hardware stack levels used:    1
   919 ;; Hardware stack levels required when called:    1
   920 ;; This function calls:
   921 ;;		Nothing
   922 ;; This function is called by:
   923 ;;		_main
   924 ;; This function uses a non-reentrant model
   925 ;;
   926                           
   927                           
   928                           ;psect for function _strlen
   929  016F                     _strlen:
   930                           
   931                           ;incstack = 0
   932                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0+btemp+1]
   933                           ;strlen@s stored from wreg
   934  016F  00F5               	movwf	strlen@s
   935  0170                     l846:
   936  0170  0875               	movf	strlen@s,w
   937  0171  00FF               	movwf	btemp+1
   938  0172  087F               	movf	btemp+1,w
   939  0173  00F6               	movwf	strlen@cp
   940  0174  2979               	goto	l850
   941  0175                     l848:
   942  0175  3001               	movlw	1
   943  0176  00FF               	movwf	btemp+1
   944  0177  087F               	movf	btemp+1,w
   945  0178  07F6               	addwf	strlen@cp,f
   946  0179                     l850:
   947  0179  0876               	movf	strlen@cp,w
   948  017A  0084               	movwf	4
   949  017B  1383               	bcf	3,7	;select IRP bank0
   950  017C  0800               	movf	0,w
   951  017D  1D03               	btfss	3,2
   952  017E  2980               	goto	u111
   953  017F  2981               	goto	u110
   954  0180                     u111:
   955  0180  2975               	goto	l848
   956  0181                     u110:
   957  0181                     l852:
   958  0181  0875               	movf	strlen@s,w
   959  0182  0276               	subwf	strlen@cp,w
   960  0183  00F2               	movwf	?_strlen
   961  0184  01F3               	clrf	?_strlen+1
   962  0185  1BF2               	btfsc	?_strlen,7
   963  0186  03F3               	decf	?_strlen+1,f
   964  0187                     l628:
   965  0187  0008               	return
   966  0188                     __end_of_strlen:
   967                           
   968                           	psect	text2
   969  014A                     __ptext2:	
   970 ;; *************** function _ISR *****************
   971 ;; Defined at:
   972 ;;		line 37 in file "main.c"
   973 ;; Parameters:    Size  Location     Type
   974 ;;		None
   975 ;; Auto vars:     Size  Location     Type
   976 ;;		None
   977 ;; Return value:  Size  Location     Type
   978 ;;                  1    wreg      void 
   979 ;; Registers used:
   980 ;;		wreg, status,2, status,0
   981 ;; Tracked objects:
   982 ;;		On entry : 0/0
   983 ;;		On exit  : 0/0
   984 ;;		Unchanged: 0/0
   985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   986 ;;      Params:         0       0       0       0       0
   987 ;;      Locals:         0       0       0       0       0
   988 ;;      Temps:          2       0       0       0       0
   989 ;;      Totals:         2       0       0       0       0
   990 ;;Total ram usage:        2 bytes
   991 ;; Hardware stack levels used:    1
   992 ;; This function calls:
   993 ;;		Nothing
   994 ;; This function is called by:
   995 ;;		Interrupt level 1
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           
  1000                           ;psect for function _ISR
  1001  014A                     _ISR:
  1002  014A                     i1l856:
  1003                           
  1004                           ;main.c: 41:     if (TMR1IF) {
  1005  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1006  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1007  014C  1C0C               	btfss	12,0	;volatile
  1008  014D  294F               	goto	u12_21
  1009  014E  2950               	goto	u12_20
  1010  014F                     u12_21:
  1011  014F  2968               	goto	i1l67
  1012  0150                     u12_20:
  1013  0150                     i1l858:
  1014                           
  1015                           ;main.c: 43:         Timer_Counter++;
  1016  0150  3001               	movlw	1
  1017  0151  07C7               	addwf	_Timer_Counter,f
  1018  0152  1803               	skipnc
  1019  0153  0AC8               	incf	_Timer_Counter+1,f
  1020  0154  3000               	movlw	0
  1021  0155  07C8               	addwf	_Timer_Counter+1,f
  1022  0156                     i1l860:
  1023                           
  1024                           ;main.c: 45:         if (Timer_Counter == 10) {
  1025  0156  300A               	movlw	10
  1026  0157  0647               	xorwf	_Timer_Counter,w
  1027  0158  0448               	iorwf	_Timer_Counter+1,w
  1028  0159  1D03               	btfss	3,2
  1029  015A  295C               	goto	u13_21
  1030  015B  295D               	goto	u13_20
  1031  015C                     u13_21:
  1032  015C  2963               	goto	i1l866
  1033  015D                     u13_20:
  1034  015D                     i1l862:
  1035                           
  1036                           ;main.c: 46:             Timer_Flag=1;
  1037  015D  3001               	movlw	1
  1038  015E  00C5               	movwf	_Timer_Flag
  1039  015F  3000               	movlw	0
  1040  0160  00C6               	movwf	_Timer_Flag+1
  1041  0161                     i1l864:
  1042                           
  1043                           ;main.c: 47:             Timer_Counter = 0;
  1044  0161  01C7               	clrf	_Timer_Counter
  1045  0162  01C8               	clrf	_Timer_Counter+1
  1046  0163                     i1l866:
  1047                           
  1048                           ;main.c: 52:         TMR1 = 65536-50000;
  1049  0163  303C               	movlw	60
  1050  0164  008F               	movwf	15	;volatile
  1051  0165  30B0               	movlw	176
  1052  0166  008E               	movwf	14	;volatile
  1053  0167                     i1l868:
  1054                           
  1055                           ;main.c: 53:         TMR1IF = 0;
  1056  0167  100C               	bcf	12,0	;volatile
  1057  0168                     i1l67:
  1058  0168  0871               	movf	??_ISR+1,w
  1059  0169  008A               	movwf	10
  1060  016A  0E70               	swapf	??_ISR^(0+4294967168),w
  1061  016B  0083               	movwf	3
  1062  016C  0EFE               	swapf	btemp,f
  1063  016D  0E7E               	swapf	btemp,w
  1064  016E  0009               	retfie
  1065  016F                     __end_of_ISR:
  1066  007E                     btemp	set	126	;btemp
  1067  007E                     wtemp0	set	126
  1068                           
  1069                           	psect	intentry
  1070  0004                     __pintentry:	
  1071                           ;incstack = 0
  1072                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1073                           
  1074  0004                     interrupt_function:
  1075  007E                     saved_w	set	btemp
  1076  0004  00FE               	movwf	btemp
  1077  0005  0E03               	swapf	3,w
  1078  0006  00F0               	movwf	??_ISR
  1079  0007  080A               	movf	10,w
  1080  0008  00F1               	movwf	??_ISR+1
  1081  0009  120A  118A  294A   	ljmp	_ISR
  1082                           
  1083                           	psect	config
  1084                           
  1085                           ;Config register CONFIG @ 0x2007
  1086                           ;	Oscillator Selection bits
  1087                           ;	FOSC = XT, XT oscillator
  1088                           ;	Watchdog Timer Enable bit
  1089                           ;	WDTE = OFF, WDT disabled
  1090                           ;	Power-up Timer Enable bit
  1091                           ;	PWRTE = ON, PWRT enabled
  1092                           ;	Brown-out Reset Enable bit
  1093                           ;	BOREN = ON, BOR enabled
  1094                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1095                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1096                           ;	Data EEPROM Memory Code Protection bit
  1097                           ;	CPD = OFF, Data EEPROM code protection off
  1098                           ;	Flash Program Memory Write Enable bits
  1099                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1100                           ;	In-Circuit Debugger Mode bit
  1101                           ;	DEBUG = 0x1, unprogrammed default
  1102                           ;	Flash Program Memory Code Protection bit
  1103                           ;	CP = OFF, Code protection off
  1104  2007                     	org	8199
  1105  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        37
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      12
    BANK0            80      2      44
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(1) Largest target is 25
		 -> Massage(BANK0[25]), 

    strlen@cp	PTR const unsigned char  size(1) Largest target is 25
		 -> Massage(BANK0[25]), 


Critical Paths under _main in COMMON

    _main->_strlen

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     123
                                              0 BANK0      2     2      0
                             _strlen
 ---------------------------------------------------------------------------------
 (1) _strlen                                               5     2      3     123
                                              2 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _strlen

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      2      2C       5       55.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      7       C       1       85.7%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      38      12        0.0%
ABS                  0      0      38       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 05 02:35:45 2020

                      pc 0002                       l80 00B6                       l82 00CA  
                     l83 00DE                       l85 00FA                       fsr 0004  
                    l628 0187                      l850 0179                      l852 0181  
                    l846 0170                      l848 0175                      _GIE 005F  
                    _RA2 002A                      _RB0 0030                      _RA3 002B  
                    _RA4 002C                      _RA5 002D                      u110 0181  
                    u111 0180                      _RD7 0047                      u210 004E  
                    u211 004D                      u220 0069                      u221 0068  
                    u230 007B                      u231 007A                      u240 008D  
                    u241 008C                      u225 0065                      u250 009F  
                    u251 009E                      u260 00B1                      u261 00B0  
                    u270 00F2                      u271 00F1                      _ISR 014A  
                    _SSD 0020               _SSD_status 002B                      fsr0 0004  
                    indf 0000                     ?_ISR 0070                     l1010 0032  
                   l1100 0109                     l1020 003B                     l1012 0033  
                   l1030 0040                     l1022 003C                     l1014 0034  
                   l1006 002B                     l1104 010C                     l1040 004E  
                   l1032 0043                     l1024 003D                     l1016 0035  
                   l1008 002F                     l1050 0075                     l1042 0052  
                   l1034 0046                     l1026 003E                     l1018 0037  
                   l1060 0091                     l1052 007B                     l1044 0054  
                   l1036 0047                     l1028 003F                     l1142 0114  
                   l1070 00B1                     l1062 0099                     l1054 007F  
                   l1046 0069                     l1038 0048                     l1080 00D2  
                   l1072 00BA                     l1064 009F                     l1056 0087  
                   l1048 006C                     l1090 00F2                     l1082 00D9  
                   l1074 00BE                     l1066 00A3                     l1058 008D  
                   l1092 00F4                     l1084 00E2                     l1076 00C5  
                   l1068 00AB                     l1094 00F5                     l1086 00E6  
                   l1078 00CE                     l1096 00FE                     l1088 00ED  
                   l1098 0102                     _PEIE 005E                     i1l67 0168  
                   _TMR1 000E                     _main 002B                     btemp 007E  
                   start 000C                    ??_ISR 0070                    ?_main 0070  
                  i1l860 0156                    i1l862 015D                    i1l864 0161  
                  i1l856 014A                    i1l866 0163                    i1l858 0150  
                  i1l868 0167                    u12_20 0150                    u12_21 014F  
                  u13_20 015D                    u13_21 015C                    _PORTD 0008  
                  _TRISA 0085                    _TRISD 0088                    pclath 000A  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 0125                   ??_main 004A                   _TMR1IE 0460  
                 _TMR1IF 0060                   _TMR1CS 0081                   _TMR1ON 0080  
             _Timer_Flag 0045                   _strlen 016F                   saved_w 007E  
         _Massage_Offset 0077  __end_of__initialization 0027           __pcstackCOMMON 0070  
           __pidataBANK0 0125               __pbssBANK0 0045               __pmaintext 002B  
             __pintentry 0004                  _T1CKPS0 0084                  _T1CKPS1 0085  
                ?_strlen 0072                  _Massage 002C                  __ptext1 016F  
                __ptext2 014A          __size_of_strlen 0019             __size_of_ISR 0025  
   end_of_initialization 0027                  strlen@s 0075           __end_of_strlen 0188  
    start_initialization 000F              __end_of_ISR 016F               init_fetch0 0188  
            __pdataBANK0 0020                 ??_strlen 0075              __pbssCOMMON 0077  
              ___latbits 0002            __pcstackBANK0 004A            _Timer_Counter 0047  
      interrupt_function 0004           _LED_BLINK_FLAG 0049            __size_of_main 00FA  
           _SSD1_counter 007B             _SSD2_counter 007A             _SSD3_counter 0079  
           _SSD4_counter 0078                 init_ram0 018C                 intlevel1 0000  
               strlen@cp 0076  
