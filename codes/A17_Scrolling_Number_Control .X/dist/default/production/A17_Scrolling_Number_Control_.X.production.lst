

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 05 02:42:55 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174                           
   175                           	psect	idataCOMMON
   176  01D8                     __pidataCOMMON:
   177                           
   178                           ;initializer for _Massage_Direction
   179  01D8  3401               	retlw	1
   180                           
   181                           ;initializer for _Massage_Start_Stop
   182  01D9  3401               	retlw	1
   183                           
   184                           ;initializer for _SSD_status
   185  01DA  3401               	retlw	1
   186                           
   187                           	psect	idataBANK0
   188  01A6                     __pidataBANK0:
   189                           
   190                           ;initializer for _Massage
   191  01A6  3431               	retlw	49
   192  01A7  3420               	retlw	32
   193  01A8  3432               	retlw	50
   194  01A9  3420               	retlw	32
   195  01AA  3433               	retlw	51
   196  01AB  3420               	retlw	32
   197  01AC  3434               	retlw	52
   198  01AD  3420               	retlw	32
   199  01AE  3435               	retlw	53
   200  01AF  3420               	retlw	32
   201  01B0  3436               	retlw	54
   202  01B1  3420               	retlw	32
   203  01B2  3437               	retlw	55
   204  01B3  3420               	retlw	32
   205  01B4  3438               	retlw	56
   206  01B5  3420               	retlw	32
   207  01B6  3420               	retlw	32
   208  01B7  3420               	retlw	32
   209  01B8  3420               	retlw	32
   210  01B9  3420               	retlw	32
   211                           
   212                           ;initializer for _SSD
   213  01BA  343F               	retlw	63
   214  01BB  3406               	retlw	6
   215  01BC  345B               	retlw	91
   216  01BD  344F               	retlw	79
   217  01BE  3466               	retlw	102
   218  01BF  346D               	retlw	109
   219  01C0  347D               	retlw	125
   220  01C1  3407               	retlw	7
   221  01C2  347F               	retlw	127
   222  01C3  346F               	retlw	111
   223  01C4  3400               	retlw	0
   224  000E                     _TMR1	set	14
   225  0008                     _PORTD	set	8
   226  0047                     _RD7	set	71
   227  0035                     _RB5	set	53
   228  0034                     _RB4	set	52
   229  0033                     _RB3	set	51
   230  005F                     _GIE	set	95
   231  005E                     _PEIE	set	94
   232  0080                     _TMR1ON	set	128
   233  0085                     _T1CKPS1	set	133
   234  0084                     _T1CKPS0	set	132
   235  0081                     _TMR1CS	set	129
   236  002D                     _RA5	set	45
   237  002C                     _RA4	set	44
   238  002B                     _RA3	set	43
   239  002A                     _RA2	set	42
   240  0060                     _TMR1IF	set	96
   241  0086                     _TRISBbits	set	134
   242  0085                     _TRISA	set	133
   243  0088                     _TRISD	set	136
   244  0460                     _TMR1IE	set	1120
   245                           
   246                           	psect	cinit
   247  000F                     start_initialization:	
   248                           ; #config settings
   249                           
   250  000F                     __initialization:
   251                           
   252                           ; Initialize objects allocated to BANK0
   253  000F  1383               	bcf	3,7	;select IRP bank0
   254  0010  303F               	movlw	low (__pdataBANK0+31)
   255  0011  00FD               	movwf	btemp+-1
   256  0012  3001               	movlw	high __pidataBANK0
   257  0013  00FE               	movwf	btemp
   258  0014  30A6               	movlw	low __pidataBANK0
   259  0015  00FF               	movwf	btemp+1
   260  0016  3020               	movlw	low __pdataBANK0
   261  0017  0084               	movwf	4
   262  0018  120A  118A  21C9  120A  118A  	fcall	init_ram0
   263                           
   264                           ; Initialize objects allocated to COMMON
   265  001D  120A  118A  21D8  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   266  0022  00F6               	movwf	__pdataCOMMON& (0+127)
   267  0023  120A  118A  21D9  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   268  0028  00F7               	movwf	(__pdataCOMMON+1)& (0+127)
   269  0029  120A  118A  21DA  120A  118A  	fcall	__pidataCOMMON+2	;fetch initializer
   270  002E  00F8               	movwf	(__pdataCOMMON+2)& (0+127)
   271                           
   272                           ; Clear objects allocated to BANK0
   273  002F  01BF               	clrf	__pbssBANK0& (0+127)
   274  0030  01C0               	clrf	(__pbssBANK0+1)& (0+127)
   275  0031  01C1               	clrf	(__pbssBANK0+2)& (0+127)
   276  0032  01C2               	clrf	(__pbssBANK0+3)& (0+127)
   277                           
   278                           ; Clear objects allocated to COMMON
   279  0033  01F0               	clrf	__pbssCOMMON& (0+127)
   280  0034  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   281  0035  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   282  0036  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   283  0037  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   284  0038  01F5               	clrf	(__pbssCOMMON+5)& (0+127)
   285  0039                     end_of_initialization:	
   286                           ;End of C runtime variable initialization code
   287                           
   288  0039                     __end_of__initialization:
   289  0039  0183               	clrf	3
   290  003A  120A  118A  283D   	ljmp	_main	;jump to C main() function
   291                           
   292                           	psect	bssCOMMON
   293  0070                     __pbssCOMMON:
   294  0070                     _Massage_Offset:
   295  0070                     	ds	1
   296  0071                     _LED_BLINK_FLAG:
   297  0071                     	ds	1
   298  0072                     _SSD4_counter:
   299  0072                     	ds	1
   300  0073                     _SSD3_counter:
   301  0073                     	ds	1
   302  0074                     _SSD2_counter:
   303  0074                     	ds	1
   304  0075                     _SSD1_counter:
   305  0075                     	ds	1
   306                           
   307                           	psect	dataCOMMON
   308  0076                     __pdataCOMMON:
   309  0076                     _Massage_Direction:
   310  0076                     	ds	1
   311  0077                     _Massage_Start_Stop:
   312  0077                     	ds	1
   313  0078                     _SSD_status:
   314  0078                     	ds	1
   315                           
   316                           	psect	bssBANK0
   317  003F                     __pbssBANK0:
   318  003F                     _Timer_Flag:
   319  003F                     	ds	2
   320  0041                     _Timer_Counter:
   321  0041                     	ds	2
   322                           
   323                           	psect	dataBANK0
   324  0020                     __pdataBANK0:
   325  0020                     _Massage:
   326  0020                     	ds	20
   327  0034                     _SSD:
   328  0034                     	ds	11
   329                           
   330                           	psect	inittext
   331  01C5                     init_fetch0:	
   332                           ;	Called with low address in FSR and high address in W
   333                           
   334  01C5  087E               	movf	btemp,w
   335  01C6  008A               	movwf	10
   336  01C7  087F               	movf	btemp+1,w
   337  01C8  0082               	movwf	2
   338  01C9                     init_ram0:	
   339                           ;Called with:
   340                           ;	high address of idata address in btemp 
   341                           ;	low address of idata address in btemp+1 
   342                           ;	low address of data in FSR
   343                           ;	high address + 1 of data in btemp-1
   344                           
   345  01C9  120A  118A  21C5  120A  118A  	fcall	init_fetch0
   346  01CE  0080               	movwf	0
   347  01CF  0A84               	incf	4,f
   348  01D0  0804               	movf	4,w
   349  01D1  067D               	xorwf	btemp+-1,w
   350  01D2  1903               	btfsc	3,2
   351  01D3  3400               	retlw	0
   352  01D4  0AFF               	incf	btemp+1,f
   353  01D5  1903               	btfsc	3,2
   354  01D6  0AFE               	incf	btemp,f
   355  01D7  29C9               	goto	init_ram0
   356                           
   357                           	psect	cstackCOMMON
   358  0079                     __pcstackCOMMON:
   359  0079                     ?_ISR:
   360  0079                     ??_ISR:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0079                     ?_main:	
   364                           ; 1 bytes @ 0x0
   365                           
   366                           
   367                           ; 1 bytes @ 0x0
   368  0079                     	ds	2
   369                           
   370                           	psect	cstackBANK0
   371  0043                     __pcstackBANK0:
   372  0043                     ??_main:
   373                           
   374                           ; 1 bytes @ 0x0
   375  0043                     	ds	2
   376                           
   377                           	psect	maintext
   378  003D                     __pmaintext:	
   379 ;;
   380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   381 ;;
   382 ;; *************** function _main *****************
   383 ;; Defined at:
   384 ;;		line 74 in file "main.c"
   385 ;; Parameters:    Size  Location     Type
   386 ;;		None
   387 ;; Auto vars:     Size  Location     Type
   388 ;;		None
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      void 
   391 ;; Registers used:
   392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
   393 ;; Tracked objects:
   394 ;;		On entry : B00/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   398 ;;      Params:         0       0       0       0       0
   399 ;;      Locals:         0       0       0       0       0
   400 ;;      Temps:          0       2       0       0       0
   401 ;;      Totals:         0       2       0       0       0
   402 ;;Total ram usage:        2 bytes
   403 ;; Hardware stack levels required when called:    1
   404 ;; This function calls:
   405 ;;		Nothing
   406 ;; This function is called by:
   407 ;;		Startup code after reset
   408 ;; This function uses a non-reentrant model
   409 ;;
   410                           
   411                           
   412                           ;psect for function _main
   413  003D                     _main:
   414  003D                     l1142:	
   415                           ;incstack = 0
   416                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1]
   417                           
   418                           
   419                           ;main.c: 78:     TRISD = 0x00;
   420  003D  1683               	bsf	3,5	;RP0=1, select bank1
   421  003E  1303               	bcf	3,6	;RP1=0, select bank1
   422  003F  0188               	clrf	8	;volatile
   423                           
   424                           ;main.c: 79:     TRISA = 0;
   425  0040  0185               	clrf	5	;volatile
   426  0041                     l1144:
   427                           
   428                           ;main.c: 80:     RA2 = 0;
   429  0041  1283               	bcf	3,5	;RP0=0, select bank0
   430  0042  1303               	bcf	3,6	;RP1=0, select bank0
   431  0043  1105               	bcf	5,2	;volatile
   432  0044                     l1146:
   433                           
   434                           ;main.c: 81:     RA3 = 0;
   435  0044  1185               	bcf	5,3	;volatile
   436  0045                     l1148:
   437                           
   438                           ;main.c: 82:     RA4 = 0;
   439  0045  1205               	bcf	5,4	;volatile
   440  0046                     l1150:
   441                           
   442                           ;main.c: 83:     RA5 = 0;
   443  0046  1285               	bcf	5,5	;volatile
   444  0047                     l1152:
   445                           
   446                           ;main.c: 84:     PORTD = SSD[0];
   447  0047  0834               	movf	_SSD,w
   448  0048  0088               	movwf	8	;volatile
   449  0049                     l1154:
   450                           
   451                           ;main.c: 85:     TRISBbits.TRISB3 = 1;
   452  0049  1683               	bsf	3,5	;RP0=1, select bank1
   453  004A  1303               	bcf	3,6	;RP1=0, select bank1
   454  004B  1586               	bsf	6,3	;volatile
   455  004C                     l1156:
   456                           
   457                           ;main.c: 86:     TRISBbits.TRISB4 = 1;
   458  004C  1606               	bsf	6,4	;volatile
   459  004D                     l1158:
   460                           
   461                           ;main.c: 87:     TRISBbits.TRISB5 = 1;
   462  004D  1686               	bsf	6,5	;volatile
   463  004E                     l1160:
   464                           
   465                           ;main.c: 92:     TMR1 = 65536 - 50000;
   466  004E  303C               	movlw	60
   467  004F  1283               	bcf	3,5	;RP0=0, select bank0
   468  0050  1303               	bcf	3,6	;RP1=0, select bank0
   469  0051  008F               	movwf	15	;volatile
   470  0052  30B0               	movlw	176
   471  0053  008E               	movwf	14	;volatile
   472  0054                     l1162:
   473                           
   474                           ;main.c: 94:     TMR1CS = 0;
   475  0054  1090               	bcf	16,1	;volatile
   476  0055                     l1164:
   477                           
   478                           ;main.c: 96:     T1CKPS0 = 1;
   479  0055  1610               	bsf	16,4	;volatile
   480  0056                     l1166:
   481                           
   482                           ;main.c: 97:     T1CKPS1 = 0;
   483  0056  1290               	bcf	16,5	;volatile
   484  0057                     l1168:
   485                           
   486                           ;main.c: 99:     TMR1ON = 1;
   487  0057  1410               	bsf	16,0	;volatile
   488  0058                     l1170:
   489                           
   490                           ;main.c: 101:     TMR1IE = 1;
   491  0058  1683               	bsf	3,5	;RP0=1, select bank1
   492  0059  1303               	bcf	3,6	;RP1=0, select bank1
   493  005A  140C               	bsf	12,0	;volatile
   494  005B                     l1172:
   495                           
   496                           ;main.c: 102:     TMR1IF = 0;
   497  005B  1283               	bcf	3,5	;RP0=0, select bank0
   498  005C  1303               	bcf	3,6	;RP1=0, select bank0
   499  005D  100C               	bcf	12,0	;volatile
   500  005E                     l1174:
   501                           
   502                           ;main.c: 103:     PEIE = 1;
   503  005E  170B               	bsf	11,6	;volatile
   504  005F                     l1176:
   505                           
   506                           ;main.c: 104:     GIE = 1;
   507  005F  178B               	bsf	11,7	;volatile
   508  0060                     l1178:
   509                           
   510                           ;main.c: 117:         if (RB3 == 0) {
   511  0060  1986               	btfsc	6,3	;volatile
   512  0061  2863               	goto	u391
   513  0062  2864               	goto	u390
   514  0063                     u391:
   515  0063  286A               	goto	l81
   516  0064                     u390:
   517  0064                     l1180:
   518                           
   519                           ;main.c: 118:             Massage_Direction = 1;
   520  0064  01F6               	clrf	_Massage_Direction
   521  0065  0AF6               	incf	_Massage_Direction,f
   522  0066                     l82:	
   523                           ;main.c: 119:             while (RB3 == 0);
   524                           
   525  0066  1D86               	btfss	6,3	;volatile
   526  0067  2869               	goto	u401
   527  0068  286A               	goto	u400
   528  0069                     u401:
   529  0069  2866               	goto	l82
   530  006A                     u400:
   531  006A                     l81:	
   532                           ;main.c: 120:         }
   533                           
   534                           
   535                           ;main.c: 122:         if (RB4 == 0) {
   536  006A  1A06               	btfsc	6,4	;volatile
   537  006B  286D               	goto	u411
   538  006C  286E               	goto	u410
   539  006D                     u411:
   540  006D  2876               	goto	l85
   541  006E                     u410:
   542  006E                     l1182:
   543                           
   544                           ;main.c: 123:             Massage_Direction = 2;
   545  006E  3002               	movlw	2
   546  006F  00FF               	movwf	btemp+1
   547  0070  087F               	movf	btemp+1,w
   548  0071  00F6               	movwf	_Massage_Direction
   549  0072                     l86:	
   550                           ;main.c: 124:             while (RB4 == 0);
   551                           
   552  0072  1E06               	btfss	6,4	;volatile
   553  0073  2875               	goto	u421
   554  0074  2876               	goto	u420
   555  0075                     u421:
   556  0075  2872               	goto	l86
   557  0076                     u420:
   558  0076                     l85:	
   559                           ;main.c: 126:         }
   560                           
   561                           
   562                           ;main.c: 129:         if (RB5 == 0) {
   563  0076  1A86               	btfsc	6,5	;volatile
   564  0077  2879               	goto	u431
   565  0078  287A               	goto	u430
   566  0079                     u431:
   567  0079  2897               	goto	l1192
   568  007A                     u430:
   569  007A  2883               	goto	l1190
   570  007B                     l1186:
   571                           
   572                           ;main.c: 132:                     Massage_Start_Stop = 2;
   573  007B  3002               	movlw	2
   574  007C  00FF               	movwf	btemp+1
   575  007D  087F               	movf	btemp+1,w
   576  007E  00F7               	movwf	_Massage_Start_Stop
   577                           
   578                           ;main.c: 133:                     break;
   579  007F  2893               	goto	l94
   580  0080                     l93:	
   581                           ;main.c: 135:                 case 2:
   582                           
   583                           
   584                           ;main.c: 136:                     Massage_Start_Stop = 1;
   585  0080  01F7               	clrf	_Massage_Start_Stop
   586  0081  0AF7               	incf	_Massage_Start_Stop,f
   587                           
   588                           ;main.c: 137:                     break;
   589  0082  2893               	goto	l94
   590  0083                     l1190:
   591  0083  0877               	movf	_Massage_Start_Stop,w
   592  0084  00C3               	movwf	??_main
   593  0085  01C4               	clrf	??_main+1
   594                           
   595                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   596                           ; Switch size 1, requested type "simple"
   597                           ; Number of cases is 1, Range of values is 0 to 0
   598                           ; switch strategies available:
   599                           ; Name         Instructions Cycles
   600                           ; simple_byte            4     3 (average)
   601                           ; direct_byte           11     8 (fixed)
   602                           ; jumptable            260     6 (fixed)
   603                           ;	Chosen strategy is simple_byte
   604  0086  0844               	movf	??_main+1,w
   605  0087  3A00               	xorlw	0	; case 0
   606  0088  1903               	skipnz
   607  0089  288B               	goto	l1344
   608  008A  2893               	goto	l94
   609  008B                     l1344:
   610                           
   611                           ; Switch size 1, requested type "simple"
   612                           ; Number of cases is 2, Range of values is 1 to 2
   613                           ; switch strategies available:
   614                           ; Name         Instructions Cycles
   615                           ; simple_byte            7     4 (average)
   616                           ; direct_byte           17    11 (fixed)
   617                           ; jumptable            263     9 (fixed)
   618                           ;	Chosen strategy is simple_byte
   619  008B  0843               	movf	??_main,w
   620  008C  3A01               	xorlw	1	; case 1
   621  008D  1903               	skipnz
   622  008E  287B               	goto	l1186
   623  008F  3A03               	xorlw	3	; case 2
   624  0090  1903               	skipnz
   625  0091  2880               	goto	l93
   626  0092  2893               	goto	l94
   627  0093                     l94:
   628  0093  1E86               	btfss	6,5	;volatile
   629  0094  2896               	goto	u441
   630  0095  2897               	goto	u440
   631  0096                     u441:
   632  0096  2893               	goto	l94
   633  0097                     u440:
   634  0097                     l1192:
   635                           
   636                           ;main.c: 144:         if (Timer_Flag == 1) {
   637  0097  033F               	decf	_Timer_Flag,w
   638  0098  0440               	iorwf	_Timer_Flag+1,w
   639  0099  1D03               	btfss	3,2
   640  009A  289C               	goto	u451
   641  009B  289D               	goto	u450
   642  009C                     u451:
   643  009C  28B8               	goto	l1206
   644  009D                     u450:
   645  009D                     l1194:
   646                           
   647                           ;main.c: 146:             if (Massage_Start_Stop == 1) {
   648  009D  0377               	decf	_Massage_Start_Stop,w
   649  009E  1D03               	btfss	3,2
   650  009F  28A1               	goto	u461
   651  00A0  28A2               	goto	u460
   652  00A1                     u461:
   653  00A1  28B8               	goto	l1206
   654  00A2                     u460:
   655  00A2                     l1196:
   656                           
   657                           ;main.c: 148:                 if (Massage_Direction == 1) {
   658  00A2  0376               	decf	_Massage_Direction,w
   659  00A3  1D03               	btfss	3,2
   660  00A4  28A6               	goto	u471
   661  00A5  28A7               	goto	u470
   662  00A6                     u471:
   663  00A6  28AC               	goto	l1200
   664  00A7                     u470:
   665  00A7                     l1198:
   666                           
   667                           ;main.c: 149:                     Massage_Offset += 4;
   668  00A7  3004               	movlw	4
   669  00A8  00FF               	movwf	btemp+1
   670  00A9  087F               	movf	btemp+1,w
   671  00AA  07F0               	addwf	_Massage_Offset,f
   672                           
   673                           ;main.c: 150:                 } else if (Massage_Direction == 2) {
   674  00AB  28B6               	goto	l1204
   675  00AC                     l1200:
   676  00AC  3002               	movlw	2
   677  00AD  0676               	xorwf	_Massage_Direction,w
   678  00AE  1D03               	btfss	3,2
   679  00AF  28B1               	goto	u481
   680  00B0  28B2               	goto	u480
   681  00B1                     u481:
   682  00B1  28B6               	goto	l1204
   683  00B2                     u480:
   684  00B2                     l1202:
   685                           
   686                           ;main.c: 151:                     Massage_Offset -= 4;
   687  00B2  30FC               	movlw	252
   688  00B3  00FF               	movwf	btemp+1
   689  00B4  087F               	movf	btemp+1,w
   690  00B5  07F0               	addwf	_Massage_Offset,f
   691  00B6                     l1204:
   692                           
   693                           ;main.c: 154:                 Timer_Flag = 0;
   694  00B6  01BF               	clrf	_Timer_Flag
   695  00B7  01C0               	clrf	_Timer_Flag+1
   696  00B8                     l1206:	
   697                           ;main.c: 155:             }
   698                           
   699                           
   700                           ;main.c: 161:         if (Massage_Offset > 20) {
   701  00B8  0870               	movf	_Massage_Offset,w
   702  00B9  3A80               	xorlw	128
   703  00BA  3E6B               	addlw	-149
   704  00BB  1C03               	skipc
   705  00BC  28BE               	goto	u491
   706  00BD  28BF               	goto	u490
   707  00BE                     u491:
   708  00BE  28C0               	goto	l1210
   709  00BF                     u490:
   710  00BF                     l1208:
   711                           
   712                           ;main.c: 162:             Massage_Offset = 0;
   713  00BF  01F0               	clrf	_Massage_Offset
   714  00C0                     l1210:
   715                           
   716                           ;main.c: 165:         if (Massage_Offset < 0) {
   717  00C0  1FF0               	btfss	_Massage_Offset,7
   718  00C1  28C3               	goto	u501
   719  00C2  28C4               	goto	u500
   720  00C3                     u501:
   721  00C3  28C8               	goto	l1214
   722  00C4                     u500:
   723  00C4                     l1212:
   724                           
   725                           ;main.c: 166:             Massage_Offset = 20;
   726  00C4  3014               	movlw	20
   727  00C5  00FF               	movwf	btemp+1
   728  00C6  087F               	movf	btemp+1,w
   729  00C7  00F0               	movwf	_Massage_Offset
   730  00C8                     l1214:
   731                           
   732                           ;main.c: 171:         SSD4_counter = Massage[0 + Massage_Offset] - '0';
   733  00C8  0870               	movf	_Massage_Offset,w
   734  00C9  3E20               	addlw	(low (_Massage| 0))& (0+255)
   735  00CA  0084               	movwf	4
   736  00CB  1383               	bcf	3,7	;select IRP bank0
   737  00CC  0800               	movf	0,w
   738  00CD  3ED0               	addlw	208
   739  00CE  00FF               	movwf	btemp+1
   740  00CF  087F               	movf	btemp+1,w
   741  00D0  00F2               	movwf	_SSD4_counter
   742  00D1                     l1216:
   743                           
   744                           ;main.c: 172:         if (SSD4_counter > 10)
   745  00D1  300B               	movlw	11
   746  00D2  0272               	subwf	_SSD4_counter,w
   747  00D3  1C03               	skipc
   748  00D4  28D6               	goto	u511
   749  00D5  28D7               	goto	u510
   750  00D6                     u511:
   751  00D6  28DB               	goto	l1220
   752  00D7                     u510:
   753  00D7                     l1218:
   754                           
   755                           ;main.c: 173:             SSD4_counter = 10;
   756  00D7  300A               	movlw	10
   757  00D8  00FF               	movwf	btemp+1
   758  00D9  087F               	movf	btemp+1,w
   759  00DA  00F2               	movwf	_SSD4_counter
   760  00DB                     l1220:
   761                           
   762                           ;main.c: 174:         SSD3_counter = Massage[1 + Massage_Offset] - '0';
   763  00DB  0870               	movf	_Massage_Offset,w
   764  00DC  3E21               	addlw	(low ((_Massage| 0+1)))& (0+255)
   765  00DD  0084               	movwf	4
   766  00DE  0800               	movf	0,w
   767  00DF  3ED0               	addlw	208
   768  00E0  00FF               	movwf	btemp+1
   769  00E1  087F               	movf	btemp+1,w
   770  00E2  00F3               	movwf	_SSD3_counter
   771  00E3                     l1222:
   772                           
   773                           ;main.c: 175:         if (SSD3_counter > 10)
   774  00E3  300B               	movlw	11
   775  00E4  0273               	subwf	_SSD3_counter,w
   776  00E5  1C03               	skipc
   777  00E6  28E8               	goto	u521
   778  00E7  28E9               	goto	u520
   779  00E8                     u521:
   780  00E8  28ED               	goto	l1226
   781  00E9                     u520:
   782  00E9                     l1224:
   783                           
   784                           ;main.c: 176:             SSD3_counter = 10;
   785  00E9  300A               	movlw	10
   786  00EA  00FF               	movwf	btemp+1
   787  00EB  087F               	movf	btemp+1,w
   788  00EC  00F3               	movwf	_SSD3_counter
   789  00ED                     l1226:
   790                           
   791                           ;main.c: 177:         SSD2_counter = Massage[2 + Massage_Offset] - '0';
   792  00ED  0870               	movf	_Massage_Offset,w
   793  00EE  3E22               	addlw	(low ((_Massage| 0+2)))& (0+255)
   794  00EF  0084               	movwf	4
   795  00F0  0800               	movf	0,w
   796  00F1  3ED0               	addlw	208
   797  00F2  00FF               	movwf	btemp+1
   798  00F3  087F               	movf	btemp+1,w
   799  00F4  00F4               	movwf	_SSD2_counter
   800  00F5                     l1228:
   801                           
   802                           ;main.c: 178:         if (SSD2_counter > 10)
   803  00F5  300B               	movlw	11
   804  00F6  0274               	subwf	_SSD2_counter,w
   805  00F7  1C03               	skipc
   806  00F8  28FA               	goto	u531
   807  00F9  28FB               	goto	u530
   808  00FA                     u531:
   809  00FA  28FF               	goto	l1232
   810  00FB                     u530:
   811  00FB                     l1230:
   812                           
   813                           ;main.c: 179:             SSD2_counter = 10;
   814  00FB  300A               	movlw	10
   815  00FC  00FF               	movwf	btemp+1
   816  00FD  087F               	movf	btemp+1,w
   817  00FE  00F4               	movwf	_SSD2_counter
   818  00FF                     l1232:
   819                           
   820                           ;main.c: 180:         SSD1_counter = Massage[3 + Massage_Offset] - '0';
   821  00FF  0870               	movf	_Massage_Offset,w
   822  0100  3E23               	addlw	(low ((_Massage| 0+3)))& (0+255)
   823  0101  0084               	movwf	4
   824  0102  0800               	movf	0,w
   825  0103  3ED0               	addlw	208
   826  0104  00FF               	movwf	btemp+1
   827  0105  087F               	movf	btemp+1,w
   828  0106  00F5               	movwf	_SSD1_counter
   829  0107                     l1234:
   830                           
   831                           ;main.c: 181:         if (SSD1_counter > 10)
   832  0107  300B               	movlw	11
   833  0108  0275               	subwf	_SSD1_counter,w
   834  0109  1C03               	skipc
   835  010A  290C               	goto	u541
   836  010B  290D               	goto	u540
   837  010C                     u541:
   838  010C  2968               	goto	l1270
   839  010D                     u540:
   840  010D                     l1236:
   841                           
   842                           ;main.c: 182:             SSD1_counter = 10;
   843  010D  300A               	movlw	10
   844  010E  00FF               	movwf	btemp+1
   845  010F  087F               	movf	btemp+1,w
   846  0110  00F5               	movwf	_SSD1_counter
   847  0111  2968               	goto	l1270
   848  0112                     l110:	
   849                           ;main.c: 185:             case 1:
   850                           
   851                           
   852                           ;main.c: 186:                 RA2 = 0;
   853  0112  1105               	bcf	5,2	;volatile
   854                           
   855                           ;main.c: 187:                 RA3 = 0;
   856  0113  1185               	bcf	5,3	;volatile
   857                           
   858                           ;main.c: 188:                 RA4 = 0;
   859  0114  1205               	bcf	5,4	;volatile
   860                           
   861                           ;main.c: 189:                 RA5 = 1;
   862  0115  1685               	bsf	5,5	;volatile
   863  0116                     l1238:
   864                           
   865                           ;main.c: 190:                 PORTD &= ~0x7F;
   866  0116  3080               	movlw	128
   867  0117  00FF               	movwf	btemp+1
   868  0118  087F               	movf	btemp+1,w
   869  0119  0588               	andwf	8,f	;volatile
   870  011A                     l1240:
   871                           
   872                           ;main.c: 191:                 PORTD |= SSD[SSD1_counter];
   873  011A  0875               	movf	_SSD1_counter,w
   874  011B  3E34               	addlw	(low (_SSD| 0))& (0+255)
   875  011C  0084               	movwf	4
   876  011D  0800               	movf	0,w
   877  011E  00FF               	movwf	btemp+1
   878  011F  087F               	movf	btemp+1,w
   879  0120  0488               	iorwf	8,f	;volatile
   880  0121                     l1242:
   881                           
   882                           ;main.c: 192:                 SSD_status = 2;
   883  0121  3002               	movlw	2
   884  0122  00FF               	movwf	btemp+1
   885  0123  087F               	movf	btemp+1,w
   886  0124  00F8               	movwf	_SSD_status
   887                           
   888                           ;main.c: 194:                 break;
   889  0125  2860               	goto	l1178
   890  0126                     l112:	
   891                           ;main.c: 196:             case 2:
   892                           
   893                           
   894                           ;main.c: 197:                 RA2 = 0;
   895  0126  1105               	bcf	5,2	;volatile
   896                           
   897                           ;main.c: 198:                 RA3 = 0;
   898  0127  1185               	bcf	5,3	;volatile
   899                           
   900                           ;main.c: 199:                 RA4 = 1;
   901  0128  1605               	bsf	5,4	;volatile
   902                           
   903                           ;main.c: 200:                 RA5 = 0;
   904  0129  1285               	bcf	5,5	;volatile
   905  012A                     l1244:
   906                           
   907                           ;main.c: 201:                 PORTD &= ~0x7F;
   908  012A  3080               	movlw	128
   909  012B  00FF               	movwf	btemp+1
   910  012C  087F               	movf	btemp+1,w
   911  012D  0588               	andwf	8,f	;volatile
   912  012E                     l1246:
   913                           
   914                           ;main.c: 202:                 PORTD |= SSD[SSD2_counter];
   915  012E  0874               	movf	_SSD2_counter,w
   916  012F  3E34               	addlw	(low (_SSD| 0))& (0+255)
   917  0130  0084               	movwf	4
   918  0131  0800               	movf	0,w
   919  0132  00FF               	movwf	btemp+1
   920  0133  087F               	movf	btemp+1,w
   921  0134  0488               	iorwf	8,f	;volatile
   922  0135                     l1248:
   923                           
   924                           ;main.c: 203:                 SSD_status = 3;
   925  0135  3003               	movlw	3
   926  0136  00FF               	movwf	btemp+1
   927  0137  087F               	movf	btemp+1,w
   928  0138  00F8               	movwf	_SSD_status
   929                           
   930                           ;main.c: 205:                 break;
   931  0139  2860               	goto	l1178
   932  013A                     l113:	
   933                           ;main.c: 207:             case 3:
   934                           
   935                           
   936                           ;main.c: 208:                 RA2 = 0;
   937  013A  1105               	bcf	5,2	;volatile
   938                           
   939                           ;main.c: 209:                 RA3 = 1;
   940  013B  1585               	bsf	5,3	;volatile
   941                           
   942                           ;main.c: 210:                 RA4 = 0;
   943  013C  1205               	bcf	5,4	;volatile
   944                           
   945                           ;main.c: 211:                 RA5 = 0;
   946  013D  1285               	bcf	5,5	;volatile
   947  013E                     l1250:
   948                           
   949                           ;main.c: 212:                 PORTD &= ~0x7F;
   950  013E  3080               	movlw	128
   951  013F  00FF               	movwf	btemp+1
   952  0140  087F               	movf	btemp+1,w
   953  0141  0588               	andwf	8,f	;volatile
   954  0142                     l1252:
   955                           
   956                           ;main.c: 213:                 PORTD |= SSD[SSD3_counter];
   957  0142  0873               	movf	_SSD3_counter,w
   958  0143  3E34               	addlw	(low (_SSD| 0))& (0+255)
   959  0144  0084               	movwf	4
   960  0145  0800               	movf	0,w
   961  0146  00FF               	movwf	btemp+1
   962  0147  087F               	movf	btemp+1,w
   963  0148  0488               	iorwf	8,f	;volatile
   964  0149                     l1254:
   965                           
   966                           ;main.c: 215:                 if (LED_BLINK_FLAG == 1) {
   967  0149  0371               	decf	_LED_BLINK_FLAG,w
   968  014A  1D03               	btfss	3,2
   969  014B  294D               	goto	u551
   970  014C  294E               	goto	u550
   971  014D                     u551:
   972  014D  2951               	goto	l1260
   973  014E                     u550:
   974  014E                     l1256:
   975                           
   976                           ;main.c: 216:                     RD7 = ~RD7;
   977  014E  3080               	movlw	128
   978  014F  0688               	xorwf	8,f
   979  0150                     l1258:
   980                           
   981                           ;main.c: 217:                     LED_BLINK_FLAG = 0;
   982  0150  01F1               	clrf	_LED_BLINK_FLAG
   983  0151                     l1260:
   984                           
   985                           ;main.c: 219:                 SSD_status = 4;
   986  0151  3004               	movlw	4
   987  0152  00FF               	movwf	btemp+1
   988  0153  087F               	movf	btemp+1,w
   989  0154  00F8               	movwf	_SSD_status
   990                           
   991                           ;main.c: 220:                 break;
   992  0155  2860               	goto	l1178
   993  0156                     l115:	
   994                           ;main.c: 222:             case 4:
   995                           
   996                           
   997                           ;main.c: 223:                 RA2 = 1;
   998  0156  1505               	bsf	5,2	;volatile
   999                           
  1000                           ;main.c: 224:                 RA3 = 0;
  1001  0157  1185               	bcf	5,3	;volatile
  1002                           
  1003                           ;main.c: 225:                 RA4 = 0;
  1004  0158  1205               	bcf	5,4	;volatile
  1005                           
  1006                           ;main.c: 226:                 RA5 = 0;
  1007  0159  1285               	bcf	5,5	;volatile
  1008  015A                     l1262:
  1009                           
  1010                           ;main.c: 227:                 PORTD &= ~0x7F;
  1011  015A  3080               	movlw	128
  1012  015B  00FF               	movwf	btemp+1
  1013  015C  087F               	movf	btemp+1,w
  1014  015D  0588               	andwf	8,f	;volatile
  1015  015E                     l1264:
  1016                           
  1017                           ;main.c: 228:                 PORTD |= SSD[SSD4_counter];
  1018  015E  0872               	movf	_SSD4_counter,w
  1019  015F  3E34               	addlw	(low (_SSD| 0))& (0+255)
  1020  0160  0084               	movwf	4
  1021  0161  0800               	movf	0,w
  1022  0162  00FF               	movwf	btemp+1
  1023  0163  087F               	movf	btemp+1,w
  1024  0164  0488               	iorwf	8,f	;volatile
  1025  0165                     l1266:
  1026                           
  1027                           ;main.c: 229:                 SSD_status = 1;
  1028  0165  01F8               	clrf	_SSD_status
  1029  0166  0AF8               	incf	_SSD_status,f
  1030                           
  1031                           ;main.c: 231:                 break;
  1032  0167  2860               	goto	l1178
  1033  0168                     l1270:
  1034  0168  0878               	movf	_SSD_status,w
  1035  0169  00C3               	movwf	??_main
  1036  016A  01C4               	clrf	??_main+1
  1037                           
  1038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1039                           ; Switch size 1, requested type "simple"
  1040                           ; Number of cases is 1, Range of values is 0 to 0
  1041                           ; switch strategies available:
  1042                           ; Name         Instructions Cycles
  1043                           ; simple_byte            4     3 (average)
  1044                           ; direct_byte           11     8 (fixed)
  1045                           ; jumptable            260     6 (fixed)
  1046                           ;	Chosen strategy is simple_byte
  1047  016B  0844               	movf	??_main+1,w
  1048  016C  3A00               	xorlw	0	; case 0
  1049  016D  1903               	skipnz
  1050  016E  2970               	goto	l1346
  1051  016F  2860               	goto	l1178
  1052  0170                     l1346:
  1053                           
  1054                           ; Switch size 1, requested type "simple"
  1055                           ; Number of cases is 4, Range of values is 1 to 4
  1056                           ; switch strategies available:
  1057                           ; Name         Instructions Cycles
  1058                           ; simple_byte           13     7 (average)
  1059                           ; direct_byte           23    11 (fixed)
  1060                           ; jumptable            263     9 (fixed)
  1061                           ;	Chosen strategy is simple_byte
  1062  0170  0843               	movf	??_main,w
  1063  0171  3A01               	xorlw	1	; case 1
  1064  0172  1903               	skipnz
  1065  0173  2912               	goto	l110
  1066  0174  3A03               	xorlw	3	; case 2
  1067  0175  1903               	skipnz
  1068  0176  2926               	goto	l112
  1069  0177  3A01               	xorlw	1	; case 3
  1070  0178  1903               	skipnz
  1071  0179  293A               	goto	l113
  1072  017A  3A07               	xorlw	7	; case 4
  1073  017B  1903               	skipnz
  1074  017C  2956               	goto	l115
  1075  017D  2860               	goto	l1178
  1076  017E  120A  118A  280C   	ljmp	start
  1077  0181                     __end_of_main:
  1078                           
  1079                           	psect	text1
  1080  0181                     __ptext1:	
  1081 ;; *************** function _ISR *****************
  1082 ;; Defined at:
  1083 ;;		line 54 in file "main.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;		None
  1086 ;; Auto vars:     Size  Location     Type
  1087 ;;		None
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  1    wreg      void 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1097 ;;      Params:         0       0       0       0       0
  1098 ;;      Locals:         0       0       0       0       0
  1099 ;;      Temps:          2       0       0       0       0
  1100 ;;      Totals:         2       0       0       0       0
  1101 ;;Total ram usage:        2 bytes
  1102 ;; Hardware stack levels used:    1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		Interrupt level 1
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           
  1111                           ;psect for function _ISR
  1112  0181                     _ISR:
  1113  0181                     i1l926:
  1114                           
  1115                           ;main.c: 58:     if (TMR1IF) {
  1116  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1118  0183  1C0C               	btfss	12,0	;volatile
  1119  0184  2986               	goto	u20_21
  1120  0185  2987               	goto	u20_20
  1121  0186                     u20_21:
  1122  0186  299F               	goto	i1l75
  1123  0187                     u20_20:
  1124  0187                     i1l928:
  1125                           
  1126                           ;main.c: 60:         Timer_Counter++;
  1127  0187  3001               	movlw	1
  1128  0188  07C1               	addwf	_Timer_Counter,f
  1129  0189  1803               	skipnc
  1130  018A  0AC2               	incf	_Timer_Counter+1,f
  1131  018B  3000               	movlw	0
  1132  018C  07C2               	addwf	_Timer_Counter+1,f
  1133  018D                     i1l930:
  1134                           
  1135                           ;main.c: 62:         if (Timer_Counter == 10) {
  1136  018D  300A               	movlw	10
  1137  018E  0641               	xorwf	_Timer_Counter,w
  1138  018F  0442               	iorwf	_Timer_Counter+1,w
  1139  0190  1D03               	btfss	3,2
  1140  0191  2993               	goto	u21_21
  1141  0192  2994               	goto	u21_20
  1142  0193                     u21_21:
  1143  0193  299A               	goto	i1l936
  1144  0194                     u21_20:
  1145  0194                     i1l932:
  1146                           
  1147                           ;main.c: 63:             Timer_Flag = 1;
  1148  0194  3001               	movlw	1
  1149  0195  00BF               	movwf	_Timer_Flag
  1150  0196  3000               	movlw	0
  1151  0197  00C0               	movwf	_Timer_Flag+1
  1152  0198                     i1l934:
  1153                           
  1154                           ;main.c: 64:             Timer_Counter = 0;
  1155  0198  01C1               	clrf	_Timer_Counter
  1156  0199  01C2               	clrf	_Timer_Counter+1
  1157  019A                     i1l936:
  1158                           
  1159                           ;main.c: 69:         TMR1 = 65536 - 50000;
  1160  019A  303C               	movlw	60
  1161  019B  008F               	movwf	15	;volatile
  1162  019C  30B0               	movlw	176
  1163  019D  008E               	movwf	14	;volatile
  1164  019E                     i1l938:
  1165                           
  1166                           ;main.c: 70:         TMR1IF = 0;
  1167  019E  100C               	bcf	12,0	;volatile
  1168  019F                     i1l75:
  1169  019F  087A               	movf	??_ISR+1,w
  1170  01A0  008A               	movwf	10
  1171  01A1  0E79               	swapf	??_ISR^(0+4294967168),w
  1172  01A2  0083               	movwf	3
  1173  01A3  0EFE               	swapf	btemp,f
  1174  01A4  0E7E               	swapf	btemp,w
  1175  01A5  0009               	retfie
  1176  01A6                     __end_of_ISR:
  1177  007E                     btemp	set	126	;btemp
  1178  007E                     wtemp0	set	126
  1179                           
  1180                           	psect	intentry
  1181  0004                     __pintentry:	
  1182                           ;incstack = 0
  1183                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1184                           
  1185  0004                     interrupt_function:
  1186  007E                     saved_w	set	btemp
  1187  0004  00FE               	movwf	btemp
  1188  0005  0E03               	swapf	3,w
  1189  0006  00F9               	movwf	??_ISR
  1190  0007  080A               	movf	10,w
  1191  0008  00FA               	movwf	??_ISR+1
  1192  0009  120A  118A  2981   	ljmp	_ISR
  1193                           
  1194                           	psect	config
  1195                           
  1196                           ;Config register CONFIG @ 0x2007
  1197                           ;	Oscillator Selection bits
  1198                           ;	FOSC = XT, XT oscillator
  1199                           ;	Watchdog Timer Enable bit
  1200                           ;	WDTE = OFF, WDT disabled
  1201                           ;	Power-up Timer Enable bit
  1202                           ;	PWRTE = ON, PWRT enabled
  1203                           ;	Brown-out Reset Enable bit
  1204                           ;	BOREN = ON, BOR enabled
  1205                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1206                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1207                           ;	Data EEPROM Memory Code Protection bit
  1208                           ;	CPD = OFF, Data EEPROM code protection off
  1209                           ;	Flash Program Memory Write Enable bits
  1210                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1211                           ;	In-Circuit Debugger Mode bit
  1212                           ;	DEBUG = 0x1, unprogrammed default
  1213                           ;	Flash Program Memory Code Protection bit
  1214                           ;	CP = OFF, Code protection off
  1215  2007                     	org	8199
  1216  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        34
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2      11
    BANK0            80      2      37
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (1) _ISR                                                  2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      2      25       5       46.2%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      2       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      30      12        0.0%
ABS                  0      0      30       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 05 02:42:55 2020

                      pc 0002                       l81 006A                       l82 0066  
                     l93 0080                       l85 0076                       l94 0093  
                     l86 0072                       fsr 0004                      l110 0112  
                    l112 0126                      l113 013A                      l115 0156  
                    _GIE 005F                      _RA2 002A                      _RA3 002B  
                    _RA4 002C                      _RA5 002D                      _RB3 0033  
                    _RB4 0034                      _RB5 0035                      _RD7 0047  
                    u400 006A                      u401 0069                      u410 006E  
                    u411 006D                      u500 00C4                      u420 0076  
                    u501 00C3                      u421 0075                      u510 00D7  
                    u430 007A                      u511 00D6                      u431 0079  
                    u520 00E9                      u440 0097                      u521 00E8  
                    u441 0096                      u530 00FB                      u450 009D  
                    u531 00FA                      u451 009C                      u540 010D  
                    u460 00A2                      _ISR 0181                      u541 010C  
                    u461 00A1                      u550 014E                      u470 00A7  
                    u390 0064                      u551 014D                      u471 00A6  
                    u391 0063                      u480 00B2                      u481 00B1  
                    u490 00BF                      u491 00BE                      _SSD 0034  
             _SSD_status 0078                      fsr0 0004                      indf 0000  
                   ?_ISR 0079                     l1200 00AC                     l1210 00C0  
                   l1202 00B2                     l1220 00DB                     l1212 00C4  
                   l1204 00B6                     l1230 00FB                     l1222 00E3  
                   l1214 00C8                     l1206 00B8                     l1150 0046  
                   l1142 003D                     l1240 011A                     l1232 00FF  
                   l1224 00E9                     l1216 00D1                     l1208 00BF  
                   l1160 004E                     l1152 0047                     l1144 0041  
                   l1250 013E                     l1242 0121                     l1234 0107  
                   l1226 00ED                     l1218 00D7                     l1170 0058  
                   l1162 0054                     l1154 0049                     l1146 0044  
                   l1260 0151                     l1252 0142                     l1244 012A  
                   l1236 010D                     l1228 00F5                     l1180 0064  
                   l1172 005B                     l1164 0055                     l1156 004C  
                   l1148 0045                     l1262 015A                     l1254 0149  
                   l1246 012E                     l1238 0116                     l1270 0168  
                   l1190 0083                     l1182 006E                     l1174 005E  
                   l1166 0056                     l1158 004D                     l1264 015E  
                   l1256 014E                     l1248 0135                     l1344 008B  
                   l1192 0097                     l1176 005F                     l1168 0057  
                   l1346 0170                     l1266 0165                     l1258 0150  
                   l1194 009D                     l1186 007B                     l1178 0060  
                   l1196 00A2                     l1198 00A7                     _PEIE 005E  
                   i1l75 019F                     _TMR1 000E                     _main 003D  
                   btemp 007E                     start 000C                    ??_ISR 0079  
                  ?_main 0079                    i1l930 018D                    i1l932 0194  
                  i1l934 0198                    i1l926 0181                    i1l936 019A  
                  i1l928 0187                    i1l938 019E                    u20_20 0187  
                  u20_21 0186                    u21_20 0194                    u21_21 0193  
                  _PORTD 0008                    _TRISA 0085                    _TRISD 0088  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 0181                   ??_main 0043  
                 _TMR1IE 0460                   _TMR1IF 0060                   _TMR1CS 0081  
                 _TMR1ON 0080               _Timer_Flag 003F             __pdataCOMMON 0076  
                 saved_w 007E           _Massage_Offset 0070  __end_of__initialization 0039  
         __pcstackCOMMON 0079             __pidataBANK0 01A6               __pbssBANK0 003F  
             __pmaintext 003D               __pintentry 0004                  _T1CKPS0 0084  
                _T1CKPS1 0085                  _Massage 0020                  __ptext1 0181  
           __size_of_ISR 0025     end_of_initialization 0039                _TRISBbits 0086  
          __pidataCOMMON 01D8      start_initialization 000F              __end_of_ISR 01A6  
             init_fetch0 01C5              __pdataBANK0 0020              __pbssCOMMON 0070  
              ___latbits 0002            __pcstackBANK0 0043            _Timer_Counter 0041  
      interrupt_function 0004           _LED_BLINK_FLAG 0071       _Massage_Start_Stop 0077  
      _Massage_Direction 0076            __size_of_main 0144             _SSD1_counter 0075  
           _SSD2_counter 0074             _SSD3_counter 0073             _SSD4_counter 0072  
               init_ram0 01C9                 intlevel1 0000  
