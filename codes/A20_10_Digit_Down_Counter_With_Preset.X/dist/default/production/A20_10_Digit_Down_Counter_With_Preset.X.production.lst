

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 05 07:41:57 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	intentry,global,class=CODE,delta=2
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    23                           	dabs	1,0x7E,2
    24  0000                     
    25                           ; Version 2.20
    26                           ; Generated 12/02/2020 GMT
    27                           ; 
    28                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC16F877A Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     	;# 
    60  0001                     	;# 
    61  0002                     	;# 
    62  0003                     	;# 
    63  0004                     	;# 
    64  0005                     	;# 
    65  0006                     	;# 
    66  0007                     	;# 
    67  0008                     	;# 
    68  0009                     	;# 
    69  000A                     	;# 
    70  000B                     	;# 
    71  000C                     	;# 
    72  000D                     	;# 
    73  000E                     	;# 
    74  000E                     	;# 
    75  000F                     	;# 
    76  0010                     	;# 
    77  0011                     	;# 
    78  0012                     	;# 
    79  0013                     	;# 
    80  0014                     	;# 
    81  0015                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0017                     	;# 
    85  0018                     	;# 
    86  0019                     	;# 
    87  001A                     	;# 
    88  001B                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001D                     	;# 
    92  001E                     	;# 
    93  001F                     	;# 
    94  0081                     	;# 
    95  0085                     	;# 
    96  0086                     	;# 
    97  0087                     	;# 
    98  0088                     	;# 
    99  0089                     	;# 
   100  008C                     	;# 
   101  008D                     	;# 
   102  008E                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  010C                     	;# 
   114  010D                     	;# 
   115  010E                     	;# 
   116  010F                     	;# 
   117  018C                     	;# 
   118  018D                     	;# 
   119  0000                     	;# 
   120  0001                     	;# 
   121  0002                     	;# 
   122  0003                     	;# 
   123  0004                     	;# 
   124  0005                     	;# 
   125  0006                     	;# 
   126  0007                     	;# 
   127  0008                     	;# 
   128  0009                     	;# 
   129  000A                     	;# 
   130  000B                     	;# 
   131  000C                     	;# 
   132  000D                     	;# 
   133  000E                     	;# 
   134  000E                     	;# 
   135  000F                     	;# 
   136  0010                     	;# 
   137  0011                     	;# 
   138  0012                     	;# 
   139  0013                     	;# 
   140  0014                     	;# 
   141  0015                     	;# 
   142  0015                     	;# 
   143  0016                     	;# 
   144  0017                     	;# 
   145  0018                     	;# 
   146  0019                     	;# 
   147  001A                     	;# 
   148  001B                     	;# 
   149  001B                     	;# 
   150  001C                     	;# 
   151  001D                     	;# 
   152  001E                     	;# 
   153  001F                     	;# 
   154  0081                     	;# 
   155  0085                     	;# 
   156  0086                     	;# 
   157  0087                     	;# 
   158  0088                     	;# 
   159  0089                     	;# 
   160  008C                     	;# 
   161  008D                     	;# 
   162  008E                     	;# 
   163  0091                     	;# 
   164  0092                     	;# 
   165  0093                     	;# 
   166  0094                     	;# 
   167  0098                     	;# 
   168  0099                     	;# 
   169  009C                     	;# 
   170  009D                     	;# 
   171  009E                     	;# 
   172  009F                     	;# 
   173  010C                     	;# 
   174  010D                     	;# 
   175  010E                     	;# 
   176  010F                     	;# 
   177  018C                     	;# 
   178  018D                     	;# 
   179  0000                     	;# 
   180  0001                     	;# 
   181  0002                     	;# 
   182  0003                     	;# 
   183  0004                     	;# 
   184  0005                     	;# 
   185  0006                     	;# 
   186  0007                     	;# 
   187  0008                     	;# 
   188  0009                     	;# 
   189  000A                     	;# 
   190  000B                     	;# 
   191  000C                     	;# 
   192  000D                     	;# 
   193  000E                     	;# 
   194  000E                     	;# 
   195  000F                     	;# 
   196  0010                     	;# 
   197  0011                     	;# 
   198  0012                     	;# 
   199  0013                     	;# 
   200  0014                     	;# 
   201  0015                     	;# 
   202  0015                     	;# 
   203  0016                     	;# 
   204  0017                     	;# 
   205  0018                     	;# 
   206  0019                     	;# 
   207  001A                     	;# 
   208  001B                     	;# 
   209  001B                     	;# 
   210  001C                     	;# 
   211  001D                     	;# 
   212  001E                     	;# 
   213  001F                     	;# 
   214  0081                     	;# 
   215  0085                     	;# 
   216  0086                     	;# 
   217  0087                     	;# 
   218  0088                     	;# 
   219  0089                     	;# 
   220  008C                     	;# 
   221  008D                     	;# 
   222  008E                     	;# 
   223  0091                     	;# 
   224  0092                     	;# 
   225  0093                     	;# 
   226  0094                     	;# 
   227  0098                     	;# 
   228  0099                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  009F                     	;# 
   233  010C                     	;# 
   234  010D                     	;# 
   235  010E                     	;# 
   236  010F                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239                           
   240                           	psect	idataBANK0
   241  02E1                     __pidataBANK0:
   242                           
   243                           ;initializer for _Start_Preset_Status
   244  02E1  3402               	retlw	2
   245                           
   246                           ;initializer for _Second_Row_Massage
   247  02E2  3443               	retlw	67
   248  02E3  346F               	retlw	111
   249  02E4  3475               	retlw	117
   250  02E5  346E               	retlw	110
   251  02E6  3474               	retlw	116
   252  02E7  343A               	retlw	58
   253  02E8  3400               	retlw	0
   254  02E9  3400               	retlw	0
   255  02EA  3400               	retlw	0
   256  02EB  3400               	retlw	0
   257  02EC  3400               	retlw	0
   258  02ED  3400               	retlw	0
   259  02EE  3400               	retlw	0
   260  02EF  3400               	retlw	0
   261  02F0  3400               	retlw	0
   262  02F1  3400               	retlw	0
   263                           
   264                           ;initializer for _First_Row_Massage
   265  02F2  3431               	retlw	49
   266  02F3  3430               	retlw	48
   267  02F4  3420               	retlw	32
   268  02F5  3444               	retlw	68
   269  02F6  3469               	retlw	105
   270  02F7  3467               	retlw	103
   271  02F8  3469               	retlw	105
   272  02F9  3474               	retlw	116
   273  02FA  3420               	retlw	32
   274  02FB  3443               	retlw	67
   275  02FC  346F               	retlw	111
   276  02FD  3475               	retlw	117
   277  02FE  346E               	retlw	110
   278  02FF  3474               	retlw	116
   279  0300  3465               	retlw	101
   280  0301  3472               	retlw	114
   281                           
   282                           ;initializer for _Counter
   283  0302  3430               	retlw	48
   284  0303  3430               	retlw	48
   285  0304  3430               	retlw	48
   286  0305  3430               	retlw	48
   287  0306  3430               	retlw	48
   288  0307  3430               	retlw	48
   289  0308  3430               	retlw	48
   290  0309  3430               	retlw	48
   291  030A  3430               	retlw	48
   292  030B  3430               	retlw	48
   293  0008                     _PORTD	set	8
   294  0049                     _RE1	set	73
   295  004A                     _RE2	set	74
   296  0034                     _RB4	set	52
   297  0033                     _RB3	set	51
   298  005F                     _GIE	set	95
   299  005E                     _PEIE	set	94
   300  005C                     _INTE	set	92
   301  0059                     _INTF	set	89
   302  0089                     _TRISEbits	set	137
   303  0088                     _TRISD	set	136
   304  0086                     _TRISBbits	set	134
   305  040E                     _INTEDG	set	1038
   306                           
   307                           	psect	strings
   308  038F                     __pstrings:
   309  038F                     stringtab:
   310  038F                     __stringtab:
   311  038F                     stringcode:	
   312                           ;	String table - string pointers are 1 byte each
   313                           
   314  038F                     stringdir:
   315  038F  3003               	movlw	high stringdir
   316  0390  008A               	movwf	10
   317  0391  0804               	movf	4,w
   318  0392  0A84               	incf	4,f
   319  0393  0782               	addwf	2,f
   320  0394                     __stringbase:
   321  0394  3400               	retlw	0
   322  0395                     __end_of__stringtab:
   323  0395                     STR_1:
   324  0395  3430               	retlw	48	;'0'
   325  0396  3430               	retlw	48	;'0'
   326  0397  3430               	retlw	48	;'0'
   327  0398  3430               	retlw	48	;'0'
   328  0399  3430               	retlw	48	;'0'
   329  039A  3430               	retlw	48	;'0'
   330  039B  3430               	retlw	48	;'0'
   331  039C  3430               	retlw	48	;'0'
   332  039D  3430               	retlw	48	;'0'
   333  039E  3430               	retlw	48	;'0'
   334  039F  3400               	retlw	0
   335                           
   336                           	psect	cinit
   337  0015                     start_initialization:	
   338                           ; #config settings
   339                           
   340  0015                     __initialization:
   341                           
   342                           ; Initialize objects allocated to BANK0
   343  0015  1383               	bcf	3,7	;select IRP bank0
   344  0016  304B               	movlw	low (__pdataBANK0+43)
   345  0017  00FD               	movwf	btemp+-1
   346  0018  3002               	movlw	high __pidataBANK0
   347  0019  00FE               	movwf	btemp
   348  001A  30E1               	movlw	low __pidataBANK0
   349  001B  00FF               	movwf	btemp+1
   350  001C  3020               	movlw	low __pdataBANK0
   351  001D  0084               	movwf	4
   352  001E  120A  118A  2380  120A  118A  	fcall	init_ram0
   353                           
   354                           ; Clear objects allocated to BANK0
   355  0023  01D5               	clrf	__pbssBANK0& (0+127)
   356  0024                     end_of_initialization:	
   357                           ;End of C runtime variable initialization code
   358                           
   359  0024                     __end_of__initialization:
   360  0024  0183               	clrf	3
   361  0025  120A  118A  2828   	ljmp	_main	;jump to C main() function
   362                           
   363                           	psect	bssBANK0
   364  0055                     __pbssBANK0:
   365  0055                     _Field_Offset:
   366  0055                     	ds	1
   367                           
   368                           	psect	dataBANK0
   369  0020                     __pdataBANK0:
   370  0020                     _Start_Preset_Status:
   371  0020                     	ds	1
   372  0021                     _Second_Row_Massage:
   373  0021                     	ds	16
   374  0031                     _First_Row_Massage:
   375  0031                     	ds	16
   376  0041                     _Counter:
   377  0041                     	ds	10
   378                           
   379                           	psect	inittext
   380  037C                     init_fetch0:	
   381                           ;	Called with low address in FSR and high address in W
   382                           
   383  037C  087E               	movf	btemp,w
   384  037D  008A               	movwf	10
   385  037E  087F               	movf	btemp+1,w
   386  037F  0082               	movwf	2
   387  0380                     init_ram0:	
   388                           ;Called with:
   389                           ;	high address of idata address in btemp 
   390                           ;	low address of idata address in btemp+1 
   391                           ;	low address of data in FSR
   392                           ;	high address + 1 of data in btemp-1
   393                           
   394  0380  120A  118A  237C  120A  118A  	fcall	init_fetch0
   395  0385  0080               	movwf	0
   396  0386  0A84               	incf	4,f
   397  0387  0804               	movf	4,w
   398  0388  067D               	xorwf	btemp+-1,w
   399  0389  1903               	btfsc	3,2
   400  038A  3400               	retlw	0
   401  038B  0AFF               	incf	btemp+1,f
   402  038C  1903               	btfsc	3,2
   403  038D  0AFE               	incf	btemp,f
   404  038E  2B80               	goto	init_ram0
   405                           
   406                           	psect	cstackCOMMON
   407  0070                     __pcstackCOMMON:
   408  0070                     ?_LCD_Init:
   409  0070                     ?_LCD_SendCMD:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_LCD_DisChar:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_ISR:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ??_ISR:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_main:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_LCD_DisStr:	
   425                           ; 1 bytes @ 0x0
   426                           
   427                           
   428                           ; 1 bytes @ 0x0
   429  0070                     	ds	6
   430  0076                     ??_LCD_SendCMD:
   431  0076                     ??_LCD_DisChar:	
   432                           ; 1 bytes @ 0x6
   433                           
   434  0076                     ?_strcmp:	
   435                           ; 1 bytes @ 0x6
   436                           
   437  0076                     strcmp@s2:	
   438                           ; 2 bytes @ 0x6
   439                           
   440                           
   441                           ; 1 bytes @ 0x6
   442  0076                     	ds	2
   443  0078                     ??_LCD_Init:
   444  0078                     ??_LCD_DisStrRC:	
   445                           ; 1 bytes @ 0x8
   446                           
   447  0078                     ??_LCD_GotoRC:	
   448                           ; 1 bytes @ 0x8
   449                           
   450                           
   451                           	psect	cstackBANK0
   452  004B                     __pcstackBANK0:	
   453                           ; 1 bytes @ 0x8
   454                           
   455  004B                     ??_strcmp:
   456  004B                     LCD_SendCMD@COMMAND:	
   457                           ; 1 bytes @ 0x0
   458                           
   459  004B                     LCD_DisChar@DATA:	
   460                           ; 1 bytes @ 0x0
   461                           
   462                           
   463                           ; 1 bytes @ 0x0
   464  004B                     	ds	1
   465  004C                     ?_LCD_GotoRC:
   466  004C                     ??_LCD_DisStr:	
   467                           ; 1 bytes @ 0x1
   468                           
   469  004C                     LCD_GotoRC@column:	
   470                           ; 1 bytes @ 0x1
   471                           
   472                           
   473                           ; 1 bytes @ 0x1
   474  004C                     	ds	1
   475  004D                     LCD_DisStr@str:
   476  004D                     LCD_GotoRC@row:	
   477                           ; 1 bytes @ 0x2
   478                           
   479  004D                     strcmp@r:	
   480                           ; 1 bytes @ 0x2
   481                           
   482                           
   483                           ; 1 bytes @ 0x2
   484  004D                     	ds	1
   485  004E                     LCD_DisStr@i:
   486  004E                     strcmp@s1:	
   487                           ; 1 bytes @ 0x3
   488                           
   489                           
   490                           ; 1 bytes @ 0x3
   491  004E                     	ds	1
   492  004F                     ?_LCD_DisStrRC:
   493  004F                     LCD_DisStrRC@row:	
   494                           ; 1 bytes @ 0x4
   495                           
   496                           
   497                           ; 1 bytes @ 0x4
   498  004F                     	ds	1
   499  0050                     LCD_DisStrRC@column:
   500                           
   501                           ; 1 bytes @ 0x5
   502  0050                     	ds	1
   503  0051                     LCD_DisStrRC@str:
   504                           
   505                           ; 1 bytes @ 0x6
   506  0051                     	ds	1
   507  0052                     ??_main:
   508                           
   509                           ; 1 bytes @ 0x7
   510  0052                     	ds	2
   511  0054                     main@i:
   512                           
   513                           ; 1 bytes @ 0x9
   514  0054                     	ds	1
   515                           
   516                           	psect	maintext
   517  0028                     __pmaintext:	
   518 ;;
   519 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   520 ;;
   521 ;; *************** function _main *****************
   522 ;; Defined at:
   523 ;;		line 35 in file "main.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  i               1    9[BANK0 ] unsigned char 
   528 ;; Return value:  Size  Location     Type
   529 ;;                  1    wreg      void 
   530 ;; Registers used:
   531 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   532 ;; Tracked objects:
   533 ;;		On entry : B00/0
   534 ;;		On exit  : 0/0
   535 ;;		Unchanged: 0/0
   536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   537 ;;      Params:         0       0       0       0       0
   538 ;;      Locals:         0       1       0       0       0
   539 ;;      Temps:          0       2       0       0       0
   540 ;;      Totals:         0       3       0       0       0
   541 ;;Total ram usage:        3 bytes
   542 ;; Hardware stack levels required when called:    4
   543 ;; This function calls:
   544 ;;		_LCD_DisChar
   545 ;;		_LCD_DisStrRC
   546 ;;		_LCD_GotoRC
   547 ;;		_LCD_Init
   548 ;;		_LCD_SendCMD
   549 ;;		_strcmp
   550 ;; This function is called by:
   551 ;;		Startup code after reset
   552 ;; This function uses a non-reentrant model
   553 ;;
   554                           
   555                           
   556                           ;psect for function _main
   557  0028                     _main:
   558  0028                     l1171:	
   559                           ;incstack = 0
   560                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   561                           
   562                           
   563                           ;main.c: 37:     LCD_Init();;main.c: 37:     LCD_Init();
   564  0028  120A  118A  232E  120A  118A  	fcall	_LCD_Init
   565  002D                     l1173:
   566                           
   567                           ;main.c: 38:     LCD_DisStrRC(First_Row_Massage, 0, 0);;main.c: 38:     LCD_DisStrRC(Fir
      +                          st_Row_Massage, 0, 0);
   568  002D  1283               	bcf	3,5	;RP0=0, select bank0
   569  002E  1303               	bcf	3,6	;RP1=0, select bank0
   570  002F  01CF               	clrf	LCD_DisStrRC@row
   571  0030  01D0               	clrf	LCD_DisStrRC@column
   572  0031  3031               	movlw	(low (_First_Row_Massage| 0))& (0+255)
   573  0032  120A  118A  2366  120A  118A  	fcall	_LCD_DisStrRC
   574  0037                     l1175:
   575                           
   576                           ;main.c: 39:     LCD_DisStrRC(Second_Row_Massage, 1, 0);;main.c: 39:     LCD_DisStrRC(Se
      +                          cond_Row_Massage, 1, 0);
   577  0037  1283               	bcf	3,5	;RP0=0, select bank0
   578  0038  1303               	bcf	3,6	;RP1=0, select bank0
   579  0039  01CF               	clrf	LCD_DisStrRC@row
   580  003A  0ACF               	incf	LCD_DisStrRC@row,f
   581  003B  01D0               	clrf	LCD_DisStrRC@column
   582  003C  3021               	movlw	(low (_Second_Row_Massage| 0))& (0+255)
   583  003D  120A  118A  2366  120A  118A  	fcall	_LCD_DisStrRC
   584                           
   585                           ;main.c: 41:     LCD_SendCMD((0x04));;main.c: 41:     LCD_SendCMD((0x04));
   586  0042  3004               	movlw	4
   587  0043  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
   588  0048                     l1177:
   589                           
   590                           ;main.c: 43:     TRISBbits.TRISB0 = 1;;main.c: 43:     TRISBbits.TRISB0 = 1;
   591  0048  1683               	bsf	3,5	;RP0=1, select bank1
   592  0049  1303               	bcf	3,6	;RP1=0, select bank1
   593  004A  1406               	bsf	6,0	;volatile
   594  004B                     l1179:
   595                           
   596                           ;main.c: 44:     TRISBbits.TRISB3 = 1;;main.c: 44:     TRISBbits.TRISB3 = 1;
   597  004B  1586               	bsf	6,3	;volatile
   598  004C                     l1181:
   599                           
   600                           ;main.c: 45:     TRISBbits.TRISB4 = 1;;main.c: 45:     TRISBbits.TRISB4 = 1;
   601  004C  1606               	bsf	6,4	;volatile
   602  004D                     l1183:
   603                           
   604                           ;main.c: 48:     INTE = 1;;main.c: 48:     INTE = 1;
   605  004D  160B               	bsf	11,4	;volatile
   606  004E                     l1185:
   607                           
   608                           ;main.c: 49:     INTEDG = 0;;main.c: 49:     INTEDG = 0;
   609  004E  1301               	bcf	1,6	;volatile
   610  004F                     l1187:
   611                           
   612                           ;main.c: 50:     PEIE = 1;;main.c: 50:     PEIE = 1;
   613  004F  170B               	bsf	11,6	;volatile
   614  0050                     l1189:
   615                           
   616                           ;main.c: 51:     GIE = 1;;main.c: 51:     GIE = 1;
   617  0050  178B               	bsf	11,7	;volatile
   618  0051                     l1191:
   619  0051                     l1193:
   620                           
   621                           ;main.c: 57:         if (RB3 == 0) {;main.c: 57:         if (RB3 == 0) {
   622  0051  1283               	bcf	3,5	;RP0=0, select bank0
   623  0052  1303               	bcf	3,6	;RP1=0, select bank0
   624  0053  1986               	btfsc	6,3	;volatile
   625  0054  2856               	goto	u301
   626  0055  2857               	goto	u300
   627  0056                     u301:
   628  0056  288F               	goto	l1213
   629  0057                     u300:
   630  0057                     l56:
   631  0057  1D86               	btfss	6,3	;volatile
   632  0058  285A               	goto	u311
   633  0059  285B               	goto	u310
   634  005A                     u311:
   635  005A  2857               	goto	l56
   636  005B                     u310:
   637  005B  287F               	goto	l1211
   638  005C                     l1197:
   639                           
   640                           ;main.c: 62:                     LCD_GotoRC(1, 15);;main.c: 62:                     LCD_
      +                          GotoRC(1, 15);
   641  005C  300F               	movlw	15
   642  005D  00FF               	movwf	btemp+1
   643  005E  087F               	movf	btemp+1,w
   644  005F  00CC               	movwf	LCD_GotoRC@column
   645  0060  3001               	movlw	1
   646  0061  120A  118A  234C  120A  118A  	fcall	_LCD_GotoRC
   647  0066                     l1199:
   648                           
   649                           ;main.c: 63:                     LCD_SendCMD((0x0F));;main.c: 63:                     LC
      +                          D_SendCMD((0x0F));
   650  0066  300F               	movlw	15
   651  0067  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
   652  006C                     l1201:
   653                           
   654                           ;main.c: 64:                     Field_Offset = 0;;main.c: 64:                     Field
      +                          _Offset = 0;
   655  006C  1283               	bcf	3,5	;RP0=0, select bank0
   656  006D  1303               	bcf	3,6	;RP1=0, select bank0
   657  006E  01D5               	clrf	_Field_Offset
   658  006F                     l1203:
   659                           
   660                           ;main.c: 65:                     Start_Preset_Status = 2;;main.c: 65:                   
      +                            Start_Preset_Status = 2;
   661  006F  3002               	movlw	2
   662  0070  00FF               	movwf	btemp+1
   663  0071  087F               	movf	btemp+1,w
   664  0072  00A0               	movwf	_Start_Preset_Status
   665                           
   666                           ;main.c: 66:                     break;;main.c: 66:                     break;
   667  0073  288F               	goto	l1213
   668  0074                     l1205:
   669                           
   670                           ;main.c: 69:                     LCD_SendCMD((0x0C));;main.c: 69:                     LC
      +                          D_SendCMD((0x0C));
   671  0074  300C               	movlw	12
   672  0075  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
   673  007A                     l1207:
   674                           
   675                           ;main.c: 70:                     Start_Preset_Status = 1;;main.c: 70:                   
      +                            Start_Preset_Status = 1;
   676  007A  1283               	bcf	3,5	;RP0=0, select bank0
   677  007B  1303               	bcf	3,6	;RP1=0, select bank0
   678  007C  01A0               	clrf	_Start_Preset_Status
   679  007D  0AA0               	incf	_Start_Preset_Status,f
   680                           
   681                           ;main.c: 71:                     break;;main.c: 71:                     break;
   682  007E  288F               	goto	l1213
   683  007F                     l1211:
   684  007F  0820               	movf	_Start_Preset_Status,w
   685  0080  00D2               	movwf	??_main
   686  0081  01D3               	clrf	??_main+1
   687                           
   688                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   689                           ; Switch size 1, requested type "simple"
   690                           ; Number of cases is 1, Range of values is 0 to 0
   691                           ; switch strategies available:
   692                           ; Name         Instructions Cycles
   693                           ; simple_byte            4     3 (average)
   694                           ; direct_byte           11     8 (fixed)
   695                           ; jumptable            260     6 (fixed)
   696                           ;	Chosen strategy is simple_byte
   697  0082  0853               	movf	??_main+1,w
   698  0083  3A00               	xorlw	0	; case 0
   699  0084  1903               	skipnz
   700  0085  2887               	goto	l1367
   701  0086  288F               	goto	l1213
   702  0087                     l1367:
   703                           
   704                           ; Switch size 1, requested type "simple"
   705                           ; Number of cases is 2, Range of values is 1 to 2
   706                           ; switch strategies available:
   707                           ; Name         Instructions Cycles
   708                           ; simple_byte            7     4 (average)
   709                           ; direct_byte           17    11 (fixed)
   710                           ; jumptable            263     9 (fixed)
   711                           ;	Chosen strategy is simple_byte
   712  0087  0852               	movf	??_main,w
   713  0088  3A01               	xorlw	1	; case 1
   714  0089  1903               	skipnz
   715  008A  285C               	goto	l1197
   716  008B  3A03               	xorlw	3	; case 2
   717  008C  1903               	skipnz
   718  008D  2874               	goto	l1205
   719  008E  288F               	goto	l1213
   720  008F                     l1213:
   721                           
   722                           ;main.c: 75:         if (Start_Preset_Status == 1) {;main.c: 75:         if (Start_Prese
      +                          t_Status == 1) {
   723  008F  0320               	decf	_Start_Preset_Status,w
   724  0090  1D03               	btfss	3,2
   725  0091  2893               	goto	u321
   726  0092  2894               	goto	u320
   727  0093                     u321:
   728  0093  297A               	goto	l1283
   729  0094                     u320:
   730  0094                     l1215:
   731                           
   732                           ;main.c: 77:             for (i = 0; i < 10; i++) {;main.c: 77:             for (i = 0; 
      +                          i < 10; i++) {
   733  0094  01D4               	clrf	main@i
   734  0095                     l1221:
   735                           
   736                           ;main.c: 78:                 if(Counter[i] > '9');main.c: 78:                 if(Counter
      +                          [i] > '9')
   737  0095  0854               	movf	main@i,w
   738  0096  3E41               	addlw	(low (_Counter| 0))& (0+255)
   739  0097  0084               	movwf	4
   740  0098  303A               	movlw	58
   741  0099  1383               	bcf	3,7	;select IRP bank0
   742  009A  0200               	subwf	0,w
   743  009B  1C03               	skipc
   744  009C  289E               	goto	u331
   745  009D  289F               	goto	u330
   746  009E                     u331:
   747  009E  28A6               	goto	l1225
   748  009F                     u330:
   749  009F                     l1223:
   750                           
   751                           ;main.c: 79:                     Counter[i]='0';;main.c: 79:                     Counter
      +                          [i]='0';
   752  009F  3030               	movlw	48
   753  00A0  00FF               	movwf	btemp+1
   754  00A1  0854               	movf	main@i,w
   755  00A2  3E41               	addlw	(low (_Counter| 0))& (0+255)
   756  00A3  0084               	movwf	4
   757  00A4  087F               	movf	btemp+1,w
   758  00A5  0080               	movwf	0
   759  00A6                     l1225:
   760                           
   761                           ;main.c: 80:                 if(Counter[i] < '0'){;main.c: 80:                 if(Counte
      +                          r[i] < '0'){
   762  00A6  0854               	movf	main@i,w
   763  00A7  3E41               	addlw	(low (_Counter| 0))& (0+255)
   764  00A8  0084               	movwf	4
   765  00A9  3030               	movlw	48
   766  00AA  0200               	subwf	0,w
   767  00AB  1803               	skipnc
   768  00AC  28AE               	goto	u341
   769  00AD  28AF               	goto	u340
   770  00AE                     u341:
   771  00AE  28CC               	goto	l1235
   772  00AF                     u340:
   773  00AF                     l1227:
   774                           
   775                           ;main.c: 81:                     Counter[i]='9';;main.c: 81:                     Counter
      +                          [i]='9';
   776  00AF  3039               	movlw	57
   777  00B0  00FF               	movwf	btemp+1
   778  00B1  0854               	movf	main@i,w
   779  00B2  3E41               	addlw	(low (_Counter| 0))& (0+255)
   780  00B3  0084               	movwf	4
   781  00B4  087F               	movf	btemp+1,w
   782  00B5  0080               	movwf	0
   783  00B6                     l1229:
   784                           
   785                           ;main.c: 82:                     if(Counter[i+1] == '0'){;main.c: 82:                   
      +                            if(Counter[i+1] == '0'){
   786  00B6  0854               	movf	main@i,w
   787  00B7  3E42               	addlw	(low ((_Counter| 0+1)))& (0+255)
   788  00B8  0084               	movwf	4
   789  00B9  3030               	movlw	48
   790  00BA  0600               	xorwf	0,w
   791  00BB  1D03               	btfss	3,2
   792  00BC  28BE               	goto	u351
   793  00BD  28BF               	goto	u350
   794  00BE                     u351:
   795  00BE  28C7               	goto	l1233
   796  00BF                     u350:
   797  00BF                     l1231:
   798                           
   799                           ;main.c: 83:                         Counter[i+1]='9';;main.c: 83:                      
      +                             Counter[i+1]='9';
   800  00BF  3039               	movlw	57
   801  00C0  00FF               	movwf	btemp+1
   802  00C1  0854               	movf	main@i,w
   803  00C2  3E42               	addlw	(low ((_Counter| 0+1)))& (0+255)
   804  00C3  0084               	movwf	4
   805  00C4  087F               	movf	btemp+1,w
   806  00C5  0080               	movwf	0
   807                           
   808                           ;main.c: 84:                     };main.c: 84:                     }
   809  00C6  28CC               	goto	l1235
   810  00C7                     l1233:
   811                           
   812                           ;main.c: 86:                         Counter[i + 1]--;;main.c: 86:                      
      +                             Counter[i + 1]--;
   813  00C7  0854               	movf	main@i,w
   814  00C8  3E42               	addlw	(low ((_Counter| 0+1)))& (0+255)
   815  00C9  0084               	movwf	4
   816  00CA  3001               	movlw	1
   817  00CB  0280               	subwf	0,f
   818  00CC                     l1235:
   819                           
   820                           ;main.c: 89:             };main.c: 89:             }
   821  00CC  3001               	movlw	1
   822  00CD  00FF               	movwf	btemp+1
   823  00CE  087F               	movf	btemp+1,w
   824  00CF  07D4               	addwf	main@i,f
   825  00D0                     l1237:
   826  00D0  300A               	movlw	10
   827  00D1  0254               	subwf	main@i,w
   828  00D2  1C03               	skipc
   829  00D3  28D5               	goto	u361
   830  00D4  28D6               	goto	u360
   831  00D5                     u361:
   832  00D5  2895               	goto	l1221
   833  00D6                     u360:
   834  00D6  297A               	goto	l1283
   835  00D7                     l1239:
   836                           
   837                           ;main.c: 97:                 Counter[0]--;;main.c: 97:                 Counter[0]--;
   838  00D7  3001               	movlw	1
   839  00D8  02C1               	subwf	_Counter,f
   840  00D9                     l1241:
   841                           
   842                           ;main.c: 98:                 LCD_GotoRC(1, 15);;main.c: 98:                 LCD_GotoRC(1
      +                          , 15);
   843  00D9  300F               	movlw	15
   844  00DA  00FF               	movwf	btemp+1
   845  00DB  087F               	movf	btemp+1,w
   846  00DC  00CC               	movwf	LCD_GotoRC@column
   847  00DD  3001               	movlw	1
   848  00DE  120A  118A  234C  120A  118A  	fcall	_LCD_GotoRC
   849  00E3                     l1243:
   850                           
   851                           ;main.c: 99:                 LCD_DisChar(Counter[0]);;main.c: 99:                 LCD_Di
      +                          sChar(Counter[0]);
   852  00E3  1283               	bcf	3,5	;RP0=0, select bank0
   853  00E4  1303               	bcf	3,6	;RP1=0, select bank0
   854  00E5  0841               	movf	_Counter,w
   855  00E6  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   856  00EB                     l1245:
   857                           
   858                           ;main.c: 100:                 LCD_DisChar(Counter[1]);;main.c: 100:                 LCD_
      +                          DisChar(Counter[1]);
   859  00EB  1283               	bcf	3,5	;RP0=0, select bank0
   860  00EC  1303               	bcf	3,6	;RP1=0, select bank0
   861  00ED  0842               	movf	_Counter+1,w
   862  00EE  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   863  00F3                     l1247:
   864                           
   865                           ;main.c: 101:                 LCD_DisChar(Counter[2]);;main.c: 101:                 LCD_
      +                          DisChar(Counter[2]);
   866  00F3  1283               	bcf	3,5	;RP0=0, select bank0
   867  00F4  1303               	bcf	3,6	;RP1=0, select bank0
   868  00F5  0843               	movf	_Counter+2,w
   869  00F6  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   870  00FB                     l1249:
   871                           
   872                           ;main.c: 102:                 LCD_DisChar(Counter[3]);;main.c: 102:                 LCD_
      +                          DisChar(Counter[3]);
   873  00FB  1283               	bcf	3,5	;RP0=0, select bank0
   874  00FC  1303               	bcf	3,6	;RP1=0, select bank0
   875  00FD  0844               	movf	_Counter+3,w
   876  00FE  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   877  0103                     l1251:
   878                           
   879                           ;main.c: 103:                 LCD_DisChar(Counter[4]);;main.c: 103:                 LCD_
      +                          DisChar(Counter[4]);
   880  0103  1283               	bcf	3,5	;RP0=0, select bank0
   881  0104  1303               	bcf	3,6	;RP1=0, select bank0
   882  0105  0845               	movf	_Counter+4,w
   883  0106  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   884  010B                     l1253:
   885                           
   886                           ;main.c: 104:                 LCD_DisChar(Counter[5]);;main.c: 104:                 LCD_
      +                          DisChar(Counter[5]);
   887  010B  1283               	bcf	3,5	;RP0=0, select bank0
   888  010C  1303               	bcf	3,6	;RP1=0, select bank0
   889  010D  0846               	movf	_Counter+5,w
   890  010E  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   891  0113                     l1255:
   892                           
   893                           ;main.c: 105:                 LCD_DisChar(Counter[6]);;main.c: 105:                 LCD_
      +                          DisChar(Counter[6]);
   894  0113  1283               	bcf	3,5	;RP0=0, select bank0
   895  0114  1303               	bcf	3,6	;RP1=0, select bank0
   896  0115  0847               	movf	_Counter+6,w
   897  0116  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   898  011B                     l1257:
   899                           
   900                           ;main.c: 106:                 LCD_DisChar(Counter[7]);;main.c: 106:                 LCD_
      +                          DisChar(Counter[7]);
   901  011B  1283               	bcf	3,5	;RP0=0, select bank0
   902  011C  1303               	bcf	3,6	;RP1=0, select bank0
   903  011D  0848               	movf	_Counter+7,w
   904  011E  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   905  0123                     l1259:
   906                           
   907                           ;main.c: 107:                 LCD_DisChar(Counter[8]);;main.c: 107:                 LCD_
      +                          DisChar(Counter[8]);
   908  0123  1283               	bcf	3,5	;RP0=0, select bank0
   909  0124  1303               	bcf	3,6	;RP1=0, select bank0
   910  0125  0849               	movf	_Counter+8,w
   911  0126  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   912  012B                     l1261:
   913                           
   914                           ;main.c: 108:                 LCD_DisChar(Counter[9]);;main.c: 108:                 LCD_
      +                          DisChar(Counter[9]);
   915  012B  1283               	bcf	3,5	;RP0=0, select bank0
   916  012C  1303               	bcf	3,6	;RP1=0, select bank0
   917  012D  084A               	movf	_Counter+9,w
   918  012E  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   919                           
   920                           ;main.c: 109:                 break;;main.c: 109:                 break;
   921  0133  298A               	goto	l1285
   922  0134                     l73:	
   923                           ;main.c: 111:             case 2:;main.c: 111:             case 2:
   924                           
   925                           
   926                           ;main.c: 112:                 if (RB4 == 0) {;main.c: 112:                 if (RB4 == 0)
      +                           {
   927  0134  1A06               	btfsc	6,4	;volatile
   928  0135  2937               	goto	u371
   929  0136  2938               	goto	u370
   930  0137                     u371:
   931  0137  2947               	goto	l1271
   932  0138                     u370:
   933  0138                     l75:
   934  0138  1E06               	btfss	6,4	;volatile
   935  0139  293B               	goto	u381
   936  013A  293C               	goto	u380
   937  013B                     u381:
   938  013B  2938               	goto	l75
   939  013C                     u380:
   940  013C                     l1265:
   941                           
   942                           ;main.c: 114:                     Field_Offset++;;main.c: 114:                     Field
      +                          _Offset++;
   943  013C  3001               	movlw	1
   944  013D  00FF               	movwf	btemp+1
   945  013E  087F               	movf	btemp+1,w
   946  013F  07D5               	addwf	_Field_Offset,f
   947  0140                     l1267:
   948                           
   949                           ;main.c: 115:                     if (Field_Offset > 10);main.c: 115:                   
      +                            if (Field_Offset > 10)
   950  0140  300B               	movlw	11
   951  0141  0255               	subwf	_Field_Offset,w
   952  0142  1C03               	skipc
   953  0143  2945               	goto	u391
   954  0144  2946               	goto	u390
   955  0145                     u391:
   956  0145  2947               	goto	l1271
   957  0146                     u390:
   958  0146                     l1269:
   959                           
   960                           ;main.c: 116:                         Field_Offset = 0;;main.c: 116:                    
      +                               Field_Offset = 0;
   961  0146  01D5               	clrf	_Field_Offset
   962  0147                     l1271:
   963                           
   964                           ;main.c: 119:                 LCD_SendCMD((0x0F));;main.c: 119:                 LCD_Send
      +                          CMD((0x0F));
   965  0147  300F               	movlw	15
   966  0148  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
   967  014D                     l1273:
   968                           
   969                           ;main.c: 120:                 LCD_GotoRC(1, 15 - Field_Offset);;main.c: 120:            
      +                               LCD_GotoRC(1, 15 - Field_Offset);
   970  014D  1283               	bcf	3,5	;RP0=0, select bank0
   971  014E  1303               	bcf	3,6	;RP1=0, select bank0
   972  014F  0855               	movf	_Field_Offset,w
   973  0150  3C0F               	sublw	15
   974  0151  00FF               	movwf	btemp+1
   975  0152  087F               	movf	btemp+1,w
   976  0153  00CC               	movwf	LCD_GotoRC@column
   977  0154  3001               	movlw	1
   978  0155  120A  118A  234C  120A  118A  	fcall	_LCD_GotoRC
   979  015A                     l1275:
   980                           
   981                           ;main.c: 121:                 LCD_SendCMD((0x0C));;main.c: 121:                 LCD_Send
      +                          CMD((0x0C));
   982  015A  300C               	movlw	12
   983  015B  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
   984  0160                     l1277:
   985                           
   986                           ;main.c: 122:                 LCD_DisChar(Counter[Field_Offset]);;main.c: 122:          
      +                                 LCD_DisChar(Counter[Field_Offset]);
   987  0160  1283               	bcf	3,5	;RP0=0, select bank0
   988  0161  1303               	bcf	3,6	;RP1=0, select bank0
   989  0162  0855               	movf	_Field_Offset,w
   990  0163  3E41               	addlw	(low (_Counter| 0))& (0+255)
   991  0164  0084               	movwf	4
   992  0165  1383               	bcf	3,7	;select IRP bank0
   993  0166  0800               	movf	0,w
   994  0167  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
   995  016C                     l1279:
   996                           
   997                           ;main.c: 123:                 LCD_GotoRC(1, 15 - Field_Offset);;main.c: 123:            
      +                               LCD_GotoRC(1, 15 - Field_Offset);
   998  016C  1283               	bcf	3,5	;RP0=0, select bank0
   999  016D  1303               	bcf	3,6	;RP1=0, select bank0
  1000  016E  0855               	movf	_Field_Offset,w
  1001  016F  3C0F               	sublw	15
  1002  0170  00FF               	movwf	btemp+1
  1003  0171  087F               	movf	btemp+1,w
  1004  0172  00CC               	movwf	LCD_GotoRC@column
  1005  0173  3001               	movlw	1
  1006  0174  120A  118A  234C  120A  118A  	fcall	_LCD_GotoRC
  1007                           
  1008                           ;main.c: 125:                 break;;main.c: 125:                 break;
  1009  0179  298A               	goto	l1285
  1010  017A                     l1283:
  1011  017A  0820               	movf	_Start_Preset_Status,w
  1012  017B  00D2               	movwf	??_main
  1013  017C  01D3               	clrf	??_main+1
  1014                           
  1015                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1016                           ; Switch size 1, requested type "simple"
  1017                           ; Number of cases is 1, Range of values is 0 to 0
  1018                           ; switch strategies available:
  1019                           ; Name         Instructions Cycles
  1020                           ; simple_byte            4     3 (average)
  1021                           ; direct_byte           11     8 (fixed)
  1022                           ; jumptable            260     6 (fixed)
  1023                           ;	Chosen strategy is simple_byte
  1024  017D  0853               	movf	??_main+1,w
  1025  017E  3A00               	xorlw	0	; case 0
  1026  017F  1903               	skipnz
  1027  0180  2982               	goto	l1369
  1028  0181  298A               	goto	l1285
  1029  0182                     l1369:
  1030                           
  1031                           ; Switch size 1, requested type "simple"
  1032                           ; Number of cases is 2, Range of values is 1 to 2
  1033                           ; switch strategies available:
  1034                           ; Name         Instructions Cycles
  1035                           ; simple_byte            7     4 (average)
  1036                           ; direct_byte           17    11 (fixed)
  1037                           ; jumptable            263     9 (fixed)
  1038                           ;	Chosen strategy is simple_byte
  1039  0182  0852               	movf	??_main,w
  1040  0183  3A01               	xorlw	1	; case 1
  1041  0184  1903               	skipnz
  1042  0185  28D7               	goto	l1239
  1043  0186  3A03               	xorlw	3	; case 2
  1044  0187  1903               	skipnz
  1045  0188  2934               	goto	l73
  1046  0189  298A               	goto	l1285
  1047  018A                     l1285:
  1048                           
  1049                           ;main.c: 129:         if (strcmp(Counter, "0000000000") == 0);main.c: 129:         if (s
      +                          trcmp(Counter, "0000000000") == 0)
  1050  018A  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1051  018B  00FF               	movwf	btemp+1
  1052  018C  087F               	movf	btemp+1,w
  1053  018D  00F6               	movwf	strcmp@s2
  1054  018E  3041               	movlw	(low (_Counter| 0))& (0+255)
  1055  018F  120A  118A  22B1  120A  118A  	fcall	_strcmp
  1056  0194  0876               	movf	?_strcmp,w
  1057  0195  0477               	iorwf	?_strcmp+1,w
  1058  0196  1D03               	btfss	3,2
  1059  0197  2999               	goto	u401
  1060  0198  299A               	goto	u400
  1061  0199                     u401:
  1062  0199  2851               	goto	l1193
  1063  019A                     u400:
  1064  019A                     l1287:
  1065                           
  1066                           ;main.c: 130:             Start_Preset_Status = 2;;main.c: 130:             Start_Preset
      +                          _Status = 2;
  1067  019A  3002               	movlw	2
  1068  019B  00FF               	movwf	btemp+1
  1069  019C  087F               	movf	btemp+1,w
  1070  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1071  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1072  019F  00A0               	movwf	_Start_Preset_Status
  1073  01A0  2851               	goto	l1193
  1074  01A1  120A  118A  2812   	ljmp	start
  1075  01A4                     __end_of_main:
  1076                           
  1077                           	psect	text1
  1078  02B1                     __ptext1:	
  1079 ;; *************** function _strcmp *****************
  1080 ;; Defined at:
  1081 ;;		line 33 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\strcmp.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;  s1              1    wreg     PTR const unsigned char 
  1084 ;;		 -> Counter(10), 
  1085 ;;  s2              1    6[COMMON] PTR const unsigned char 
  1086 ;;		 -> STR_1(11), 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  s1              1    3[BANK0 ] PTR const unsigned char 
  1089 ;;		 -> Counter(10), 
  1090 ;;  r               1    2[BANK0 ] char 
  1091 ;; Return value:  Size  Location     Type
  1092 ;;                  2    6[COMMON] int 
  1093 ;; Registers used:
  1094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  1095 ;; Tracked objects:
  1096 ;;		On entry : 0/0
  1097 ;;		On exit  : 0/0
  1098 ;;		Unchanged: 0/0
  1099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1100 ;;      Params:         2       0       0       0       0
  1101 ;;      Locals:         0       2       0       0       0
  1102 ;;      Temps:          0       2       0       0       0
  1103 ;;      Totals:         2       4       0       0       0
  1104 ;;Total ram usage:        6 bytes
  1105 ;; Hardware stack levels used:    2
  1106 ;; Hardware stack levels required when called:    1
  1107 ;; This function calls:
  1108 ;;		Nothing
  1109 ;; This function is called by:
  1110 ;;		_main
  1111 ;; This function uses a non-reentrant model
  1112 ;;
  1113                           
  1114                           
  1115                           ;psect for function _strcmp
  1116  02B1                     _strcmp:
  1117                           
  1118                           ;incstack = 0
  1119                           ; Regs used in _strcmp: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  1120                           ;strcmp@s1 stored from wreg
  1121  02B1  1283               	bcf	3,5	;RP0=0, select bank0
  1122  02B2  1303               	bcf	3,6	;RP1=0, select bank0
  1123  02B3  00CE               	movwf	strcmp@s1
  1124  02B4                     l1133:
  1125  02B4  2ABD               	goto	l1139
  1126  02B5                     l1135:
  1127  02B5  3001               	movlw	1
  1128  02B6  00FF               	movwf	btemp+1
  1129  02B7  087F               	movf	btemp+1,w
  1130  02B8  07CE               	addwf	strcmp@s1,f
  1131  02B9                     l1137:
  1132  02B9  3001               	movlw	1
  1133  02BA  00FF               	movwf	btemp+1
  1134  02BB  087F               	movf	btemp+1,w
  1135  02BC  07F6               	addwf	strcmp@s2,f
  1136  02BD                     l1139:
  1137  02BD  0876               	movf	strcmp@s2,w
  1138  02BE  0084               	movwf	4
  1139  02BF  120A  118A  238F  120A  118A  	fcall	stringdir
  1140  02C4  00CB               	movwf	??_strcmp
  1141  02C5  084E               	movf	strcmp@s1,w
  1142  02C6  0084               	movwf	4
  1143  02C7  1383               	bcf	3,7	;select IRP bank0
  1144  02C8  0800               	movf	0,w
  1145  02C9  00CC               	movwf	??_strcmp+1
  1146  02CA  084B               	movf	??_strcmp,w
  1147  02CB  024C               	subwf	??_strcmp+1,w
  1148  02CC  00FF               	movwf	btemp+1
  1149  02CD  087F               	movf	btemp+1,w
  1150  02CE  00CD               	movwf	strcmp@r
  1151  02CF  084D               	movf	strcmp@r,w
  1152  02D0  1D03               	btfss	3,2
  1153  02D1  2AD3               	goto	u251
  1154  02D2  2AD4               	goto	u250
  1155  02D3                     u251:
  1156  02D3  2ADB               	goto	l1143
  1157  02D4                     u250:
  1158  02D4                     l1141:
  1159  02D4  084E               	movf	strcmp@s1,w
  1160  02D5  0084               	movwf	4
  1161  02D6  0800               	movf	0,w
  1162  02D7  1D03               	btfss	3,2
  1163  02D8  2ADA               	goto	u261
  1164  02D9  2ADB               	goto	u260
  1165  02DA                     u261:
  1166  02DA  2AB5               	goto	l1135
  1167  02DB                     u260:
  1168  02DB                     l1143:
  1169  02DB  084D               	movf	strcmp@r,w
  1170  02DC  00F6               	movwf	?_strcmp
  1171  02DD  01F7               	clrf	?_strcmp+1
  1172  02DE  1BF6               	btfsc	?_strcmp,7
  1173  02DF  03F7               	decf	?_strcmp+1,f
  1174  02E0                     l661:
  1175  02E0  0008               	return
  1176  02E1                     __end_of_strcmp:
  1177                           
  1178                           	psect	text2
  1179  032E                     __ptext2:	
  1180 ;; *************** function _LCD_Init *****************
  1181 ;; Defined at:
  1182 ;;		line 6 in file "LCD.c"
  1183 ;; Parameters:    Size  Location     Type
  1184 ;;		None
  1185 ;; Auto vars:     Size  Location     Type
  1186 ;;		None
  1187 ;; Return value:  Size  Location     Type
  1188 ;;                  1    wreg      void 
  1189 ;; Registers used:
  1190 ;;		wreg, status,2, status,0, pclath, cstack
  1191 ;; Tracked objects:
  1192 ;;		On entry : 0/0
  1193 ;;		On exit  : 0/0
  1194 ;;		Unchanged: 0/0
  1195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1196 ;;      Params:         0       0       0       0       0
  1197 ;;      Locals:         0       0       0       0       0
  1198 ;;      Temps:          0       0       0       0       0
  1199 ;;      Totals:         0       0       0       0       0
  1200 ;;Total ram usage:        0 bytes
  1201 ;; Hardware stack levels used:    1
  1202 ;; Hardware stack levels required when called:    2
  1203 ;; This function calls:
  1204 ;;		_LCD_SendCMD
  1205 ;; This function is called by:
  1206 ;;		_main
  1207 ;; This function uses a non-reentrant model
  1208 ;;
  1209                           
  1210                           
  1211                           ;psect for function _LCD_Init
  1212  032E                     _LCD_Init:
  1213  032E                     l1115:	
  1214                           ;incstack = 0
  1215                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1216                           
  1217                           
  1218                           ;LCD.c: 9:     TRISD = 0;
  1219  032E  1683               	bsf	3,5	;RP0=1, select bank1
  1220  032F  1303               	bcf	3,6	;RP1=0, select bank1
  1221  0330  0188               	clrf	8	;volatile
  1222  0331                     l1117:
  1223                           
  1224                           ;LCD.c: 10:     TRISEbits.TRISE2 = 0;
  1225  0331  1109               	bcf	9,2	;volatile
  1226  0332                     l1119:
  1227                           
  1228                           ;LCD.c: 11:     TRISEbits.TRISE1 = 0;
  1229  0332  1089               	bcf	9,1	;volatile
  1230  0333                     l1121:
  1231                           
  1232                           ;LCD.c: 14:  LCD_SendCMD((0x02));
  1233  0333  3002               	movlw	2
  1234  0334  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1235  0339                     l1123:
  1236                           
  1237                           ;LCD.c: 17:   LCD_SendCMD((0x28));
  1238  0339  3028               	movlw	40
  1239  033A  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1240  033F                     l1125:
  1241                           
  1242                           ;LCD.c: 22:  LCD_SendCMD((0x0C));
  1243  033F  300C               	movlw	12
  1244  0340  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1245  0345                     l1127:
  1246                           
  1247                           ;LCD.c: 23:  LCD_SendCMD((0x01));
  1248  0345  3001               	movlw	1
  1249  0346  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1250  034B                     l99:
  1251  034B  0008               	return
  1252  034C                     __end_of_LCD_Init:
  1253                           
  1254                           	psect	text3
  1255  0366                     __ptext3:	
  1256 ;; *************** function _LCD_DisStrRC *****************
  1257 ;; Defined at:
  1258 ;;		line 181 in file "LCD.c"
  1259 ;; Parameters:    Size  Location     Type
  1260 ;;  str             1    wreg     PTR unsigned char 
  1261 ;;		 -> Second_Row_Massage(16), First_Row_Massage(16), 
  1262 ;;  row             1    4[BANK0 ] unsigned char 
  1263 ;;  column          1    5[BANK0 ] unsigned char 
  1264 ;; Auto vars:     Size  Location     Type
  1265 ;;  str             1    6[BANK0 ] PTR unsigned char 
  1266 ;;		 -> Second_Row_Massage(16), First_Row_Massage(16), 
  1267 ;; Return value:  Size  Location     Type
  1268 ;;                  1    wreg      void 
  1269 ;; Registers used:
  1270 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1271 ;; Tracked objects:
  1272 ;;		On entry : 0/0
  1273 ;;		On exit  : 0/0
  1274 ;;		Unchanged: 0/0
  1275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1276 ;;      Params:         0       2       0       0       0
  1277 ;;      Locals:         0       1       0       0       0
  1278 ;;      Temps:          0       0       0       0       0
  1279 ;;      Totals:         0       3       0       0       0
  1280 ;;Total ram usage:        3 bytes
  1281 ;; Hardware stack levels used:    1
  1282 ;; Hardware stack levels required when called:    3
  1283 ;; This function calls:
  1284 ;;		_LCD_DisStr
  1285 ;;		_LCD_GotoRC
  1286 ;; This function is called by:
  1287 ;;		_main
  1288 ;; This function uses a non-reentrant model
  1289 ;;
  1290                           
  1291                           
  1292                           ;psect for function _LCD_DisStrRC
  1293  0366                     _LCD_DisStrRC:
  1294                           
  1295                           ;incstack = 0
  1296                           ; Regs used in _LCD_DisStrRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1297                           ;LCD_DisStrRC@str stored from wreg
  1298  0366  1283               	bcf	3,5	;RP0=0, select bank0
  1299  0367  1303               	bcf	3,6	;RP1=0, select bank0
  1300  0368  00D1               	movwf	LCD_DisStrRC@str
  1301  0369                     l1129:
  1302                           
  1303                           ;LCD.c: 181: void LCD_DisStrRC(uint8_t* str ,uint8_t row ,uint8_t column);LCD.c: 182: {;
      +                          LCD.c: 183:  LCD_GotoRC(row ,column);
  1304  0369  0850               	movf	LCD_DisStrRC@column,w
  1305  036A  00FF               	movwf	btemp+1
  1306  036B  087F               	movf	btemp+1,w
  1307  036C  00CC               	movwf	LCD_GotoRC@column
  1308  036D  084F               	movf	LCD_DisStrRC@row,w
  1309  036E  120A  118A  234C  120A  118A  	fcall	_LCD_GotoRC
  1310  0373                     l1131:
  1311                           
  1312                           ;LCD.c: 184:  LCD_DisStr(str);
  1313  0373  1283               	bcf	3,5	;RP0=0, select bank0
  1314  0374  1303               	bcf	3,6	;RP1=0, select bank0
  1315  0375  0851               	movf	LCD_DisStrRC@str,w
  1316  0376  120A  118A  230C  120A  118A  	fcall	_LCD_DisStr
  1317  037B                     l119:
  1318  037B  0008               	return
  1319  037C                     __end_of_LCD_DisStrRC:
  1320                           
  1321                           	psect	text4
  1322  034C                     __ptext4:	
  1323 ;; *************** function _LCD_GotoRC *****************
  1324 ;; Defined at:
  1325 ;;		line 170 in file "LCD.c"
  1326 ;; Parameters:    Size  Location     Type
  1327 ;;  row             1    wreg     unsigned char 
  1328 ;;  column          1    1[BANK0 ] unsigned char 
  1329 ;; Auto vars:     Size  Location     Type
  1330 ;;  row             1    2[BANK0 ] unsigned char 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  1    wreg      void 
  1333 ;; Registers used:
  1334 ;;		wreg, status,2, status,0, pclath, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1340 ;;      Params:         0       1       0       0       0
  1341 ;;      Locals:         0       1       0       0       0
  1342 ;;      Temps:          0       0       0       0       0
  1343 ;;      Totals:         0       2       0       0       0
  1344 ;;Total ram usage:        2 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:    2
  1347 ;; This function calls:
  1348 ;;		_LCD_SendCMD
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;;		_LCD_DisStrRC
  1352 ;; This function uses a non-reentrant model
  1353 ;;
  1354                           
  1355                           
  1356                           ;psect for function _LCD_GotoRC
  1357  034C                     _LCD_GotoRC:
  1358                           
  1359                           ;incstack = 0
  1360                           ; Regs used in _LCD_GotoRC: [wreg+status,2+status,0+pclath+cstack]
  1361                           ;LCD_GotoRC@row stored from wreg
  1362  034C  1283               	bcf	3,5	;RP0=0, select bank0
  1363  034D  1303               	bcf	3,6	;RP1=0, select bank0
  1364  034E  00CD               	movwf	LCD_GotoRC@row
  1365  034F                     l1101:
  1366                           
  1367                           ;LCD.c: 170: void LCD_GotoRC(uint8_t row ,uint8_t column);LCD.c: 171: {;LCD.c: 172:   if
      +                          (row == 0)
  1368  034F  084D               	movf	LCD_GotoRC@row,w
  1369  0350  1D03               	btfss	3,2
  1370  0351  2B53               	goto	u231
  1371  0352  2B54               	goto	u230
  1372  0353                     u231:
  1373  0353  2B5D               	goto	l1105
  1374  0354                     u230:
  1375  0354                     l1103:
  1376                           
  1377                           ;LCD.c: 173:    LCD_SendCMD( (0x80) | (row + column) );
  1378  0354  084C               	movf	LCD_GotoRC@column,w
  1379  0355  074D               	addwf	LCD_GotoRC@row,w
  1380  0356  3880               	iorlw	128
  1381  0357  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1382  035C  2B65               	goto	l116
  1383  035D                     l1105:
  1384                           
  1385                           ;LCD.c: 176:    LCD_SendCMD( (0x80) | (column + 0x40) );
  1386  035D  084C               	movf	LCD_GotoRC@column,w
  1387  035E  3E40               	addlw	64
  1388  035F  3880               	iorlw	128
  1389  0360  120A  118A  21A4  120A  118A  	fcall	_LCD_SendCMD
  1390  0365                     l116:
  1391  0365  0008               	return
  1392  0366                     __end_of_LCD_GotoRC:
  1393                           
  1394                           	psect	text5
  1395  01A4                     __ptext5:	
  1396 ;; *************** function _LCD_SendCMD *****************
  1397 ;; Defined at:
  1398 ;;		line 31 in file "LCD.c"
  1399 ;; Parameters:    Size  Location     Type
  1400 ;;  COMMAND         1    wreg     unsigned char 
  1401 ;; Auto vars:     Size  Location     Type
  1402 ;;  COMMAND         1    0[BANK0 ] unsigned char 
  1403 ;; Return value:  Size  Location     Type
  1404 ;;                  1    wreg      void 
  1405 ;; Registers used:
  1406 ;;		wreg, status,2, status,0
  1407 ;; Tracked objects:
  1408 ;;		On entry : 0/0
  1409 ;;		On exit  : 0/0
  1410 ;;		Unchanged: 0/0
  1411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1412 ;;      Params:         0       0       0       0       0
  1413 ;;      Locals:         0       1       0       0       0
  1414 ;;      Temps:          2       0       0       0       0
  1415 ;;      Totals:         2       1       0       0       0
  1416 ;;Total ram usage:        3 bytes
  1417 ;; Hardware stack levels used:    1
  1418 ;; Hardware stack levels required when called:    1
  1419 ;; This function calls:
  1420 ;;		Nothing
  1421 ;; This function is called by:
  1422 ;;		_main
  1423 ;;		_LCD_Init
  1424 ;;		_LCD_GotoRC
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _LCD_SendCMD
  1430  01A4                     _LCD_SendCMD:
  1431                           
  1432                           ;incstack = 0
  1433                           ; Regs used in _LCD_SendCMD: [wreg+status,2+status,0]
  1434                           ;LCD_SendCMD@COMMAND stored from wreg
  1435  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  1436  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  1437  01A6  00CB               	movwf	LCD_SendCMD@COMMAND
  1438  01A7                     l1049:
  1439                           
  1440                           ;LCD.c: 31: void LCD_SendCMD(uint8_t COMMAND);LCD.c: 32: {;LCD.c: 34:     RE2 = 0;
  1441  01A7  1109               	bcf	9,2	;volatile
  1442  01A8                     l1051:
  1443                           
  1444                           ;LCD.c: 35:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1445  01A8  3003               	movlw	3
  1446  01A9  00F7               	movwf	??_LCD_SendCMD+1
  1447  01AA  3097               	movlw	151
  1448  01AB  00F6               	movwf	??_LCD_SendCMD
  1449  01AC                     u417:
  1450  01AC  0BF6               	decfsz	??_LCD_SendCMD,f
  1451  01AD  29AC               	goto	u417
  1452  01AE  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1453  01AF  29AC               	goto	u417
  1454  01B0  29B1               	nop2
  1455  01B1                     l1053:
  1456                           
  1457                           ;LCD.c: 39:         RE1 = 1;
  1458  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1459  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1460  01B3  1489               	bsf	9,1	;volatile
  1461                           
  1462                           ;LCD.c: 40:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1463  01B4  3003               	movlw	3
  1464  01B5  00F7               	movwf	??_LCD_SendCMD+1
  1465  01B6  3097               	movlw	151
  1466  01B7  00F6               	movwf	??_LCD_SendCMD
  1467  01B8                     u427:
  1468  01B8  0BF6               	decfsz	??_LCD_SendCMD,f
  1469  01B9  29B8               	goto	u427
  1470  01BA  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1471  01BB  29B8               	goto	u427
  1472  01BC  29BD               	nop2
  1473  01BD                     l1055:
  1474                           
  1475                           ;LCD.c: 42:         PORTD = (COMMAND & 0xF0);
  1476  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  1477  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  1478  01BF  084B               	movf	LCD_SendCMD@COMMAND,w
  1479  01C0  39F0               	andlw	240
  1480  01C1  0088               	movwf	8	;volatile
  1481  01C2                     l1057:
  1482                           
  1483                           ;LCD.c: 43:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1484  01C2  3003               	movlw	3
  1485  01C3  00F7               	movwf	??_LCD_SendCMD+1
  1486  01C4  3097               	movlw	151
  1487  01C5  00F6               	movwf	??_LCD_SendCMD
  1488  01C6                     u437:
  1489  01C6  0BF6               	decfsz	??_LCD_SendCMD,f
  1490  01C7  29C6               	goto	u437
  1491  01C8  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1492  01C9  29C6               	goto	u437
  1493  01CA  29CB               	nop2
  1494  01CB                     l1059:
  1495                           
  1496                           ;LCD.c: 45:   RE1 = 0;
  1497  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1498  01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1499  01CD  1089               	bcf	9,1	;volatile
  1500  01CE                     l1061:
  1501                           
  1502                           ;LCD.c: 46:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1503  01CE  3003               	movlw	3
  1504  01CF  00F7               	movwf	??_LCD_SendCMD+1
  1505  01D0  3097               	movlw	151
  1506  01D1  00F6               	movwf	??_LCD_SendCMD
  1507  01D2                     u447:
  1508  01D2  0BF6               	decfsz	??_LCD_SendCMD,f
  1509  01D3  29D2               	goto	u447
  1510  01D4  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1511  01D5  29D2               	goto	u447
  1512  01D6  29D7               	nop2
  1513  01D7                     l1063:
  1514                           
  1515                           ;LCD.c: 49:         RE1 = 1;
  1516  01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1517  01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1518  01D9  1489               	bsf	9,1	;volatile
  1519  01DA                     l1065:
  1520                           
  1521                           ;LCD.c: 50:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1522  01DA  3003               	movlw	3
  1523  01DB  00F7               	movwf	??_LCD_SendCMD+1
  1524  01DC  3097               	movlw	151
  1525  01DD  00F6               	movwf	??_LCD_SendCMD
  1526  01DE                     u457:
  1527  01DE  0BF6               	decfsz	??_LCD_SendCMD,f
  1528  01DF  29DE               	goto	u457
  1529  01E0  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1530  01E1  29DE               	goto	u457
  1531  01E2  29E3               	nop2
  1532  01E3                     l1067:
  1533                           
  1534                           ;LCD.c: 52:         PORTD = ((COMMAND << 4) & 0xF0);
  1535  01E3  1283               	bcf	3,5	;RP0=0, select bank0
  1536  01E4  1303               	bcf	3,6	;RP1=0, select bank0
  1537  01E5  084B               	movf	LCD_SendCMD@COMMAND,w
  1538  01E6  00F6               	movwf	??_LCD_SendCMD
  1539  01E7  3003               	movlw	3
  1540  01E8                     u215:
  1541  01E8  1003               	clrc
  1542  01E9  0DF6               	rlf	??_LCD_SendCMD,f
  1543  01EA  3EFF               	addlw	-1
  1544  01EB  1D03               	skipz
  1545  01EC  29E8               	goto	u215
  1546  01ED  1003               	clrc
  1547  01EE  0D76               	rlf	??_LCD_SendCMD,w
  1548  01EF  39F0               	andlw	240
  1549  01F0  0088               	movwf	8	;volatile
  1550  01F1                     l1069:
  1551                           
  1552                           ;LCD.c: 53:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1553  01F1  3003               	movlw	3
  1554  01F2  00F7               	movwf	??_LCD_SendCMD+1
  1555  01F3  3097               	movlw	151
  1556  01F4  00F6               	movwf	??_LCD_SendCMD
  1557  01F5                     u467:
  1558  01F5  0BF6               	decfsz	??_LCD_SendCMD,f
  1559  01F6  29F5               	goto	u467
  1560  01F7  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1561  01F8  29F5               	goto	u467
  1562  01F9  29FA               	nop2
  1563  01FA                     l1071:
  1564                           
  1565                           ;LCD.c: 55:   RE1 = 0;
  1566  01FA  1283               	bcf	3,5	;RP0=0, select bank0
  1567  01FB  1303               	bcf	3,6	;RP1=0, select bank0
  1568  01FC  1089               	bcf	9,1	;volatile
  1569  01FD                     l1073:
  1570                           
  1571                           ;LCD.c: 56:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1572  01FD  3003               	movlw	3
  1573  01FE  00F7               	movwf	??_LCD_SendCMD+1
  1574  01FF  3097               	movlw	151
  1575  0200  00F6               	movwf	??_LCD_SendCMD
  1576  0201                     u477:
  1577  0201  0BF6               	decfsz	??_LCD_SendCMD,f
  1578  0202  2A01               	goto	u477
  1579  0203  0BF7               	decfsz	??_LCD_SendCMD+1,f
  1580  0204  2A01               	goto	u477
  1581  0205  2A06               	nop2
  1582  0206                     l102:
  1583  0206  0008               	return
  1584  0207                     __end_of_LCD_SendCMD:
  1585                           
  1586                           	psect	text6
  1587  030C                     __ptext6:	
  1588 ;; *************** function _LCD_DisStr *****************
  1589 ;; Defined at:
  1590 ;;		line 116 in file "LCD.c"
  1591 ;; Parameters:    Size  Location     Type
  1592 ;;  str             1    wreg     PTR unsigned char 
  1593 ;;		 -> Second_Row_Massage(16), First_Row_Massage(16), 
  1594 ;; Auto vars:     Size  Location     Type
  1595 ;;  str             1    2[BANK0 ] PTR unsigned char 
  1596 ;;		 -> Second_Row_Massage(16), First_Row_Massage(16), 
  1597 ;;  i               1    3[BANK0 ] unsigned char 
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  1    wreg      void 
  1600 ;; Registers used:
  1601 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         0       2       0       0       0
  1609 ;;      Temps:          0       1       0       0       0
  1610 ;;      Totals:         0       3       0       0       0
  1611 ;;Total ram usage:        3 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    2
  1614 ;; This function calls:
  1615 ;;		_LCD_DisChar
  1616 ;; This function is called by:
  1617 ;;		_LCD_DisStrRC
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620                           
  1621                           
  1622                           ;psect for function _LCD_DisStr
  1623  030C                     _LCD_DisStr:
  1624                           
  1625                           ;incstack = 0
  1626                           ; Regs used in _LCD_DisStr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1627                           ;LCD_DisStr@str stored from wreg
  1628  030C  1283               	bcf	3,5	;RP0=0, select bank0
  1629  030D  1303               	bcf	3,6	;RP1=0, select bank0
  1630  030E  00CD               	movwf	LCD_DisStr@str
  1631  030F                     l1107:
  1632                           
  1633                           ;LCD.c: 116: void LCD_DisStr(uint8_t* str);LCD.c: 117: {;LCD.c: 118:  uint8_t i=0;
  1634  030F  01CE               	clrf	LCD_DisStr@i
  1635                           
  1636                           ;LCD.c: 120:  while(str[i] != 0)
  1637  0310  2B22               	goto	l1113
  1638  0311                     l1109:
  1639                           
  1640                           ;LCD.c: 121:  {;LCD.c: 122:   LCD_DisChar(str[i]);
  1641  0311  084E               	movf	LCD_DisStr@i,w
  1642  0312  074D               	addwf	LCD_DisStr@str,w
  1643  0313  00CC               	movwf	??_LCD_DisStr
  1644  0314  084C               	movf	??_LCD_DisStr,w
  1645  0315  0084               	movwf	4
  1646  0316  0800               	movf	0,w
  1647  0317  120A  118A  2207  120A  118A  	fcall	_LCD_DisChar
  1648  031C                     l1111:
  1649                           
  1650                           ;LCD.c: 123:   i++;
  1651  031C  3001               	movlw	1
  1652  031D  00FF               	movwf	btemp+1
  1653  031E  087F               	movf	btemp+1,w
  1654  031F  1283               	bcf	3,5	;RP0=0, select bank0
  1655  0320  1303               	bcf	3,6	;RP1=0, select bank0
  1656  0321  07CE               	addwf	LCD_DisStr@i,f
  1657  0322                     l1113:
  1658                           
  1659                           ;LCD.c: 120:  while(str[i] != 0)
  1660  0322  084E               	movf	LCD_DisStr@i,w
  1661  0323  074D               	addwf	LCD_DisStr@str,w
  1662  0324  00CC               	movwf	??_LCD_DisStr
  1663  0325  084C               	movf	??_LCD_DisStr,w
  1664  0326  0084               	movwf	4
  1665  0327  1383               	bcf	3,7	;select IRP bank0
  1666  0328  0800               	movf	0,w
  1667  0329  1D03               	btfss	3,2
  1668  032A  2B2C               	goto	u241
  1669  032B  2B2D               	goto	u240
  1670  032C                     u241:
  1671  032C  2B11               	goto	l1109
  1672  032D                     u240:
  1673  032D                     l111:
  1674  032D  0008               	return
  1675  032E                     __end_of_LCD_DisStr:
  1676                           
  1677                           	psect	text7
  1678  0207                     __ptext7:	
  1679 ;; *************** function _LCD_DisChar *****************
  1680 ;; Defined at:
  1681 ;;		line 74 in file "LCD.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  DATA            1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  DATA            1    0[BANK0 ] unsigned char 
  1686 ;; Return value:  Size  Location     Type
  1687 ;;                  1    wreg      void 
  1688 ;; Registers used:
  1689 ;;		wreg, status,2, status,0
  1690 ;; Tracked objects:
  1691 ;;		On entry : 0/0
  1692 ;;		On exit  : 0/0
  1693 ;;		Unchanged: 0/0
  1694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1695 ;;      Params:         0       0       0       0       0
  1696 ;;      Locals:         0       1       0       0       0
  1697 ;;      Temps:          2       0       0       0       0
  1698 ;;      Totals:         2       1       0       0       0
  1699 ;;Total ram usage:        3 bytes
  1700 ;; Hardware stack levels used:    1
  1701 ;; Hardware stack levels required when called:    1
  1702 ;; This function calls:
  1703 ;;		Nothing
  1704 ;; This function is called by:
  1705 ;;		_main
  1706 ;;		_LCD_DisStr
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           
  1711                           ;psect for function _LCD_DisChar
  1712  0207                     _LCD_DisChar:
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _LCD_DisChar: [wreg+status,2+status,0]
  1716                           ;LCD_DisChar@DATA stored from wreg
  1717  0207  1283               	bcf	3,5	;RP0=0, select bank0
  1718  0208  1303               	bcf	3,6	;RP1=0, select bank0
  1719  0209  00CB               	movwf	LCD_DisChar@DATA
  1720  020A                     l1075:
  1721                           
  1722                           ;LCD.c: 74: void LCD_DisChar(uint8_t DATA);LCD.c: 75: {;LCD.c: 76:     RE2 = 1;
  1723  020A  1509               	bsf	9,2	;volatile
  1724  020B                     l1077:
  1725                           
  1726                           ;LCD.c: 77:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1727  020B  3003               	movlw	3
  1728  020C  00F7               	movwf	??_LCD_DisChar+1
  1729  020D  3097               	movlw	151
  1730  020E  00F6               	movwf	??_LCD_DisChar
  1731  020F                     u487:
  1732  020F  0BF6               	decfsz	??_LCD_DisChar,f
  1733  0210  2A0F               	goto	u487
  1734  0211  0BF7               	decfsz	??_LCD_DisChar+1,f
  1735  0212  2A0F               	goto	u487
  1736  0213  2A14               	nop2
  1737  0214                     l1079:
  1738                           
  1739                           ;LCD.c: 81:         RE1 = 1;
  1740  0214  1283               	bcf	3,5	;RP0=0, select bank0
  1741  0215  1303               	bcf	3,6	;RP1=0, select bank0
  1742  0216  1489               	bsf	9,1	;volatile
  1743                           
  1744                           ;LCD.c: 82:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1745  0217  3003               	movlw	3
  1746  0218  00F7               	movwf	??_LCD_DisChar+1
  1747  0219  3097               	movlw	151
  1748  021A  00F6               	movwf	??_LCD_DisChar
  1749  021B                     u497:
  1750  021B  0BF6               	decfsz	??_LCD_DisChar,f
  1751  021C  2A1B               	goto	u497
  1752  021D  0BF7               	decfsz	??_LCD_DisChar+1,f
  1753  021E  2A1B               	goto	u497
  1754  021F  2A20               	nop2
  1755  0220                     l1081:
  1756                           
  1757                           ;LCD.c: 84:         PORTD = (DATA & 0xF0);
  1758  0220  1283               	bcf	3,5	;RP0=0, select bank0
  1759  0221  1303               	bcf	3,6	;RP1=0, select bank0
  1760  0222  084B               	movf	LCD_DisChar@DATA,w
  1761  0223  39F0               	andlw	240
  1762  0224  0088               	movwf	8	;volatile
  1763  0225                     l1083:
  1764                           
  1765                           ;LCD.c: 85:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1766  0225  3003               	movlw	3
  1767  0226  00F7               	movwf	??_LCD_DisChar+1
  1768  0227  3097               	movlw	151
  1769  0228  00F6               	movwf	??_LCD_DisChar
  1770  0229                     u507:
  1771  0229  0BF6               	decfsz	??_LCD_DisChar,f
  1772  022A  2A29               	goto	u507
  1773  022B  0BF7               	decfsz	??_LCD_DisChar+1,f
  1774  022C  2A29               	goto	u507
  1775  022D  2A2E               	nop2
  1776  022E                     l1085:
  1777                           
  1778                           ;LCD.c: 87:         RE1 = 0;
  1779  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1780  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1781  0230  1089               	bcf	9,1	;volatile
  1782  0231                     l1087:
  1783                           
  1784                           ;LCD.c: 88:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1785  0231  3003               	movlw	3
  1786  0232  00F7               	movwf	??_LCD_DisChar+1
  1787  0233  3097               	movlw	151
  1788  0234  00F6               	movwf	??_LCD_DisChar
  1789  0235                     u517:
  1790  0235  0BF6               	decfsz	??_LCD_DisChar,f
  1791  0236  2A35               	goto	u517
  1792  0237  0BF7               	decfsz	??_LCD_DisChar+1,f
  1793  0238  2A35               	goto	u517
  1794  0239  2A3A               	nop2
  1795  023A                     l1089:
  1796                           
  1797                           ;LCD.c: 90:         RE1 = 1;
  1798  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1799  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1800  023C  1489               	bsf	9,1	;volatile
  1801  023D                     l1091:
  1802                           
  1803                           ;LCD.c: 91:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1804  023D  3003               	movlw	3
  1805  023E  00F7               	movwf	??_LCD_DisChar+1
  1806  023F  3097               	movlw	151
  1807  0240  00F6               	movwf	??_LCD_DisChar
  1808  0241                     u527:
  1809  0241  0BF6               	decfsz	??_LCD_DisChar,f
  1810  0242  2A41               	goto	u527
  1811  0243  0BF7               	decfsz	??_LCD_DisChar+1,f
  1812  0244  2A41               	goto	u527
  1813  0245  2A46               	nop2
  1814  0246                     l1093:
  1815                           
  1816                           ;LCD.c: 93:   PORTD = ((DATA << 4) & 0xF0);
  1817  0246  1283               	bcf	3,5	;RP0=0, select bank0
  1818  0247  1303               	bcf	3,6	;RP1=0, select bank0
  1819  0248  084B               	movf	LCD_DisChar@DATA,w
  1820  0249  00F6               	movwf	??_LCD_DisChar
  1821  024A  3003               	movlw	3
  1822  024B                     u225:
  1823  024B  1003               	clrc
  1824  024C  0DF6               	rlf	??_LCD_DisChar,f
  1825  024D  3EFF               	addlw	-1
  1826  024E  1D03               	skipz
  1827  024F  2A4B               	goto	u225
  1828  0250  1003               	clrc
  1829  0251  0D76               	rlf	??_LCD_DisChar,w
  1830  0252  39F0               	andlw	240
  1831  0253  0088               	movwf	8	;volatile
  1832  0254                     l1095:
  1833                           
  1834                           ;LCD.c: 94:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1835  0254  3003               	movlw	3
  1836  0255  00F7               	movwf	??_LCD_DisChar+1
  1837  0256  3097               	movlw	151
  1838  0257  00F6               	movwf	??_LCD_DisChar
  1839  0258                     u537:
  1840  0258  0BF6               	decfsz	??_LCD_DisChar,f
  1841  0259  2A58               	goto	u537
  1842  025A  0BF7               	decfsz	??_LCD_DisChar+1,f
  1843  025B  2A58               	goto	u537
  1844  025C  2A5D               	nop2
  1845  025D                     l1097:
  1846                           
  1847                           ;LCD.c: 96:   RE1 = 0;
  1848  025D  1283               	bcf	3,5	;RP0=0, select bank0
  1849  025E  1303               	bcf	3,6	;RP1=0, select bank0
  1850  025F  1089               	bcf	9,1	;volatile
  1851  0260                     l1099:
  1852                           
  1853                           ;LCD.c: 97:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1854  0260  3003               	movlw	3
  1855  0261  00F7               	movwf	??_LCD_DisChar+1
  1856  0262  3097               	movlw	151
  1857  0263  00F6               	movwf	??_LCD_DisChar
  1858  0264                     u547:
  1859  0264  0BF6               	decfsz	??_LCD_DisChar,f
  1860  0265  2A64               	goto	u547
  1861  0266  0BF7               	decfsz	??_LCD_DisChar+1,f
  1862  0267  2A64               	goto	u547
  1863  0268  2A69               	nop2
  1864  0269                     l105:
  1865  0269  0008               	return
  1866  026A                     __end_of_LCD_DisChar:
  1867                           
  1868                           	psect	text8
  1869  026A                     __ptext8:	
  1870 ;; *************** function _ISR *****************
  1871 ;; Defined at:
  1872 ;;		line 17 in file "main.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1886 ;;      Params:         0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0
  1888 ;;      Temps:          6       0       0       0       0
  1889 ;;      Totals:         6       0       0       0       0
  1890 ;;Total ram usage:        6 bytes
  1891 ;; Hardware stack levels used:    1
  1892 ;; This function calls:
  1893 ;;		Nothing
  1894 ;; This function is called by:
  1895 ;;		Interrupt level 1
  1896 ;; This function uses a non-reentrant model
  1897 ;;
  1898                           
  1899                           
  1900                           ;psect for function _ISR
  1901  026A                     _ISR:
  1902  026A                     i1l1147:
  1903                           
  1904                           ;main.c: 19:     if (INTF) {;main.c: 19:     if (INTF) {
  1905  026A  1C8B               	btfss	11,1	;volatile
  1906  026B  2A6D               	goto	u27_21
  1907  026C  2A6E               	goto	u27_20
  1908  026D                     u27_21:
  1909  026D  2AA6               	goto	i1l49
  1910  026E                     u27_20:
  1911  026E  2A98               	goto	i1l1163
  1912  026F                     i1l1151:
  1913                           
  1914                           ;main.c: 22:                 Counter[Field_Offset]++;;main.c: 22:                 Counte
      +                          r[Field_Offset]++;
  1915  026F  3001               	movlw	1
  1916  0270  00FF               	movwf	btemp+1
  1917  0271  0855               	movf	_Field_Offset,w
  1918  0272  3E41               	addlw	(low (_Counter| 0))& (0+255)
  1919  0273  0084               	movwf	4
  1920  0274  087F               	movf	btemp+1,w
  1921  0275  1383               	bcf	3,7	;select IRP bank0
  1922  0276  0780               	addwf	0,f
  1923  0277                     i1l1153:
  1924                           
  1925                           ;main.c: 23:                 if(Counter[Field_Offset] > '9');main.c: 23:                
      +                           if(Counter[Field_Offset] > '9')
  1926  0277  0855               	movf	_Field_Offset,w
  1927  0278  3E41               	addlw	(low (_Counter| 0))& (0+255)
  1928  0279  0084               	movwf	4
  1929  027A  303A               	movlw	58
  1930  027B  0200               	subwf	0,w
  1931  027C  1C03               	skipc
  1932  027D  2A7F               	goto	u28_21
  1933  027E  2A80               	goto	u28_20
  1934  027F                     u28_21:
  1935  027F  2A87               	goto	i1l1157
  1936  0280                     u28_20:
  1937  0280                     i1l1155:
  1938                           
  1939                           ;main.c: 24:                     Counter[Field_Offset]='0';;main.c: 24:                 
      +                              Counter[Field_Offset]='0';
  1940  0280  3030               	movlw	48
  1941  0281  00FF               	movwf	btemp+1
  1942  0282  0855               	movf	_Field_Offset,w
  1943  0283  3E41               	addlw	(low (_Counter| 0))& (0+255)
  1944  0284  0084               	movwf	4
  1945  0285  087F               	movf	btemp+1,w
  1946  0286  0080               	movwf	0
  1947  0287                     i1l1157:
  1948                           
  1949                           ;main.c: 25:                 if(Counter[Field_Offset] < '0');main.c: 25:                
      +                           if(Counter[Field_Offset] < '0')
  1950  0287  0855               	movf	_Field_Offset,w
  1951  0288  3E41               	addlw	(low (_Counter| 0))& (0+255)
  1952  0289  0084               	movwf	4
  1953  028A  3030               	movlw	48
  1954  028B  0200               	subwf	0,w
  1955  028C  1803               	skipnc
  1956  028D  2A8F               	goto	u29_21
  1957  028E  2A90               	goto	u29_20
  1958  028F                     u29_21:
  1959  028F  2AA5               	goto	i1l48
  1960  0290                     u29_20:
  1961  0290                     i1l1159:
  1962                           
  1963                           ;main.c: 26:                     Counter[Field_Offset]='9';;main.c: 26:                 
      +                              Counter[Field_Offset]='9';
  1964  0290  3039               	movlw	57
  1965  0291  00FF               	movwf	btemp+1
  1966  0292  0855               	movf	_Field_Offset,w
  1967  0293  3E41               	addlw	(low (_Counter| 0))& (0+255)
  1968  0294  0084               	movwf	4
  1969  0295  087F               	movf	btemp+1,w
  1970  0296  0080               	movwf	0
  1971  0297  2AA5               	goto	i1l48
  1972  0298                     i1l1163:
  1973  0298  0820               	movf	_Start_Preset_Status,w
  1974  0299  00F0               	movwf	??_ISR
  1975  029A  01F1               	clrf	??_ISR+1
  1976                           
  1977                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1978                           ; Switch size 1, requested type "simple"
  1979                           ; Number of cases is 1, Range of values is 0 to 0
  1980                           ; switch strategies available:
  1981                           ; Name         Instructions Cycles
  1982                           ; simple_byte            4     3 (average)
  1983                           ; direct_byte           11     8 (fixed)
  1984                           ; jumptable            260     6 (fixed)
  1985                           ;	Chosen strategy is simple_byte
  1986  029B  0871               	movf	??_ISR+1,w
  1987  029C  3A00               	xorlw	0	; case 0
  1988  029D  1903               	skipnz
  1989  029E  2AA0               	goto	i1l1371
  1990  029F  2AA5               	goto	i1l48
  1991  02A0                     i1l1371:
  1992                           
  1993                           ; Switch size 1, requested type "simple"
  1994                           ; Number of cases is 1, Range of values is 2 to 2
  1995                           ; switch strategies available:
  1996                           ; Name         Instructions Cycles
  1997                           ; simple_byte            4     3 (average)
  1998                           ; direct_byte           14    11 (fixed)
  1999                           ; jumptable            263     9 (fixed)
  2000                           ;	Chosen strategy is simple_byte
  2001  02A0  0870               	movf	??_ISR,w
  2002  02A1  3A02               	xorlw	2	; case 2
  2003  02A2  1903               	skipnz
  2004  02A3  2A6F               	goto	i1l1151
  2005  02A4  2AA5               	goto	i1l48
  2006  02A5                     i1l48:
  2007                           
  2008                           ;main.c: 29:         INTF = 0;;main.c: 29:         INTF = 0;
  2009  02A5  108B               	bcf	11,1	;volatile
  2010  02A6                     i1l49:
  2011  02A6  0875               	movf	??_ISR+5,w
  2012  02A7  00FF               	movwf	btemp+1
  2013  02A8  0874               	movf	??_ISR+4,w
  2014  02A9  008A               	movwf	10
  2015  02AA  0873               	movf	??_ISR+3,w
  2016  02AB  0084               	movwf	4
  2017  02AC  0E72               	swapf	(??_ISR+2)^(0+4294967168),w
  2018  02AD  0083               	movwf	3
  2019  02AE  0EFE               	swapf	btemp,f
  2020  02AF  0E7E               	swapf	btemp,w
  2021  02B0  0009               	retfie
  2022  02B1                     __end_of_ISR:
  2023  007E                     btemp	set	126	;btemp
  2024  007E                     wtemp0	set	126
  2025                           
  2026                           	psect	intentry
  2027  0004                     __pintentry:	
  2028                           ;incstack = 0
  2029                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1]
  2030                           
  2031  0004                     interrupt_function:
  2032  007E                     saved_w	set	btemp
  2033  0004  00FE               	movwf	btemp
  2034  0005  0E03               	swapf	3,w
  2035  0006  00F2               	movwf	??_ISR+2
  2036  0007  0804               	movf	4,w
  2037  0008  00F3               	movwf	??_ISR+3
  2038  0009  080A               	movf	10,w
  2039  000A  00F4               	movwf	??_ISR+4
  2040  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2041  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2042  000D  087F               	movf	btemp+1,w
  2043  000E  00F5               	movwf	??_ISR+5
  2044  000F  120A  118A  2A6A   	ljmp	_ISR
  2045                           
  2046                           	psect	config
  2047                           
  2048                           ;Config register CONFIG @ 0x2007
  2049                           ;	Oscillator Selection bits
  2050                           ;	FOSC = XT, XT oscillator
  2051                           ;	Watchdog Timer Enable bit
  2052                           ;	WDTE = OFF, WDT disabled
  2053                           ;	Power-up Timer Enable bit
  2054                           ;	PWRTE = ON, PWRT enabled
  2055                           ;	Brown-out Reset Enable bit
  2056                           ;	BOREN = ON, BOR enabled
  2057                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2058                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  2059                           ;	Data EEPROM Memory Code Protection bit
  2060                           ;	CPD = OFF, Data EEPROM code protection off
  2061                           ;	Flash Program Memory Write Enable bits
  2062                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2063                           ;	In-Circuit Debugger Mode bit
  2064                           ;	DEBUG = 0x1, unprogrammed default
  2065                           ;	Flash Program Memory Code Protection bit
  2066                           ;	CP = OFF, Code protection off
  2067  2007                     	org	8199
  2068  2007  3F71               	dw	16241

Data Sizes:
    Strings     11
    Constant    0
    Data        43
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8       8
    BANK0            80     10      54
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    strcmp@s2	PTR const unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    strcmp@s1	PTR const unsigned char  size(1) Largest target is 10
		 -> Counter(BANK0[10]), 

    LCD_DisStrRC@str	PTR unsigned char  size(1) Largest target is 16
		 -> Second_Row_Massage(BANK0[16]), First_Row_Massage(BANK0[16]), 

    LCD_DisStr@str	PTR unsigned char  size(1) Largest target is 16
		 -> Second_Row_Massage(BANK0[16]), First_Row_Massage(BANK0[16]), 


Critical Paths under _main in COMMON

    _main->_LCD_DisChar
    _main->_LCD_SendCMD
    _main->_strcmp
    _LCD_Init->_LCD_SendCMD
    _LCD_GotoRC->_LCD_SendCMD
    _LCD_DisStr->_LCD_DisChar

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_DisStrRC
    _LCD_Init->_LCD_SendCMD
    _LCD_DisStrRC->_LCD_DisStr
    _LCD_GotoRC->_LCD_SendCMD
    _LCD_DisStr->_LCD_DisChar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2160
                                              7 BANK0      3     3      0
                        _LCD_DisChar
                       _LCD_DisStrRC
                         _LCD_GotoRC
                           _LCD_Init
                        _LCD_SendCMD
                             _strcmp
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     4      2     200
                                              6 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      44
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (1) _LCD_DisStrRC                                         3     1      2    1115
                                              4 BANK0      3     1      2
                         _LCD_DisStr
                         _LCD_GotoRC
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoRC                                           2     1      1     512
                                              1 BANK0      2     1      1
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SendCMD                                          3     3      0      44
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _LCD_DisStr                                           3     3      0     167
                                              1 BANK0      3     3      0
                        _LCD_DisChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisChar                                          3     3      0      44
                                              6 COMMON     2     2      0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  6     6      0       0
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_DisChar
   _LCD_DisStrRC
     _LCD_DisStr
       _LCD_DisChar
     _LCD_GotoRC
       _LCD_SendCMD
   _LCD_GotoRC
     _LCD_SendCMD
   _LCD_Init
     _LCD_SendCMD
   _LCD_SendCMD
   _strcmp

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A      36       5       67.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      3E      12        0.0%
ABS                  0      0      3E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 05 07:41:57 2020

            ?_LCD_DisStr 0070             ?_LCD_DisChar 0070                        pc 0002  
            ?_LCD_GotoRC 004C                       l56 0057                       l73 0134  
                     l75 0138                       l99 034B                       fsr 0004  
          ?_LCD_DisStrRC 004F             ?_LCD_SendCMD 0070                      l102 0206  
                    l111 032D                      l105 0269                      l116 0365  
                    l119 037B                      l661 02E0                      _GIE 005F  
                    _RB3 0033                      _RB4 0034                      _RE1 0049  
                    _RE2 004A                      u300 0057                      u301 0056  
                    u230 0354                      u310 005B                      u215 01E8  
                    u231 0353                      u311 005A                      u240 032D  
                    u400 019A                      u320 0094                      u225 024B  
                    u241 032C                      u401 0199                      u321 0093  
                    u250 02D4                      u330 009F                      u251 02D3  
                    u331 009E                      u260 02DB                      u340 00AF  
                    u261 02DA                      u341 00AE                      u350 00BF  
                    u351 00BE                      u360 00D6                      u417 01AC  
                    u361 00D5                      u370 0138                      u507 0229  
                    u427 01B8                      u371 0137                      u380 013C  
                    _ISR 026A                      u517 0235                      u437 01C6  
                    u381 013B                      u390 0146                      u527 0241  
                    u447 01D2                      u391 0145                      u537 0258  
                    u457 01DE                      u547 0264                      u467 01F5  
                    u477 0201                      u487 020F                      u497 021B  
                    fsr0 0004                      indf 0000                     ?_ISR 0070  
                   l1101 034F                     l1111 031C                     l1103 0354  
                   l1113 0322                     l1105 035D                     l1121 0333  
                   l1201 006C                     l1107 030F                     l1051 01A8  
                   l1131 0373                     l1123 0339                     l1115 032E  
                   l1203 006F                     l1211 007F                     l1109 0311  
                   l1061 01CE                     l1053 01B1                     l1125 033F  
                   l1117 0331                     l1141 02D4                     l1133 02B4  
                   l1221 0095                     l1205 0074                     l1213 008F  
                   l1071 01FA                     l1063 01D7                     l1055 01BD  
                   l1127 0345                     l1119 0332                     l1143 02DB  
                   l1135 02B5                     l1231 00BF                     l1223 009F  
                   l1215 0094                     l1207 007A                     l1081 0220  
                   l1073 01FD                     l1065 01DA                     l1057 01C2  
                   l1049 01A7                     l1129 0369                     l1137 02B9  
                   l1241 00D9                     l1233 00C7                     l1225 00A6  
                   l1091 023D                     l1083 0225                     l1075 020A  
                   l1067 01E3                     l1059 01CB                     l1139 02BD  
                   l1251 0103                     l1243 00E3                     l1227 00AF  
                   l1235 00CC                     l1171 0028                     l1093 0246  
                   l1085 022E                     l1077 020B                     l1069 01F1  
                   l1261 012B                     l1253 010B                     l1245 00EB  
                   l1237 00D0                     l1229 00B6                     l1181 004C  
                   l1173 002D                     l1095 0254                     l1087 0231  
                   l1079 0214                     l1271 0147                     l1255 0113  
                   l1247 00F3                     l1239 00D7                     l1191 0051  
                   l1183 004D                     l1175 0037                     l1097 025D  
                   l1089 023A                     l1273 014D                     l1265 013C  
                   l1257 011B                     l1249 00FB                     l1193 0051  
                   l1185 004E                     l1177 0048                     l1099 0260  
                   l1275 015A                     l1267 0140                     l1259 0123  
                   l1283 017A                     l1187 004F                     l1179 004B  
                   l1277 0160                     l1269 0146                     l1285 018A  
                   l1197 005C                     l1189 0050                     l1287 019A  
                   l1279 016C                     l1367 0087                     l1199 0066  
                   l1369 0182                     STR_1 0395                     _PEIE 005E  
                   _INTE 005C                     _INTF 0059                     i1l48 02A5  
                   i1l49 02A6         LCD_GotoRC@column 004C              LCD_DisStr@i 004E  
                   _main 0028                     btemp 007E                     start 0012  
                  ??_ISR 0070           ??_LCD_DisStrRC 0078         __end_of_LCD_Init 034C  
                  ?_main 0070                    u27_20 026E                    u27_21 026D  
                  _PORTD 0008                    u28_20 0280                    u28_21 027F  
                  u29_20 0290                    u29_21 028F                    _TRISD 0088  
    __size_of_LCD_DisStr 0022                    main@i 0054      __size_of_LCD_GotoRC 001A  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 0015             __end_of_main 01A4                   ??_main 0052  
                 i1l1151 026F                   i1l1153 0277                   i1l1155 0280  
                 i1l1163 0298                   i1l1147 026A                   i1l1157 0287  
                 i1l1159 0290                   i1l1371 02A0                   _INTEDG 040E  
          LCD_DisStr@str 004D     __size_of_LCD_DisChar 0063                   _strcmp 02B1  
   __size_of_LCD_SendCMD 0063                   saved_w 007E     __end_of_LCD_DisStrRC 037C  
__end_of__initialization 0024                ?_LCD_Init 0070            LCD_GotoRC@row 004D  
         __pcstackCOMMON 0070             ??_LCD_DisStr 004C             __pidataBANK0 02E1  
           ??_LCD_GotoRC 0078        _First_Row_Massage 0031             _Field_Offset 0055  
             __pbssBANK0 0055       __end_of_LCD_DisStr 032E       __end_of_LCD_GotoRC 0366  
             ??_LCD_Init 0078      _Start_Preset_Status 0020               __pmaintext 0028  
             __pintentry 0004                  ?_strcmp 0076               __stringtab 038F  
                _Counter 0041                  __ptext1 02B1                  __ptext2 032E  
                __ptext3 0366                  __ptext4 034C                  __ptext5 01A4  
                __ptext6 030C                  __ptext7 0207                  __ptext8 026A  
        __size_of_strcmp 0030             __size_of_ISR 0047    __size_of_LCD_DisStrRC 0016  
   end_of_initialization 0024       LCD_DisStrRC@column 0050                  strcmp@r 004D  
           _LCD_DisStrRC 0366                _TRISBbits 0086                _TRISEbits 0089  
      __size_of_LCD_Init 001E            ??_LCD_DisChar 0076            ??_LCD_SendCMD 0076  
         __end_of_strcmp 02E1      start_initialization 0015              __end_of_ISR 02B1  
             init_fetch0 037C              __pdataBANK0 0020                 ??_strcmp 004B  
    __end_of_LCD_DisChar 026A                ___latbits 0002            __pcstackBANK0 004B  
    __end_of_LCD_SendCMD 0207                __pstrings 038F          LCD_DisChar@DATA 004B  
      interrupt_function 0004                 _LCD_Init 032E       _Second_Row_Massage 0021  
            _LCD_DisChar 0207              _LCD_SendCMD 01A4              __stringbase 0394  
        LCD_DisStrRC@row 004F          LCD_DisStrRC@str 0051       __end_of__stringtab 0395  
          __size_of_main 017C               _LCD_DisStr 030C               _LCD_GotoRC 034C  
               init_ram0 0380                 intlevel1 0000                stringcode 038F  
               strcmp@s1 004E                 strcmp@s2 0076                 stringdir 038F  
               stringtab 038F       LCD_SendCMD@COMMAND 004B  
