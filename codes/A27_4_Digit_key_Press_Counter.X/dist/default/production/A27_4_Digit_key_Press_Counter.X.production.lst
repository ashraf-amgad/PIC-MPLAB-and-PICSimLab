

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Nov 10 08:43:13 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    17                           	dabs	1,0x7E,2
    18  0000                     
    19                           ; Version 2.20
    20                           ; Generated 12/02/2020 GMT
    21                           ; 
    22                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    23                           ; All rights reserved.
    24                           ; 
    25                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    26                           ; 
    27                           ; Redistribution and use in source and binary forms, with or without modification, are
    28                           ; permitted provided that the following conditions are met:
    29                           ; 
    30                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    31                           ;        conditions and the following disclaimer.
    32                           ; 
    33                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    34                           ;        of conditions and the following disclaimer in the documentation and/or other
    35                           ;        materials provided with the distribution.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC16F877A Definitions
    51                           ; 
    52                           ; SFR Addresses
    53  0000                     	;# 
    54  0001                     	;# 
    55  0002                     	;# 
    56  0003                     	;# 
    57  0004                     	;# 
    58  0005                     	;# 
    59  0006                     	;# 
    60  0007                     	;# 
    61  0008                     	;# 
    62  0009                     	;# 
    63  000A                     	;# 
    64  000B                     	;# 
    65  000C                     	;# 
    66  000D                     	;# 
    67  000E                     	;# 
    68  000E                     	;# 
    69  000F                     	;# 
    70  0010                     	;# 
    71  0011                     	;# 
    72  0012                     	;# 
    73  0013                     	;# 
    74  0014                     	;# 
    75  0015                     	;# 
    76  0015                     	;# 
    77  0016                     	;# 
    78  0017                     	;# 
    79  0018                     	;# 
    80  0019                     	;# 
    81  001A                     	;# 
    82  001B                     	;# 
    83  001B                     	;# 
    84  001C                     	;# 
    85  001D                     	;# 
    86  001E                     	;# 
    87  001F                     	;# 
    88  0081                     	;# 
    89  0085                     	;# 
    90  0086                     	;# 
    91  0087                     	;# 
    92  0088                     	;# 
    93  0089                     	;# 
    94  008C                     	;# 
    95  008D                     	;# 
    96  008E                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0094                     	;# 
   101  0098                     	;# 
   102  0099                     	;# 
   103  009C                     	;# 
   104  009D                     	;# 
   105  009E                     	;# 
   106  009F                     	;# 
   107  010C                     	;# 
   108  010D                     	;# 
   109  010E                     	;# 
   110  010F                     	;# 
   111  018C                     	;# 
   112  018D                     	;# 
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  000E                     	;# 
   129  000F                     	;# 
   130  0010                     	;# 
   131  0011                     	;# 
   132  0012                     	;# 
   133  0013                     	;# 
   134  0014                     	;# 
   135  0015                     	;# 
   136  0015                     	;# 
   137  0016                     	;# 
   138  0017                     	;# 
   139  0018                     	;# 
   140  0019                     	;# 
   141  001A                     	;# 
   142  001B                     	;# 
   143  001B                     	;# 
   144  001C                     	;# 
   145  001D                     	;# 
   146  001E                     	;# 
   147  001F                     	;# 
   148  0081                     	;# 
   149  0085                     	;# 
   150  0086                     	;# 
   151  0087                     	;# 
   152  0088                     	;# 
   153  0089                     	;# 
   154  008C                     	;# 
   155  008D                     	;# 
   156  008E                     	;# 
   157  0091                     	;# 
   158  0092                     	;# 
   159  0093                     	;# 
   160  0094                     	;# 
   161  0098                     	;# 
   162  0099                     	;# 
   163  009C                     	;# 
   164  009D                     	;# 
   165  009E                     	;# 
   166  009F                     	;# 
   167  010C                     	;# 
   168  010D                     	;# 
   169  010E                     	;# 
   170  010F                     	;# 
   171  018C                     	;# 
   172  018D                     	;# 
   173  0000                     	;# 
   174  0001                     	;# 
   175  0002                     	;# 
   176  0003                     	;# 
   177  0004                     	;# 
   178  0005                     	;# 
   179  0006                     	;# 
   180  0007                     	;# 
   181  0008                     	;# 
   182  0009                     	;# 
   183  000A                     	;# 
   184  000B                     	;# 
   185  000C                     	;# 
   186  000D                     	;# 
   187  000E                     	;# 
   188  000E                     	;# 
   189  000F                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0013                     	;# 
   194  0014                     	;# 
   195  0015                     	;# 
   196  0015                     	;# 
   197  0016                     	;# 
   198  0017                     	;# 
   199  0018                     	;# 
   200  0019                     	;# 
   201  001A                     	;# 
   202  001B                     	;# 
   203  001B                     	;# 
   204  001C                     	;# 
   205  001D                     	;# 
   206  001E                     	;# 
   207  001F                     	;# 
   208  0081                     	;# 
   209  0085                     	;# 
   210  0086                     	;# 
   211  0087                     	;# 
   212  0088                     	;# 
   213  0089                     	;# 
   214  008C                     	;# 
   215  008D                     	;# 
   216  008E                     	;# 
   217  0091                     	;# 
   218  0092                     	;# 
   219  0093                     	;# 
   220  0094                     	;# 
   221  0098                     	;# 
   222  0099                     	;# 
   223  009C                     	;# 
   224  009D                     	;# 
   225  009E                     	;# 
   226  009F                     	;# 
   227  010C                     	;# 
   228  010D                     	;# 
   229  010E                     	;# 
   230  010F                     	;# 
   231  018C                     	;# 
   232  018D                     	;# 
   233                           
   234                           	psect	idataBANK0
   235  0535                     __pidataBANK0:
   236                           
   237                           ;initializer for _SSD
   238  0535  343F               	retlw	63
   239  0536  3406               	retlw	6
   240  0537  345B               	retlw	91
   241  0538  344F               	retlw	79
   242  0539  3466               	retlw	102
   243  053A  346D               	retlw	109
   244  053B  347D               	retlw	125
   245  053C  3407               	retlw	7
   246  053D  347F               	retlw	127
   247  053E  346F               	retlw	111
   248                           
   249                           ;initializer for _SSD_status
   250  053F  3401               	retlw	1
   251  000B                     _INTCONbits	set	11
   252  0008                     _PORTD	set	8
   253  0033                     _RB3	set	51
   254  0031                     _RB1	set	49
   255  002D                     _RA5	set	45
   256  002C                     _RA4	set	44
   257  002B                     _RA3	set	43
   258  002A                     _RA2	set	42
   259  0086                     _TRISBbits	set	134
   260  0085                     _TRISA	set	133
   261  0088                     _TRISD	set	136
   262  010C                     _EEDATA	set	268
   263  010D                     _EEADR	set	269
   264  018D                     _EECON2	set	397
   265  018C                     _EECON1bits	set	396
   266                           
   267                           	psect	cinit
   268  07E8                     start_initialization:	
   269                           ; #config settings
   270                           
   271  07E8                     __initialization:
   272                           
   273                           ; Initialize objects allocated to BANK0
   274  07E8  1383               	bcf	3,7	;select IRP bank0
   275  07E9  302B               	movlw	low (__pdataBANK0+11)
   276  07EA  00FD               	movwf	btemp+-1
   277  07EB  3005               	movlw	high __pidataBANK0
   278  07EC  00FE               	movwf	btemp
   279  07ED  3035               	movlw	low __pidataBANK0
   280  07EE  00FF               	movwf	btemp+1
   281  07EF  3020               	movlw	low __pdataBANK0
   282  07F0  0084               	movwf	4
   283  07F1  120A  118A  2555  120A  118A  	fcall	init_ram0
   284                           
   285                           ; Clear objects allocated to BANK0
   286  07F6  01B2               	clrf	__pbssBANK0& (0+127)
   287  07F7  01B3               	clrf	(__pbssBANK0+1)& (0+127)
   288  07F8  01B4               	clrf	(__pbssBANK0+2)& (0+127)
   289  07F9  01B5               	clrf	(__pbssBANK0+3)& (0+127)
   290  07FA  01B6               	clrf	(__pbssBANK0+4)& (0+127)
   291  07FB  01B7               	clrf	(__pbssBANK0+5)& (0+127)
   292  07FC                     end_of_initialization:	
   293                           ;End of C runtime variable initialization code
   294                           
   295  07FC                     __end_of__initialization:
   296  07FC  0183               	clrf	3
   297  07FD  120A  118A  2E3F   	ljmp	_main	;jump to C main() function
   298                           
   299                           	psect	bssBANK0
   300  0032                     __pbssBANK0:
   301  0032                     _SSD4_counter:
   302  0032                     	ds	1
   303  0033                     _SSD3_counter:
   304  0033                     	ds	1
   305  0034                     _SSD2_counter:
   306  0034                     	ds	1
   307  0035                     _SSD1_counter:
   308  0035                     	ds	1
   309  0036                     _Minute_Counter:
   310  0036                     	ds	1
   311  0037                     _Seconds_Counter:
   312  0037                     	ds	1
   313                           
   314                           	psect	dataBANK0
   315  0020                     __pdataBANK0:
   316  0020                     _SSD:
   317  0020                     	ds	10
   318  002A                     _SSD_status:
   319  002A                     	ds	1
   320                           
   321                           	psect	inittext
   322  0551                     init_fetch0:	
   323                           ;	Called with low address in FSR and high address in W
   324                           
   325  0551  087E               	movf	btemp,w
   326  0552  008A               	movwf	10
   327  0553  087F               	movf	btemp+1,w
   328  0554  0082               	movwf	2
   329  0555                     init_ram0:	
   330                           ;Called with:
   331                           ;	high address of idata address in btemp 
   332                           ;	low address of idata address in btemp+1 
   333                           ;	low address of data in FSR
   334                           ;	high address + 1 of data in btemp-1
   335                           
   336  0555  120A  118A  2551  120A  118A  	fcall	init_fetch0
   337  055A  0080               	movwf	0
   338  055B  0A84               	incf	4,f
   339  055C  0804               	movf	4,w
   340  055D  067D               	xorwf	btemp+-1,w
   341  055E  1903               	btfsc	3,2
   342  055F  3400               	retlw	0
   343  0560  0AFF               	incf	btemp+1,f
   344  0561  1903               	btfsc	3,2
   345  0562  0AFE               	incf	btemp,f
   346  0563  2D55               	goto	init_ram0
   347                           
   348                           	psect	cstackCOMMON
   349  0070                     __pcstackCOMMON:
   350  0070                     ?_EEPROM_Read:
   351  0070                     ??_EEPROM_Read:	
   352                           ; 1 bytes @ 0x0
   353                           
   354  0070                     ?_EEPROM_Write:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ?_main:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?___awdiv:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ?___awmod:	
   364                           ; 2 bytes @ 0x0
   365                           
   366  0070                     EEPROM_Write@Data:	
   367                           ; 2 bytes @ 0x0
   368                           
   369  0070                     EEPROM_Read@Address:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ___awdiv@divisor:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ___awmod@divisor:	
   376                           ; 2 bytes @ 0x0
   377                           
   378                           
   379                           ; 2 bytes @ 0x0
   380  0070                     	ds	1
   381  0071                     ??_EEPROM_Write:
   382  0071                     EEPROM_Write@Address:	
   383                           ; 1 bytes @ 0x1
   384                           
   385  0071                     EEPROM_Read@Data:	
   386                           ; 1 bytes @ 0x1
   387                           
   388                           
   389                           ; 1 bytes @ 0x1
   390  0071                     	ds	1
   391  0072                     ___awdiv@dividend:
   392  0072                     ___awmod@dividend:	
   393                           ; 2 bytes @ 0x2
   394                           
   395                           
   396                           ; 2 bytes @ 0x2
   397  0072                     	ds	2
   398  0074                     ??___awdiv:
   399  0074                     ??___awmod:	
   400                           ; 1 bytes @ 0x4
   401                           
   402  0074                     ___awdiv@counter:	
   403                           ; 1 bytes @ 0x4
   404                           
   405  0074                     ___awmod@counter:	
   406                           ; 1 bytes @ 0x4
   407                           
   408                           
   409                           ; 1 bytes @ 0x4
   410  0074                     	ds	1
   411  0075                     ___awdiv@sign:
   412  0075                     ___awmod@sign:	
   413                           ; 1 bytes @ 0x5
   414                           
   415                           
   416                           ; 1 bytes @ 0x5
   417  0075                     	ds	1
   418  0076                     ___awdiv@quotient:
   419                           
   420                           ; 2 bytes @ 0x6
   421  0076                     	ds	2
   422  0078                     ??_main:
   423                           
   424                           ; 1 bytes @ 0x8
   425  0078                     	ds	2
   426                           
   427                           	psect	cstackBANK0
   428  002B                     __pcstackBANK0:
   429  002B                     main@Time_Counter:
   430                           
   431                           ; 2 bytes @ 0x0
   432  002B                     	ds	2
   433  002D                     main@count:
   434                           
   435                           ; 4 bytes @ 0x2
   436  002D                     	ds	4
   437  0031                     main@EEPROM_Value:
   438                           
   439                           ; 1 bytes @ 0x6
   440  0031                     	ds	1
   441                           
   442                           	psect	maintext
   443  063F                     __pmaintext:	
   444 ;;
   445 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   446 ;;
   447 ;; *************** function _main *****************
   448 ;; Defined at:
   449 ;;		line 32 in file "main.c"
   450 ;; Parameters:    Size  Location     Type
   451 ;;		None
   452 ;; Auto vars:     Size  Location     Type
   453 ;;  count           4    2[BANK0 ] unsigned long 
   454 ;;  Time_Counter    2    0[BANK0 ] unsigned int 
   455 ;;  EEPROM_Value    1    6[BANK0 ] unsigned char 
   456 ;; Return value:  Size  Location     Type
   457 ;;                  1    wreg      void 
   458 ;; Registers used:
   459 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   460 ;; Tracked objects:
   461 ;;		On entry : B00/0
   462 ;;		On exit  : 0/0
   463 ;;		Unchanged: 0/0
   464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   465 ;;      Params:         0       0       0       0       0
   466 ;;      Locals:         0       7       0       0       0
   467 ;;      Temps:          2       0       0       0       0
   468 ;;      Totals:         2       7       0       0       0
   469 ;;Total ram usage:        9 bytes
   470 ;; Hardware stack levels required when called:    1
   471 ;; This function calls:
   472 ;;		_EEPROM_Read
   473 ;;		_EEPROM_Write
   474 ;;		___awdiv
   475 ;;		___awmod
   476 ;; This function is called by:
   477 ;;		Startup code after reset
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           
   482                           ;psect for function _main
   483  063F                     _main:
   484  063F                     l1051:	
   485                           ;incstack = 0
   486                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   487                           
   488                           
   489                           ;main.c: 35:     TRISD = 0x00;
   490  063F  1683               	bsf	3,5	;RP0=1, select bank1
   491  0640  1303               	bcf	3,6	;RP1=0, select bank1
   492  0641  0188               	clrf	8	;volatile
   493                           
   494                           ;main.c: 36:     TRISA = 0;
   495  0642  0185               	clrf	5	;volatile
   496  0643                     l1053:
   497                           
   498                           ;main.c: 37:     RA2 = 0;
   499  0643  1283               	bcf	3,5	;RP0=0, select bank0
   500  0644  1303               	bcf	3,6	;RP1=0, select bank0
   501  0645  1105               	bcf	5,2	;volatile
   502  0646                     l1055:
   503                           
   504                           ;main.c: 38:     RA3 = 0;
   505  0646  1185               	bcf	5,3	;volatile
   506  0647                     l1057:
   507                           
   508                           ;main.c: 39:     RA4 = 0;
   509  0647  1205               	bcf	5,4	;volatile
   510  0648                     l1059:
   511                           
   512                           ;main.c: 40:     RA5 = 0;
   513  0648  1285               	bcf	5,5	;volatile
   514  0649                     l1061:
   515                           
   516                           ;main.c: 41:     PORTD = SSD[0];
   517  0649  0820               	movf	_SSD,w
   518  064A  0088               	movwf	8	;volatile
   519  064B                     l1063:
   520                           
   521                           ;main.c: 43:     TRISBbits.TRISB1 = 1;
   522  064B  1683               	bsf	3,5	;RP0=1, select bank1
   523  064C  1303               	bcf	3,6	;RP1=0, select bank1
   524  064D  1486               	bsf	6,1	;volatile
   525  064E                     l1065:
   526                           
   527                           ;main.c: 44:     TRISBbits.TRISB3 = 1;
   528  064E  1586               	bsf	6,3	;volatile
   529  064F                     l1067:
   530                           
   531                           ;main.c: 46:     uint8_t EEPROM_Value = EEPROM_Read(0x00);
   532  064F  3000               	movlw	0
   533  0650  120A  118A  2540  120A  118A  	fcall	_EEPROM_Read
   534  0655  00FF               	movwf	btemp+1
   535  0656  087F               	movf	btemp+1,w
   536  0657  1283               	bcf	3,5	;RP0=0, select bank0
   537  0658  1303               	bcf	3,6	;RP1=0, select bank0
   538  0659  00B1               	movwf	main@EEPROM_Value
   539  065A                     l1069:
   540                           
   541                           ;main.c: 49:     if (EEPROM_Value == 1) {
   542  065A  0331               	decf	main@EEPROM_Value,w
   543  065B  1D03               	btfss	3,2
   544  065C  2E5E               	goto	u521
   545  065D  2E5F               	goto	u520
   546  065E                     u521:
   547  065E  2E7E               	goto	l1077
   548  065F                     u520:
   549  065F                     l1071:
   550                           
   551                           ;main.c: 50:         EEPROM_Value = EEPROM_Read(0x01);
   552  065F  3001               	movlw	1
   553  0660  120A  118A  2540  120A  118A  	fcall	_EEPROM_Read
   554  0665  00FF               	movwf	btemp+1
   555  0666  087F               	movf	btemp+1,w
   556  0667  1283               	bcf	3,5	;RP0=0, select bank0
   557  0668  1303               	bcf	3,6	;RP1=0, select bank0
   558  0669  00B1               	movwf	main@EEPROM_Value
   559  066A                     l1073:
   560                           
   561                           ;main.c: 51:         Seconds_Counter = EEPROM_Value;
   562  066A  0831               	movf	main@EEPROM_Value,w
   563  066B  00FF               	movwf	btemp+1
   564  066C  087F               	movf	btemp+1,w
   565  066D  00B7               	movwf	_Seconds_Counter
   566  066E                     l1075:
   567                           
   568                           ;main.c: 53:         EEPROM_Value = EEPROM_Read(0x02);
   569  066E  3002               	movlw	2
   570  066F  120A  118A  2540  120A  118A  	fcall	_EEPROM_Read
   571  0674  00FF               	movwf	btemp+1
   572  0675  087F               	movf	btemp+1,w
   573  0676  1283               	bcf	3,5	;RP0=0, select bank0
   574  0677  1303               	bcf	3,6	;RP1=0, select bank0
   575  0678  00B1               	movwf	main@EEPROM_Value
   576                           
   577                           ;main.c: 54:         Minute_Counter = EEPROM_Value;
   578  0679  0831               	movf	main@EEPROM_Value,w
   579  067A  00FF               	movwf	btemp+1
   580  067B  087F               	movf	btemp+1,w
   581  067C  00B6               	movwf	_Minute_Counter
   582                           
   583                           ;main.c: 55:     } else {
   584  067D  2E80               	goto	l48
   585  067E                     l1077:
   586                           
   587                           ;main.c: 56:         Seconds_Counter = 0;
   588  067E  01B7               	clrf	_Seconds_Counter
   589                           
   590                           ;main.c: 57:         Minute_Counter = 0;
   591  067F  01B6               	clrf	_Minute_Counter
   592  0680                     l48:	
   593                           ;main.c: 58:     }
   594                           
   595                           
   596                           ;main.c: 61:     uint16_t Time_Counter = 0;
   597  0680  01AB               	clrf	main@Time_Counter
   598  0681  01AC               	clrf	main@Time_Counter+1
   599  0682                     l1079:
   600                           
   601                           ;main.c: 62:     uint32_t count = 0;
   602  0682  3000               	movlw	0
   603  0683  00B0               	movwf	main@count+3
   604  0684  3000               	movlw	0
   605  0685  00AF               	movwf	main@count+2
   606  0686  3000               	movlw	0
   607  0687  00AE               	movwf	main@count+1
   608  0688  3000               	movlw	0
   609  0689  00AD               	movwf	main@count
   610  068A                     l1081:
   611                           
   612                           ;main.c: 66:         if (Time_Counter == 400) {
   613  068A  3090               	movlw	144
   614  068B  062B               	xorwf	main@Time_Counter,w
   615  068C  1D03               	skipz
   616  068D  2E92               	goto	u531
   617  068E  032C               	decf	main@Time_Counter+1,w
   618  068F  1D03               	btfss	3,2
   619  0690  2E92               	goto	u531
   620  0691  2E93               	goto	u530
   621  0692                     u531:
   622  0692  2E99               	goto	l1087
   623  0693                     u530:
   624  0693                     l1083:
   625                           
   626                           ;main.c: 67:             Seconds_Counter++;
   627  0693  3001               	movlw	1
   628  0694  00FF               	movwf	btemp+1
   629  0695  087F               	movf	btemp+1,w
   630  0696  07B7               	addwf	_Seconds_Counter,f
   631  0697                     l1085:
   632                           
   633                           ;main.c: 68:             Time_Counter = 0;
   634  0697  01AB               	clrf	main@Time_Counter
   635  0698  01AC               	clrf	main@Time_Counter+1
   636  0699                     l1087:
   637                           
   638                           ;main.c: 71:         if (Seconds_Counter == 99) {
   639  0699  3063               	movlw	99
   640  069A  0637               	xorwf	_Seconds_Counter,w
   641  069B  1D03               	btfss	3,2
   642  069C  2E9E               	goto	u541
   643  069D  2E9F               	goto	u540
   644  069E                     u541:
   645  069E  2EA4               	goto	l1093
   646  069F                     u540:
   647  069F                     l1089:
   648                           
   649                           ;main.c: 72:             Minute_Counter++;
   650  069F  3001               	movlw	1
   651  06A0  00FF               	movwf	btemp+1
   652  06A1  087F               	movf	btemp+1,w
   653  06A2  07B6               	addwf	_Minute_Counter,f
   654  06A3                     l1091:
   655                           
   656                           ;main.c: 73:             Seconds_Counter = 0;
   657  06A3  01B7               	clrf	_Seconds_Counter
   658  06A4                     l1093:
   659                           
   660                           ;main.c: 76:         if (Minute_Counter == 99) {
   661  06A4  3063               	movlw	99
   662  06A5  0636               	xorwf	_Minute_Counter,w
   663  06A6  1D03               	btfss	3,2
   664  06A7  2EA9               	goto	u551
   665  06A8  2EAA               	goto	u550
   666  06A9                     u551:
   667  06A9  2EAB               	goto	l1097
   668  06AA                     u550:
   669  06AA                     l1095:
   670                           
   671                           ;main.c: 77:             Minute_Counter = 0;
   672  06AA  01B6               	clrf	_Minute_Counter
   673  06AB                     l1097:
   674                           
   675                           ;main.c: 80:         if (RB1 == 0) {
   676  06AB  1886               	btfsc	6,1	;volatile
   677  06AC  2EAE               	goto	u561
   678  06AD  2EAF               	goto	u560
   679  06AE                     u561:
   680  06AE  2ED3               	goto	l1107
   681  06AF                     u560:
   682  06AF                     l54:
   683  06AF  1C86               	btfss	6,1	;volatile
   684  06B0  2EB2               	goto	u571
   685  06B1  2EB3               	goto	u570
   686  06B2                     u571:
   687  06B2  2EAF               	goto	l54
   688  06B3                     u570:
   689  06B3                     l1101:
   690                           
   691                           ;main.c: 82:             EEPROM_Write(0, 0x01);
   692  06B3  01F0               	clrf	EEPROM_Write@Data
   693  06B4  0AF0               	incf	EEPROM_Write@Data,f
   694  06B5  3000               	movlw	0
   695  06B6  120A  118A  2564  120A  118A  	fcall	_EEPROM_Write
   696  06BB                     l1103:
   697                           
   698                           ;main.c: 83:             EEPROM_Write(1, Seconds_Counter);
   699  06BB  1283               	bcf	3,5	;RP0=0, select bank0
   700  06BC  1303               	bcf	3,6	;RP1=0, select bank0
   701  06BD  0837               	movf	_Seconds_Counter,w
   702  06BE  00FF               	movwf	btemp+1
   703  06BF  087F               	movf	btemp+1,w
   704  06C0  00F0               	movwf	EEPROM_Write@Data
   705  06C1  3001               	movlw	1
   706  06C2  120A  118A  2564  120A  118A  	fcall	_EEPROM_Write
   707  06C7                     l1105:
   708                           
   709                           ;main.c: 84:             EEPROM_Write(2, Minute_Counter);
   710  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   711  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   712  06C9  0836               	movf	_Minute_Counter,w
   713  06CA  00FF               	movwf	btemp+1
   714  06CB  087F               	movf	btemp+1,w
   715  06CC  00F0               	movwf	EEPROM_Write@Data
   716  06CD  3002               	movlw	2
   717  06CE  120A  118A  2564  120A  118A  	fcall	_EEPROM_Write
   718  06D3                     l1107:
   719                           
   720                           ;main.c: 87:         if (RB3 == 0) {
   721  06D3  1283               	bcf	3,5	;RP0=0, select bank0
   722  06D4  1303               	bcf	3,6	;RP1=0, select bank0
   723  06D5  1986               	btfsc	6,3	;volatile
   724  06D6  2ED8               	goto	u581
   725  06D7  2ED9               	goto	u580
   726  06D8                     u581:
   727  06D8  2EEC               	goto	l1115
   728  06D9                     u580:
   729  06D9  2EE8               	goto	l1113
   730  06DA                     l1111:
   731                           
   732                           ;main.c: 89:                 count++;
   733  06DA  3001               	movlw	1
   734  06DB  07AD               	addwf	main@count,f
   735  06DC  3000               	movlw	0
   736  06DD  1803               	skipnc
   737  06DE  3001               	movlw	1
   738  06DF  07AE               	addwf	main@count+1,f
   739  06E0  3000               	movlw	0
   740  06E1  1803               	skipnc
   741  06E2  3001               	movlw	1
   742  06E3  07AF               	addwf	main@count+2,f
   743  06E4  3000               	movlw	0
   744  06E5  1803               	skipnc
   745  06E6  3001               	movlw	1
   746  06E7  07B0               	addwf	main@count+3,f
   747  06E8                     l1113:
   748                           
   749                           ;main.c: 88:             while (RB3 == 0) {
   750  06E8  1D86               	btfss	6,3	;volatile
   751  06E9  2EEB               	goto	u591
   752  06EA  2EEC               	goto	u590
   753  06EB                     u591:
   754  06EB  2EDA               	goto	l1111
   755  06EC                     u590:
   756  06EC                     l1115:
   757                           
   758                           ;main.c: 93:         if (count > 0x2ffff) {
   759  06EC  0830               	movf	main@count+3,w
   760  06ED  1D03               	btfss	3,2
   761  06EE  2EFF               	goto	u600
   762  06EF  3003               	movlw	3
   763  06F0  022F               	subwf	main@count+2,w
   764  06F1  1D03               	skipz
   765  06F2  2EFB               	goto	u603
   766  06F3  3000               	movlw	0
   767  06F4  022E               	subwf	main@count+1,w
   768  06F5  1D03               	skipz
   769  06F6  2EFB               	goto	u603
   770  06F7  3000               	movlw	0
   771  06F8  022D               	subwf	main@count,w
   772  06F9  1D03               	skipz
   773  06FA  2EFB               	goto	u603
   774  06FB                     u603:
   775  06FB  1C03               	btfss	3,0
   776  06FC  2EFE               	goto	u601
   777  06FD  2EFF               	goto	u600
   778  06FE                     u601:
   779  06FE  2F0A               	goto	l1121
   780  06FF                     u600:
   781  06FF                     l1117:
   782                           
   783                           ;main.c: 94:             Seconds_Counter = 0;
   784  06FF  01B7               	clrf	_Seconds_Counter
   785                           
   786                           ;main.c: 95:             Minute_Counter = 0;
   787  0700  01B6               	clrf	_Minute_Counter
   788  0701                     l1119:
   789                           
   790                           ;main.c: 96:             count=0;
   791  0701  3000               	movlw	0
   792  0702  00B0               	movwf	main@count+3
   793  0703  3000               	movlw	0
   794  0704  00AF               	movwf	main@count+2
   795  0705  3000               	movlw	0
   796  0706  00AE               	movwf	main@count+1
   797  0707  3000               	movlw	0
   798  0708  00AD               	movwf	main@count
   799                           
   800                           ;main.c: 97:         } else if ((count > 0x00) && (count < 0x2ffff) ) {
   801  0709  2F2A               	goto	l1129
   802  070A                     l1121:
   803  070A  0830               	movf	main@count+3,w
   804  070B  042F               	iorwf	main@count+2,w
   805  070C  042E               	iorwf	main@count+1,w
   806  070D  042D               	iorwf	main@count,w
   807  070E  1903               	skipnz
   808  070F  2F11               	goto	u611
   809  0710  2F12               	goto	u610
   810  0711                     u611:
   811  0711  2F2A               	goto	l1129
   812  0712                     u610:
   813  0712                     l1123:
   814  0712  0830               	movf	main@count+3,w
   815  0713  1D03               	btfss	3,2
   816  0714  2F24               	goto	u621
   817  0715  3002               	movlw	2
   818  0716  022F               	subwf	main@count+2,w
   819  0717  1D03               	skipz
   820  0718  2F21               	goto	u623
   821  0719  30FF               	movlw	255
   822  071A  022E               	subwf	main@count+1,w
   823  071B  1D03               	skipz
   824  071C  2F21               	goto	u623
   825  071D  30FF               	movlw	255
   826  071E  022D               	subwf	main@count,w
   827  071F  1D03               	skipz
   828  0720  2F21               	goto	u623
   829  0721                     u623:
   830  0721  1803               	btfsc	3,0
   831  0722  2F24               	goto	u621
   832  0723  2F25               	goto	u620
   833  0724                     u621:
   834  0724  2F2A               	goto	l1129
   835  0725                     u620:
   836  0725                     l1125:
   837                           
   838                           ;main.c: 98:             Seconds_Counter++;
   839  0725  3001               	movlw	1
   840  0726  00FF               	movwf	btemp+1
   841  0727  087F               	movf	btemp+1,w
   842  0728  07B7               	addwf	_Seconds_Counter,f
   843  0729  2F01               	goto	l1119
   844  072A                     l1129:
   845                           
   846                           ;main.c: 104:         SSD1_counter = (Seconds_Counter % 10);
   847  072A  300A               	movlw	10
   848  072B  00F0               	movwf	___awmod@divisor
   849  072C  3000               	movlw	0
   850  072D  00F1               	movwf	___awmod@divisor+1
   851  072E  0837               	movf	_Seconds_Counter,w
   852  072F  00F8               	movwf	??_main
   853  0730  01F9               	clrf	??_main+1
   854  0731  0878               	movf	??_main,w
   855  0732  00F2               	movwf	___awmod@dividend
   856  0733  0879               	movf	??_main+1,w
   857  0734  00F3               	movwf	___awmod@dividend+1
   858  0735  120A  118A  257F  120A  118A  	fcall	___awmod
   859  073A  0870               	movf	?___awmod,w
   860  073B  00FF               	movwf	btemp+1
   861  073C  087F               	movf	btemp+1,w
   862  073D  1283               	bcf	3,5	;RP0=0, select bank0
   863  073E  1303               	bcf	3,6	;RP1=0, select bank0
   864  073F  00B5               	movwf	_SSD1_counter
   865  0740                     l1131:
   866                           
   867                           ;main.c: 105:         SSD2_counter = (Seconds_Counter / 10);
   868  0740  300A               	movlw	10
   869  0741  00F0               	movwf	___awdiv@divisor
   870  0742  3000               	movlw	0
   871  0743  00F1               	movwf	___awdiv@divisor+1
   872  0744  0837               	movf	_Seconds_Counter,w
   873  0745  00F8               	movwf	??_main
   874  0746  01F9               	clrf	??_main+1
   875  0747  0878               	movf	??_main,w
   876  0748  00F2               	movwf	___awdiv@dividend
   877  0749  0879               	movf	??_main+1,w
   878  074A  00F3               	movwf	___awdiv@dividend+1
   879  074B  120A  118A  25D8  120A  118A  	fcall	___awdiv
   880  0750  0870               	movf	?___awdiv,w
   881  0751  00FF               	movwf	btemp+1
   882  0752  087F               	movf	btemp+1,w
   883  0753  1283               	bcf	3,5	;RP0=0, select bank0
   884  0754  1303               	bcf	3,6	;RP1=0, select bank0
   885  0755  00B4               	movwf	_SSD2_counter
   886  0756                     l1133:
   887                           
   888                           ;main.c: 106:         SSD3_counter = (Minute_Counter % 10);
   889  0756  300A               	movlw	10
   890  0757  00F0               	movwf	___awmod@divisor
   891  0758  3000               	movlw	0
   892  0759  00F1               	movwf	___awmod@divisor+1
   893  075A  0836               	movf	_Minute_Counter,w
   894  075B  00F8               	movwf	??_main
   895  075C  01F9               	clrf	??_main+1
   896  075D  0878               	movf	??_main,w
   897  075E  00F2               	movwf	___awmod@dividend
   898  075F  0879               	movf	??_main+1,w
   899  0760  00F3               	movwf	___awmod@dividend+1
   900  0761  120A  118A  257F  120A  118A  	fcall	___awmod
   901  0766  0870               	movf	?___awmod,w
   902  0767  00FF               	movwf	btemp+1
   903  0768  087F               	movf	btemp+1,w
   904  0769  1283               	bcf	3,5	;RP0=0, select bank0
   905  076A  1303               	bcf	3,6	;RP1=0, select bank0
   906  076B  00B3               	movwf	_SSD3_counter
   907  076C                     l1135:
   908                           
   909                           ;main.c: 107:         SSD4_counter = (Minute_Counter / 10);
   910  076C  300A               	movlw	10
   911  076D  00F0               	movwf	___awdiv@divisor
   912  076E  3000               	movlw	0
   913  076F  00F1               	movwf	___awdiv@divisor+1
   914  0770  0836               	movf	_Minute_Counter,w
   915  0771  00F8               	movwf	??_main
   916  0772  01F9               	clrf	??_main+1
   917  0773  0878               	movf	??_main,w
   918  0774  00F2               	movwf	___awdiv@dividend
   919  0775  0879               	movf	??_main+1,w
   920  0776  00F3               	movwf	___awdiv@dividend+1
   921  0777  120A  118A  25D8  120A  118A  	fcall	___awdiv
   922  077C  0870               	movf	?___awdiv,w
   923  077D  00FF               	movwf	btemp+1
   924  077E  087F               	movf	btemp+1,w
   925  077F  1283               	bcf	3,5	;RP0=0, select bank0
   926  0780  1303               	bcf	3,6	;RP1=0, select bank0
   927  0781  00B2               	movwf	_SSD4_counter
   928                           
   929                           ;main.c: 110:         switch (SSD_status) {
   930  0782  2FBD               	goto	l1155
   931  0783                     l65:	
   932                           ;main.c: 111:             case 1:
   933                           
   934                           
   935                           ;main.c: 112:                 RA2 = 0;
   936  0783  1105               	bcf	5,2	;volatile
   937                           
   938                           ;main.c: 113:                 RA3 = 0;
   939  0784  1185               	bcf	5,3	;volatile
   940                           
   941                           ;main.c: 114:                 RA4 = 0;
   942  0785  1205               	bcf	5,4	;volatile
   943                           
   944                           ;main.c: 115:                 RA5 = 1;
   945  0786  1685               	bsf	5,5	;volatile
   946  0787                     l1137:
   947                           
   948                           ;main.c: 116:                 PORTD = SSD[SSD1_counter];
   949  0787  0835               	movf	_SSD1_counter,w
   950  0788  3E20               	addlw	(low (_SSD| 0))& (0+255)
   951  0789  0084               	movwf	4
   952  078A  1383               	bcf	3,7	;select IRP bank0
   953  078B  0800               	movf	0,w
   954  078C  0088               	movwf	8	;volatile
   955  078D                     l1139:
   956                           
   957                           ;main.c: 117:                 SSD_status = 2;
   958  078D  3002               	movlw	2
   959  078E  00FF               	movwf	btemp+1
   960  078F  087F               	movf	btemp+1,w
   961  0790  00AA               	movwf	_SSD_status
   962                           
   963                           ;main.c: 118:                 break;
   964  0791  2FD3               	goto	l1157
   965  0792                     l67:	
   966                           ;main.c: 120:             case 2:
   967                           
   968                           
   969                           ;main.c: 121:                 RA2 = 0;
   970  0792  1105               	bcf	5,2	;volatile
   971                           
   972                           ;main.c: 122:                 RA3 = 0;
   973  0793  1185               	bcf	5,3	;volatile
   974                           
   975                           ;main.c: 123:                 RA4 = 1;
   976  0794  1605               	bsf	5,4	;volatile
   977                           
   978                           ;main.c: 124:                 RA5 = 0;
   979  0795  1285               	bcf	5,5	;volatile
   980  0796                     l1141:
   981                           
   982                           ;main.c: 125:                 PORTD = SSD[SSD2_counter];
   983  0796  0834               	movf	_SSD2_counter,w
   984  0797  3E20               	addlw	(low (_SSD| 0))& (0+255)
   985  0798  0084               	movwf	4
   986  0799  1383               	bcf	3,7	;select IRP bank0
   987  079A  0800               	movf	0,w
   988  079B  0088               	movwf	8	;volatile
   989  079C                     l1143:
   990                           
   991                           ;main.c: 126:                 SSD_status = 3;
   992  079C  3003               	movlw	3
   993  079D  00FF               	movwf	btemp+1
   994  079E  087F               	movf	btemp+1,w
   995  079F  00AA               	movwf	_SSD_status
   996                           
   997                           ;main.c: 128:                 break;
   998  07A0  2FD3               	goto	l1157
   999  07A1                     l68:	
  1000                           ;main.c: 130:             case 3:
  1001                           
  1002                           
  1003                           ;main.c: 131:                 RA2 = 0;
  1004  07A1  1105               	bcf	5,2	;volatile
  1005                           
  1006                           ;main.c: 132:                 RA3 = 1;
  1007  07A2  1585               	bsf	5,3	;volatile
  1008                           
  1009                           ;main.c: 133:                 RA4 = 0;
  1010  07A3  1205               	bcf	5,4	;volatile
  1011                           
  1012                           ;main.c: 134:                 RA5 = 0;
  1013  07A4  1285               	bcf	5,5	;volatile
  1014  07A5                     l1145:
  1015                           
  1016                           ;main.c: 135:                 PORTD = SSD[SSD3_counter];
  1017  07A5  0833               	movf	_SSD3_counter,w
  1018  07A6  3E20               	addlw	(low (_SSD| 0))& (0+255)
  1019  07A7  0084               	movwf	4
  1020  07A8  1383               	bcf	3,7	;select IRP bank0
  1021  07A9  0800               	movf	0,w
  1022  07AA  0088               	movwf	8	;volatile
  1023  07AB                     l1147:
  1024                           
  1025                           ;main.c: 136:                 SSD_status = 4;
  1026  07AB  3004               	movlw	4
  1027  07AC  00FF               	movwf	btemp+1
  1028  07AD  087F               	movf	btemp+1,w
  1029  07AE  00AA               	movwf	_SSD_status
  1030                           
  1031                           ;main.c: 137:                 break;
  1032  07AF  2FD3               	goto	l1157
  1033  07B0                     l69:	
  1034                           ;main.c: 139:             case 4:
  1035                           
  1036                           
  1037                           ;main.c: 140:                 RA2 = 1;
  1038  07B0  1505               	bsf	5,2	;volatile
  1039                           
  1040                           ;main.c: 141:                 RA3 = 0;
  1041  07B1  1185               	bcf	5,3	;volatile
  1042                           
  1043                           ;main.c: 142:                 RA4 = 0;
  1044  07B2  1205               	bcf	5,4	;volatile
  1045                           
  1046                           ;main.c: 143:                 RA5 = 0;
  1047  07B3  1285               	bcf	5,5	;volatile
  1048  07B4                     l1149:
  1049                           
  1050                           ;main.c: 144:                 PORTD = SSD[SSD4_counter];
  1051  07B4  0832               	movf	_SSD4_counter,w
  1052  07B5  3E20               	addlw	(low (_SSD| 0))& (0+255)
  1053  07B6  0084               	movwf	4
  1054  07B7  1383               	bcf	3,7	;select IRP bank0
  1055  07B8  0800               	movf	0,w
  1056  07B9  0088               	movwf	8	;volatile
  1057  07BA                     l1151:
  1058                           
  1059                           ;main.c: 145:                 SSD_status = 1;
  1060  07BA  01AA               	clrf	_SSD_status
  1061  07BB  0AAA               	incf	_SSD_status,f
  1062                           
  1063                           ;main.c: 146:                 break;
  1064  07BC  2FD3               	goto	l1157
  1065  07BD                     l1155:
  1066  07BD  082A               	movf	_SSD_status,w
  1067  07BE  00F8               	movwf	??_main
  1068  07BF  01F9               	clrf	??_main+1
  1069                           
  1070                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1071                           ; Switch size 1, requested type "simple"
  1072                           ; Number of cases is 1, Range of values is 0 to 0
  1073                           ; switch strategies available:
  1074                           ; Name         Instructions Cycles
  1075                           ; simple_byte            4     3 (average)
  1076                           ; direct_byte           11     8 (fixed)
  1077                           ; jumptable            260     6 (fixed)
  1078                           ;	Chosen strategy is simple_byte
  1079  07C0  0879               	movf	??_main+1,w
  1080  07C1  3A00               	xorlw	0	; case 0
  1081  07C2  1903               	skipnz
  1082  07C3  2FC5               	goto	l1195
  1083  07C4  2FD3               	goto	l1157
  1084  07C5                     l1195:
  1085                           
  1086                           ; Switch size 1, requested type "simple"
  1087                           ; Number of cases is 4, Range of values is 1 to 4
  1088                           ; switch strategies available:
  1089                           ; Name         Instructions Cycles
  1090                           ; simple_byte           13     7 (average)
  1091                           ; direct_byte           23    11 (fixed)
  1092                           ; jumptable            263     9 (fixed)
  1093                           ;	Chosen strategy is simple_byte
  1094  07C5  0878               	movf	??_main,w
  1095  07C6  3A01               	xorlw	1	; case 1
  1096  07C7  1903               	skipnz
  1097  07C8  2F83               	goto	l65
  1098  07C9  3A03               	xorlw	3	; case 2
  1099  07CA  1903               	skipnz
  1100  07CB  2F92               	goto	l67
  1101  07CC  3A01               	xorlw	1	; case 3
  1102  07CD  1903               	skipnz
  1103  07CE  2FA1               	goto	l68
  1104  07CF  3A07               	xorlw	7	; case 4
  1105  07D0  1903               	skipnz
  1106  07D1  2FB0               	goto	l69
  1107  07D2  2FD3               	goto	l1157
  1108  07D3                     l1157:
  1109                           
  1110                           ;main.c: 150:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1111  07D3  3003               	movlw	3
  1112  07D4  00F9               	movwf	??_main+1
  1113  07D5  3097               	movlw	151
  1114  07D6  00F8               	movwf	??_main
  1115  07D7                     u637:
  1116  07D7  0BF8               	decfsz	??_main,f
  1117  07D8  2FD7               	goto	u637
  1118  07D9  0BF9               	decfsz	??_main+1,f
  1119  07DA  2FD7               	goto	u637
  1120  07DB  2FDC               	nop2
  1121                           
  1122                           ;main.c: 151:         Time_Counter++;
  1123  07DC  3001               	movlw	1
  1124  07DD  1283               	bcf	3,5	;RP0=0, select bank0
  1125  07DE  1303               	bcf	3,6	;RP1=0, select bank0
  1126  07DF  07AB               	addwf	main@Time_Counter,f
  1127  07E0  1803               	skipnc
  1128  07E1  0AAC               	incf	main@Time_Counter+1,f
  1129  07E2  3000               	movlw	0
  1130  07E3  07AC               	addwf	main@Time_Counter+1,f
  1131  07E4  2E8A               	goto	l1081
  1132  07E5  120A  118A  2800   	ljmp	start
  1133  07E8                     __end_of_main:
  1134                           
  1135                           	psect	text1
  1136  057F                     __ptext1:	
  1137 ;; *************** function ___awmod *****************
  1138 ;; Defined at:
  1139 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;  divisor         2    0[COMMON] int 
  1142 ;;  dividend        2    2[COMMON] int 
  1143 ;; Auto vars:     Size  Location     Type
  1144 ;;  sign            1    5[COMMON] unsigned char 
  1145 ;;  counter         1    4[COMMON] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  2    0[COMMON] int 
  1148 ;; Registers used:
  1149 ;;		wreg, status,2, status,0, btemp+1
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         4       0       0       0       0
  1156 ;;      Locals:         2       0       0       0       0
  1157 ;;      Temps:          0       0       0       0       0
  1158 ;;      Totals:         6       0       0       0       0
  1159 ;;Total ram usage:        6 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; This function calls:
  1162 ;;		Nothing
  1163 ;; This function is called by:
  1164 ;;		_main
  1165 ;; This function uses a non-reentrant model
  1166 ;;
  1167                           
  1168                           
  1169                           ;psect for function ___awmod
  1170  057F                     ___awmod:
  1171  057F                     l1013:	
  1172                           ;incstack = 0
  1173                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  1174                           
  1175  057F  01F5               	clrf	___awmod@sign
  1176  0580                     l1015:
  1177  0580  1FF3               	btfss	___awmod@dividend+1,7
  1178  0581  2D83               	goto	u431
  1179  0582  2D84               	goto	u430
  1180  0583                     u431:
  1181  0583  2D8B               	goto	l1021
  1182  0584                     u430:
  1183  0584                     l1017:
  1184  0584  09F2               	comf	___awmod@dividend,f
  1185  0585  09F3               	comf	___awmod@dividend+1,f
  1186  0586  0AF2               	incf	___awmod@dividend,f
  1187  0587  1903               	skipnz
  1188  0588  0AF3               	incf	___awmod@dividend+1,f
  1189  0589                     l1019:
  1190  0589  01F5               	clrf	___awmod@sign
  1191  058A  0AF5               	incf	___awmod@sign,f
  1192  058B                     l1021:
  1193  058B  1FF1               	btfss	___awmod@divisor+1,7
  1194  058C  2D8E               	goto	u441
  1195  058D  2D8F               	goto	u440
  1196  058E                     u441:
  1197  058E  2D94               	goto	l1025
  1198  058F                     u440:
  1199  058F                     l1023:
  1200  058F  09F0               	comf	___awmod@divisor,f
  1201  0590  09F1               	comf	___awmod@divisor+1,f
  1202  0591  0AF0               	incf	___awmod@divisor,f
  1203  0592  1903               	skipnz
  1204  0593  0AF1               	incf	___awmod@divisor+1,f
  1205  0594                     l1025:
  1206  0594  0870               	movf	___awmod@divisor,w
  1207  0595  0471               	iorwf	___awmod@divisor+1,w
  1208  0596  1903               	btfsc	3,2
  1209  0597  2D99               	goto	u451
  1210  0598  2D9A               	goto	u450
  1211  0599                     u451:
  1212  0599  2DC9               	goto	l1043
  1213  059A                     u450:
  1214  059A                     l1027:
  1215  059A  01F4               	clrf	___awmod@counter
  1216  059B  0AF4               	incf	___awmod@counter,f
  1217  059C  2DA8               	goto	l1033
  1218  059D                     l1029:
  1219  059D  3001               	movlw	1
  1220  059E                     u465:
  1221  059E  1003               	clrc
  1222  059F  0DF0               	rlf	___awmod@divisor,f
  1223  05A0  0DF1               	rlf	___awmod@divisor+1,f
  1224  05A1  3EFF               	addlw	-1
  1225  05A2  1D03               	skipz
  1226  05A3  2D9E               	goto	u465
  1227  05A4                     l1031:
  1228  05A4  3001               	movlw	1
  1229  05A5  00FF               	movwf	btemp+1
  1230  05A6  087F               	movf	btemp+1,w
  1231  05A7  07F4               	addwf	___awmod@counter,f
  1232  05A8                     l1033:
  1233  05A8  1FF1               	btfss	___awmod@divisor+1,7
  1234  05A9  2DAB               	goto	u471
  1235  05AA  2DAC               	goto	u470
  1236  05AB                     u471:
  1237  05AB  2D9D               	goto	l1029
  1238  05AC                     u470:
  1239  05AC                     l1035:
  1240  05AC  0871               	movf	___awmod@divisor+1,w
  1241  05AD  0273               	subwf	___awmod@dividend+1,w
  1242  05AE  1D03               	skipz
  1243  05AF  2DB2               	goto	u485
  1244  05B0  0870               	movf	___awmod@divisor,w
  1245  05B1  0272               	subwf	___awmod@dividend,w
  1246  05B2                     u485:
  1247  05B2  1C03               	skipc
  1248  05B3  2DB5               	goto	u481
  1249  05B4  2DB6               	goto	u480
  1250  05B5                     u481:
  1251  05B5  2DBC               	goto	l1039
  1252  05B6                     u480:
  1253  05B6                     l1037:
  1254  05B6  0870               	movf	___awmod@divisor,w
  1255  05B7  02F2               	subwf	___awmod@dividend,f
  1256  05B8  0871               	movf	___awmod@divisor+1,w
  1257  05B9  1C03               	skipc
  1258  05BA  03F3               	decf	___awmod@dividend+1,f
  1259  05BB  02F3               	subwf	___awmod@dividend+1,f
  1260  05BC                     l1039:
  1261  05BC  3001               	movlw	1
  1262  05BD                     u495:
  1263  05BD  1003               	clrc
  1264  05BE  0CF1               	rrf	___awmod@divisor+1,f
  1265  05BF  0CF0               	rrf	___awmod@divisor,f
  1266  05C0  3EFF               	addlw	-1
  1267  05C1  1D03               	skipz
  1268  05C2  2DBD               	goto	u495
  1269  05C3                     l1041:
  1270  05C3  3001               	movlw	1
  1271  05C4  02F4               	subwf	___awmod@counter,f
  1272  05C5  1D03               	btfss	3,2
  1273  05C6  2DC8               	goto	u501
  1274  05C7  2DC9               	goto	u500
  1275  05C8                     u501:
  1276  05C8  2DAC               	goto	l1035
  1277  05C9                     u500:
  1278  05C9                     l1043:
  1279  05C9  0875               	movf	___awmod@sign,w
  1280  05CA  1903               	btfsc	3,2
  1281  05CB  2DCD               	goto	u511
  1282  05CC  2DCE               	goto	u510
  1283  05CD                     u511:
  1284  05CD  2DD3               	goto	l1047
  1285  05CE                     u510:
  1286  05CE                     l1045:
  1287  05CE  09F2               	comf	___awmod@dividend,f
  1288  05CF  09F3               	comf	___awmod@dividend+1,f
  1289  05D0  0AF2               	incf	___awmod@dividend,f
  1290  05D1  1903               	skipnz
  1291  05D2  0AF3               	incf	___awmod@dividend+1,f
  1292  05D3                     l1047:
  1293  05D3  0873               	movf	___awmod@dividend+1,w
  1294  05D4  00F1               	movwf	?___awmod+1
  1295  05D5  0872               	movf	___awmod@dividend,w
  1296  05D6  00F0               	movwf	?___awmod
  1297  05D7                     l343:
  1298  05D7  0008               	return
  1299  05D8                     __end_of___awmod:
  1300                           
  1301                           	psect	text2
  1302  05D8                     __ptext2:	
  1303 ;; *************** function ___awdiv *****************
  1304 ;; Defined at:
  1305 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  1306 ;; Parameters:    Size  Location     Type
  1307 ;;  divisor         2    0[COMMON] int 
  1308 ;;  dividend        2    2[COMMON] int 
  1309 ;; Auto vars:     Size  Location     Type
  1310 ;;  quotient        2    6[COMMON] int 
  1311 ;;  sign            1    5[COMMON] unsigned char 
  1312 ;;  counter         1    4[COMMON] unsigned char 
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  2    0[COMMON] int 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, btemp+1
  1317 ;; Tracked objects:
  1318 ;;		On entry : 0/0
  1319 ;;		On exit  : 0/0
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1322 ;;      Params:         4       0       0       0       0
  1323 ;;      Locals:         4       0       0       0       0
  1324 ;;      Temps:          0       0       0       0       0
  1325 ;;      Totals:         8       0       0       0       0
  1326 ;;Total ram usage:        8 bytes
  1327 ;; Hardware stack levels used:    1
  1328 ;; This function calls:
  1329 ;;		Nothing
  1330 ;; This function is called by:
  1331 ;;		_main
  1332 ;; This function uses a non-reentrant model
  1333 ;;
  1334                           
  1335                           
  1336                           ;psect for function ___awdiv
  1337  05D8                     ___awdiv:
  1338  05D8                     l969:	
  1339                           ;incstack = 0
  1340                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  1341                           
  1342  05D8  01F5               	clrf	___awdiv@sign
  1343  05D9                     l971:
  1344  05D9  1FF1               	btfss	___awdiv@divisor+1,7
  1345  05DA  2DDC               	goto	u331
  1346  05DB  2DDD               	goto	u330
  1347  05DC                     u331:
  1348  05DC  2DE4               	goto	l977
  1349  05DD                     u330:
  1350  05DD                     l973:
  1351  05DD  09F0               	comf	___awdiv@divisor,f
  1352  05DE  09F1               	comf	___awdiv@divisor+1,f
  1353  05DF  0AF0               	incf	___awdiv@divisor,f
  1354  05E0  1903               	skipnz
  1355  05E1  0AF1               	incf	___awdiv@divisor+1,f
  1356  05E2                     l975:
  1357  05E2  01F5               	clrf	___awdiv@sign
  1358  05E3  0AF5               	incf	___awdiv@sign,f
  1359  05E4                     l977:
  1360  05E4  1FF3               	btfss	___awdiv@dividend+1,7
  1361  05E5  2DE7               	goto	u341
  1362  05E6  2DE8               	goto	u340
  1363  05E7                     u341:
  1364  05E7  2DF1               	goto	l983
  1365  05E8                     u340:
  1366  05E8                     l979:
  1367  05E8  09F2               	comf	___awdiv@dividend,f
  1368  05E9  09F3               	comf	___awdiv@dividend+1,f
  1369  05EA  0AF2               	incf	___awdiv@dividend,f
  1370  05EB  1903               	skipnz
  1371  05EC  0AF3               	incf	___awdiv@dividend+1,f
  1372  05ED                     l981:
  1373  05ED  3001               	movlw	1
  1374  05EE  00FF               	movwf	btemp+1
  1375  05EF  087F               	movf	btemp+1,w
  1376  05F0  06F5               	xorwf	___awdiv@sign,f
  1377  05F1                     l983:
  1378  05F1  01F6               	clrf	___awdiv@quotient
  1379  05F2  01F7               	clrf	___awdiv@quotient+1
  1380  05F3                     l985:
  1381  05F3  0870               	movf	___awdiv@divisor,w
  1382  05F4  0471               	iorwf	___awdiv@divisor+1,w
  1383  05F5  1903               	btfsc	3,2
  1384  05F6  2DF8               	goto	u351
  1385  05F7  2DF9               	goto	u350
  1386  05F8                     u351:
  1387  05F8  2E30               	goto	l1005
  1388  05F9                     u350:
  1389  05F9                     l987:
  1390  05F9  01F4               	clrf	___awdiv@counter
  1391  05FA  0AF4               	incf	___awdiv@counter,f
  1392  05FB  2E07               	goto	l993
  1393  05FC                     l989:
  1394  05FC  3001               	movlw	1
  1395  05FD                     u365:
  1396  05FD  1003               	clrc
  1397  05FE  0DF0               	rlf	___awdiv@divisor,f
  1398  05FF  0DF1               	rlf	___awdiv@divisor+1,f
  1399  0600  3EFF               	addlw	-1
  1400  0601  1D03               	skipz
  1401  0602  2DFD               	goto	u365
  1402  0603                     l991:
  1403  0603  3001               	movlw	1
  1404  0604  00FF               	movwf	btemp+1
  1405  0605  087F               	movf	btemp+1,w
  1406  0606  07F4               	addwf	___awdiv@counter,f
  1407  0607                     l993:
  1408  0607  1FF1               	btfss	___awdiv@divisor+1,7
  1409  0608  2E0A               	goto	u371
  1410  0609  2E0B               	goto	u370
  1411  060A                     u371:
  1412  060A  2DFC               	goto	l989
  1413  060B                     u370:
  1414  060B                     l995:
  1415  060B  3001               	movlw	1
  1416  060C                     u385:
  1417  060C  1003               	clrc
  1418  060D  0DF6               	rlf	___awdiv@quotient,f
  1419  060E  0DF7               	rlf	___awdiv@quotient+1,f
  1420  060F  3EFF               	addlw	-1
  1421  0610  1D03               	skipz
  1422  0611  2E0C               	goto	u385
  1423  0612  0871               	movf	___awdiv@divisor+1,w
  1424  0613  0273               	subwf	___awdiv@dividend+1,w
  1425  0614  1D03               	skipz
  1426  0615  2E18               	goto	u395
  1427  0616  0870               	movf	___awdiv@divisor,w
  1428  0617  0272               	subwf	___awdiv@dividend,w
  1429  0618                     u395:
  1430  0618  1C03               	skipc
  1431  0619  2E1B               	goto	u391
  1432  061A  2E1C               	goto	u390
  1433  061B                     u391:
  1434  061B  2E23               	goto	l1001
  1435  061C                     u390:
  1436  061C                     l997:
  1437  061C  0870               	movf	___awdiv@divisor,w
  1438  061D  02F2               	subwf	___awdiv@dividend,f
  1439  061E  0871               	movf	___awdiv@divisor+1,w
  1440  061F  1C03               	skipc
  1441  0620  03F3               	decf	___awdiv@dividend+1,f
  1442  0621  02F3               	subwf	___awdiv@dividend+1,f
  1443  0622                     l999:
  1444  0622  1476               	bsf	___awdiv@quotient,0
  1445  0623                     l1001:
  1446  0623  3001               	movlw	1
  1447  0624                     u405:
  1448  0624  1003               	clrc
  1449  0625  0CF1               	rrf	___awdiv@divisor+1,f
  1450  0626  0CF0               	rrf	___awdiv@divisor,f
  1451  0627  3EFF               	addlw	-1
  1452  0628  1D03               	skipz
  1453  0629  2E24               	goto	u405
  1454  062A                     l1003:
  1455  062A  3001               	movlw	1
  1456  062B  02F4               	subwf	___awdiv@counter,f
  1457  062C  1D03               	btfss	3,2
  1458  062D  2E2F               	goto	u411
  1459  062E  2E30               	goto	u410
  1460  062F                     u411:
  1461  062F  2E0B               	goto	l995
  1462  0630                     u410:
  1463  0630                     l1005:
  1464  0630  0875               	movf	___awdiv@sign,w
  1465  0631  1903               	btfsc	3,2
  1466  0632  2E34               	goto	u421
  1467  0633  2E35               	goto	u420
  1468  0634                     u421:
  1469  0634  2E3A               	goto	l1009
  1470  0635                     u420:
  1471  0635                     l1007:
  1472  0635  09F6               	comf	___awdiv@quotient,f
  1473  0636  09F7               	comf	___awdiv@quotient+1,f
  1474  0637  0AF6               	incf	___awdiv@quotient,f
  1475  0638  1903               	skipnz
  1476  0639  0AF7               	incf	___awdiv@quotient+1,f
  1477  063A                     l1009:
  1478  063A  0877               	movf	___awdiv@quotient+1,w
  1479  063B  00F1               	movwf	?___awdiv+1
  1480  063C  0876               	movf	___awdiv@quotient,w
  1481  063D  00F0               	movwf	?___awdiv
  1482  063E                     l330:
  1483  063E  0008               	return
  1484  063F                     __end_of___awdiv:
  1485                           
  1486                           	psect	text3
  1487  0564                     __ptext3:	
  1488 ;; *************** function _EEPROM_Write *****************
  1489 ;; Defined at:
  1490 ;;		line 5 in file "E2PROM.c"
  1491 ;; Parameters:    Size  Location     Type
  1492 ;;  Address         1    wreg     unsigned char 
  1493 ;;  Data            1    0[COMMON] unsigned char 
  1494 ;; Auto vars:     Size  Location     Type
  1495 ;;  Address         1    1[COMMON] unsigned char 
  1496 ;; Return value:  Size  Location     Type
  1497 ;;                  1    wreg      void 
  1498 ;; Registers used:
  1499 ;;		wreg
  1500 ;; Tracked objects:
  1501 ;;		On entry : 0/0
  1502 ;;		On exit  : 0/0
  1503 ;;		Unchanged: 0/0
  1504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1505 ;;      Params:         1       0       0       0       0
  1506 ;;      Locals:         1       0       0       0       0
  1507 ;;      Temps:          0       0       0       0       0
  1508 ;;      Totals:         2       0       0       0       0
  1509 ;;Total ram usage:        2 bytes
  1510 ;; Hardware stack levels used:    1
  1511 ;; This function calls:
  1512 ;;		Nothing
  1513 ;; This function is called by:
  1514 ;;		_main
  1515 ;; This function uses a non-reentrant model
  1516 ;;
  1517                           
  1518                           
  1519                           ;psect for function _EEPROM_Write
  1520  0564                     _EEPROM_Write:
  1521                           
  1522                           ;incstack = 0
  1523                           ; Regs used in _EEPROM_Write: [wreg]
  1524                           ;EEPROM_Write@Address stored from wreg
  1525  0564  00F1               	movwf	EEPROM_Write@Address
  1526  0565                     l951:
  1527  0565                     l85:	
  1528                           ;E2PROM.c: 5: void EEPROM_Write(uint8_t Address, uint8_t Data);E2PROM.c: 6: {;E2PROM.c: 
      +                          7:   while(EECON1bits.WR);
  1529                           
  1530  0565  1683               	bsf	3,5	;RP0=1, select bank3
  1531  0566  1703               	bsf	3,6	;RP1=1, select bank3
  1532  0567  188C               	btfsc	12,1	;volsfr
  1533  0568  2D6A               	goto	u321
  1534  0569  2D6B               	goto	u320
  1535  056A                     u321:
  1536  056A  2D65               	goto	l85
  1537  056B                     u320:
  1538  056B                     l953:
  1539                           
  1540                           ;E2PROM.c: 8:   EEADR = Address;
  1541  056B  0871               	movf	EEPROM_Write@Address,w
  1542  056C  1283               	bcf	3,5	;RP0=0, select bank2
  1543  056D  1703               	bsf	3,6	;RP1=1, select bank2
  1544  056E  008D               	movwf	13	;volatile
  1545                           
  1546                           ;E2PROM.c: 9:   EEDATA = Data;
  1547  056F  0870               	movf	EEPROM_Write@Data,w
  1548  0570  008C               	movwf	12	;volatile
  1549  0571                     l955:
  1550                           
  1551                           ;E2PROM.c: 10:   EECON1bits.EEPGD = 0;
  1552  0571  1683               	bsf	3,5	;RP0=1, select bank3
  1553  0572  1703               	bsf	3,6	;RP1=1, select bank3
  1554  0573  138C               	bcf	12,7	;volsfr
  1555  0574                     l957:
  1556                           
  1557                           ;E2PROM.c: 11:   EECON1bits.WREN = 1;
  1558  0574  150C               	bsf	12,2	;volsfr
  1559  0575                     l959:
  1560                           
  1561                           ;E2PROM.c: 12:   INTCONbits.GIE = 0;
  1562  0575  138B               	bcf	11,7	;volatile
  1563                           
  1564                           ;E2PROM.c: 13:   EECON2 = 0x55;
  1565  0576  3055               	movlw	85
  1566  0577  008D               	movwf	13	;volsfr
  1567                           
  1568                           ;E2PROM.c: 14:   EECON2 = 0xAA;
  1569  0578  30AA               	movlw	170
  1570  0579  008D               	movwf	13	;volsfr
  1571  057A                     l961:
  1572                           
  1573                           ;E2PROM.c: 15:   EECON1bits.WR = 1;
  1574  057A  148C               	bsf	12,1	;volsfr
  1575  057B                     l963:
  1576                           
  1577                           ;E2PROM.c: 16:   INTCONbits.GIE = 1;
  1578  057B  178B               	bsf	11,7	;volatile
  1579  057C                     l965:
  1580                           
  1581                           ;E2PROM.c: 17:   EECON1bits.WREN = 0;
  1582  057C  110C               	bcf	12,2	;volsfr
  1583  057D                     l967:
  1584                           
  1585                           ;E2PROM.c: 18:   EECON1bits.WR = 0;
  1586  057D  108C               	bcf	12,1	;volsfr
  1587  057E                     l88:
  1588  057E  0008               	return
  1589  057F                     __end_of_EEPROM_Write:
  1590                           
  1591                           	psect	text4
  1592  0540                     __ptext4:	
  1593 ;; *************** function _EEPROM_Read *****************
  1594 ;; Defined at:
  1595 ;;		line 22 in file "E2PROM.c"
  1596 ;; Parameters:    Size  Location     Type
  1597 ;;  Address         1    wreg     unsigned char 
  1598 ;; Auto vars:     Size  Location     Type
  1599 ;;  Address         1    0[COMMON] unsigned char 
  1600 ;;  Data            1    1[COMMON] unsigned char 
  1601 ;; Return value:  Size  Location     Type
  1602 ;;                  1    wreg      unsigned char 
  1603 ;; Registers used:
  1604 ;;		wreg, btemp+1
  1605 ;; Tracked objects:
  1606 ;;		On entry : 0/0
  1607 ;;		On exit  : 0/0
  1608 ;;		Unchanged: 0/0
  1609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1610 ;;      Params:         0       0       0       0       0
  1611 ;;      Locals:         2       0       0       0       0
  1612 ;;      Temps:          0       0       0       0       0
  1613 ;;      Totals:         2       0       0       0       0
  1614 ;;Total ram usage:        2 bytes
  1615 ;; Hardware stack levels used:    1
  1616 ;; This function calls:
  1617 ;;		Nothing
  1618 ;; This function is called by:
  1619 ;;		_main
  1620 ;; This function uses a non-reentrant model
  1621 ;;
  1622                           
  1623                           
  1624                           ;psect for function _EEPROM_Read
  1625  0540                     _EEPROM_Read:
  1626                           
  1627                           ;incstack = 0
  1628                           ; Regs used in _EEPROM_Read: [wreg+btemp+1]
  1629                           ;EEPROM_Read@Address stored from wreg
  1630  0540  00F0               	movwf	EEPROM_Read@Address
  1631  0541                     l939:
  1632                           
  1633                           ;E2PROM.c: 22: uint8_t EEPROM_Read(uint8_t Address);E2PROM.c: 23: {;E2PROM.c: 24:   uint
      +                          8_t Data;;E2PROM.c: 25:   EEADR = Address;
  1634  0541  0870               	movf	EEPROM_Read@Address,w
  1635  0542  1283               	bcf	3,5	;RP0=0, select bank2
  1636  0543  1703               	bsf	3,6	;RP1=1, select bank2
  1637  0544  008D               	movwf	13	;volatile
  1638  0545                     l941:
  1639                           
  1640                           ;E2PROM.c: 26:   EECON1bits.EEPGD = 0;
  1641  0545  1683               	bsf	3,5	;RP0=1, select bank3
  1642  0546  1703               	bsf	3,6	;RP1=1, select bank3
  1643  0547  138C               	bcf	12,7	;volsfr
  1644  0548                     l943:
  1645                           
  1646                           ;E2PROM.c: 27:   EECON1bits.RD = 1;
  1647  0548  140C               	bsf	12,0	;volsfr
  1648  0549                     l945:
  1649                           
  1650                           ;E2PROM.c: 28:   Data = EEDATA;
  1651  0549  1283               	bcf	3,5	;RP0=0, select bank2
  1652  054A  1703               	bsf	3,6	;RP1=1, select bank2
  1653  054B  080C               	movf	12,w	;volatile
  1654  054C  00FF               	movwf	btemp+1
  1655  054D  087F               	movf	btemp+1,w
  1656  054E  00F1               	movwf	EEPROM_Read@Data
  1657  054F                     l947:
  1658                           
  1659                           ;E2PROM.c: 29:   return Data;
  1660  054F  0871               	movf	EEPROM_Read@Data,w
  1661  0550                     l91:
  1662  0550  0008               	return
  1663  0551                     __end_of_EEPROM_Read:
  1664  007E                     btemp	set	126	;btemp
  1665  007E                     wtemp0	set	126
  1666                           
  1667                           	psect	config
  1668                           
  1669                           ;Config register CONFIG @ 0x2007
  1670                           ;	Oscillator Selection bits
  1671                           ;	FOSC = XT, XT oscillator
  1672                           ;	Watchdog Timer Enable bit
  1673                           ;	WDTE = OFF, WDT disabled
  1674                           ;	Power-up Timer Enable bit
  1675                           ;	PWRTE = ON, PWRT enabled
  1676                           ;	Brown-out Reset Enable bit
  1677                           ;	BOREN = ON, BOR enabled
  1678                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1679                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1680                           ;	Data EEPROM Memory Code Protection bit
  1681                           ;	CPD = OFF, Data EEPROM code protection off
  1682                           ;	Flash Program Memory Write Enable bits
  1683                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1684                           ;	In-Circuit Debugger Mode bit
  1685                           ;	DEBUG = 0x1, unprogrammed default
  1686                           ;	Flash Program Memory Code Protection bit
  1687                           ;	CP = OFF, Code protection off
  1688  2007                     	org	8199
  1689  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        11
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80      7      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0    1685
                                              8 COMMON     2     2      0
                                              0 BANK0      7     7      0
                        _EEPROM_Read
                       _EEPROM_Write
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     600
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     604
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Write                                         2     1      1     272
                                              0 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (1) _EEPROM_Read                                          2     2      0      45
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM_Read
   _EEPROM_Write
   ___awdiv
   ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      7      18       5       30.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      22      12        0.0%
ABS                  0      0      22       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Nov 10 08:43:13 2020

                      pc 0002                       l54 06AF                       l48 0680  
                     l65 0783                       l91 0550                       l67 0792  
                     l68 07A1                       l85 0565                       l69 07B0  
                     l88 057E             ___awdiv@sign 0075                       fsr 0004  
                    l330 063E                      l343 05D7                      l941 0545  
                    l943 0548                      l951 0565                      l945 0549  
                    l961 057A                      l953 056B                      l947 054F  
                    l939 0541                      l963 057B                      l955 0571  
                    l971 05D9                      l965 057C                      l957 0574  
                    l981 05ED                      l973 05DD                      l967 057D  
                    l959 0575                      l991 0603                      l983 05F1  
                    l975 05E2                      l993 0607                      l985 05F3  
                    l977 05E4                      l969 05D8                      l995 060B  
                    l987 05F9                      l979 05E8                      l997 061C  
                    l989 05FC                      l999 0622                      _RA2 002A  
                    _RA3 002B                      _RB1 0031                      _RA4 002C  
                    _RA5 002D                      _RB3 0033                      u320 056B  
                    u321 056A                      u410 0630                      u330 05DD  
                    u411 062F                      u331 05DC                      u420 0635  
                    u340 05E8                      u500 05C9                      u421 0634  
                    u405 0624                      u341 05E7                      u501 05C8  
                    u350 05F9                      u510 05CE                      u430 0584  
                    u351 05F8                      u511 05CD                      u431 0583  
                    u440 058F                      u600 06FF                      u520 065F  
                    u441 058E                      u601 06FE                      u521 065E  
                    u370 060B                      u450 059A                      u610 0712  
                    u530 0693                      u371 060A                      u451 0599  
                    u611 0711                      u603 06FB                      u531 0692  
                    u620 0725                      u540 069F                      u365 05FD  
                    u621 0724                      u541 069E                      u390 061C  
                    u470 05AC                      u550 06AA                      u391 061B  
                    u471 05AB                      u623 0721                      u551 06A9  
                    u480 05B6                      u560 06AF                      u385 060C  
                    u481 05B5                      u465 059E                      u561 06AE  
                    u570 06B3                      u395 0618                      u571 06B2  
                    u580 06D9                      u485 05B2                      u637 07D7  
                    u581 06D8                      u590 06EC                      u495 05BD  
                    u591 06EB                      _SSD 0020               _SSD_status 002A  
                    fsr0 0004                      indf 0000             ___awmod@sign 0075  
                   l1001 0623                     l1003 062A                     l1005 0630  
                   l1021 058B                     l1013 057F                     l1101 06B3  
                   l1007 0635                     l1031 05A4                     l1023 058F  
                   l1015 0580                     l1111 06DA                     l1103 06BB  
                   l1009 063A                     l1041 05C3                     l1033 05A8  
                   l1025 0594                     l1017 0584                     l1121 070A  
                   l1113 06E8                     l1105 06C7                     l1035 05AC  
                   l1027 059A                     l1043 05C9                     l1019 0589  
                   l1131 0740                     l1123 0712                     l1115 06EC  
                   l1107 06D3                     l1051 063F                     l1045 05CE  
                   l1037 05B6                     l1029 059D                     l1141 0796  
                   l1133 0756                     l1125 0725                     l1117 06FF  
                   l1061 0649                     l1053 0643                     l1047 05D3  
                   l1039 05BC                     l1151 07BA                     l1143 079C  
                   l1135 076C                     l1119 0701                     l1071 065F  
                   l1063 064B                     l1055 0646                     l1145 07A5  
                   l1137 0787                     l1129 072A                     l1081 068A  
                   l1073 066A                     l1065 064E                     l1057 0647  
                   l1147 07AB                     l1139 078D                     l1155 07BD  
                   l1091 06A3                     l1083 0693                     l1075 066E  
                   l1067 064F                     l1059 0648                     l1149 07B4  
                   l1157 07D3                     l1093 06A4                     l1085 0697  
                   l1077 067E                     l1069 065A                     l1095 06AA  
                   l1087 0699                     l1079 0682                     l1097 06AB  
                   l1089 069F                     l1195 07C5                     _main 063F  
                   btemp 007E                     start 0000     __end_of_EEPROM_Write 057F  
                  ?_main 0070          __end_of___awdiv 063F                    _EEADR 010D  
        __end_of___awmod 05D8          ___awdiv@divisor 0070          ___awdiv@counter 0074  
                  _PORTD 0008                    _TRISA 0085                    _TRISD 0088  
                  pclath 000A                    status 0003                    wtemp0 007E  
       EEPROM_Write@Data 0070     __size_of_EEPROM_Read 0011          __initialization 07E8  
           __end_of_main 07E8                   ??_main 0078                   _EEDATA 010C  
                 _EECON2 018D         main@EEPROM_Value 0031         ___awdiv@dividend 0072  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0076  
        ___awmod@divisor 0070          ___awmod@counter 0074  __end_of__initialization 07FC  
  __size_of_EEPROM_Write 001B           __pcstackCOMMON 0070             __pidataBANK0 0535  
           _EEPROM_Write 0564               __pbssBANK0 0032               __pmaintext 063F  
                ___awdiv 05D8                  ___awmod 057F                  __ptext1 057F  
                __ptext2 05D8                  __ptext3 0564                  __ptext4 0540  
       ___awmod@dividend 0072     end_of_initialization 07FC            ??_EEPROM_Read 0070  
              _TRISBbits 0086      __end_of_EEPROM_Read 0551      start_initialization 07E8  
             init_fetch0 0551              __pdataBANK0 0020                ___latbits 0002  
          __pcstackBANK0 002B              _EEPROM_Read 0540         main@Time_Counter 002B  
        _Seconds_Counter 0037                 ?___awdiv 0070                 ?___awmod 0070  
              main@count 002D           _Minute_Counter 0036               _EECON1bits 018C  
       __size_of___awdiv 0067         __size_of___awmod 0059            ?_EEPROM_Write 0070  
          __size_of_main 01A9             _SSD1_counter 0035             _SSD2_counter 0034  
           _SSD3_counter 0033             _SSD4_counter 0032               _INTCONbits 000B  
     EEPROM_Read@Address 0070                 init_ram0 0555           ??_EEPROM_Write 0071  
           ?_EEPROM_Read 0070      EEPROM_Write@Address 0071          EEPROM_Read@Data 0071  
