

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Nov 10 05:40:24 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    10                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	intentry,global,class=CODE,delta=2
    29                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 2.20
    33                           ; Generated 12/02/2020 GMT
    34                           ; 
    35                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F877A Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000E                     	;# 
    82  000F                     	;# 
    83  0010                     	;# 
    84  0011                     	;# 
    85  0012                     	;# 
    86  0013                     	;# 
    87  0014                     	;# 
    88  0015                     	;# 
    89  0015                     	;# 
    90  0016                     	;# 
    91  0017                     	;# 
    92  0018                     	;# 
    93  0019                     	;# 
    94  001A                     	;# 
    95  001B                     	;# 
    96  001B                     	;# 
    97  001C                     	;# 
    98  001D                     	;# 
    99  001E                     	;# 
   100  001F                     	;# 
   101  0081                     	;# 
   102  0085                     	;# 
   103  0086                     	;# 
   104  0087                     	;# 
   105  0088                     	;# 
   106  0089                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0091                     	;# 
   111  0092                     	;# 
   112  0093                     	;# 
   113  0094                     	;# 
   114  0098                     	;# 
   115  0099                     	;# 
   116  009C                     	;# 
   117  009D                     	;# 
   118  009E                     	;# 
   119  009F                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  0000                     	;# 
   127  0001                     	;# 
   128  0002                     	;# 
   129  0003                     	;# 
   130  0004                     	;# 
   131  0005                     	;# 
   132  0006                     	;# 
   133  0007                     	;# 
   134  0008                     	;# 
   135  0009                     	;# 
   136  000A                     	;# 
   137  000B                     	;# 
   138  000C                     	;# 
   139  000D                     	;# 
   140  000E                     	;# 
   141  000E                     	;# 
   142  000F                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0017                     	;# 
   152  0018                     	;# 
   153  0019                     	;# 
   154  001A                     	;# 
   155  001B                     	;# 
   156  001B                     	;# 
   157  001C                     	;# 
   158  001D                     	;# 
   159  001E                     	;# 
   160  001F                     	;# 
   161  0081                     	;# 
   162  0085                     	;# 
   163  0086                     	;# 
   164  0087                     	;# 
   165  0088                     	;# 
   166  0089                     	;# 
   167  008C                     	;# 
   168  008D                     	;# 
   169  008E                     	;# 
   170  0091                     	;# 
   171  0092                     	;# 
   172  0093                     	;# 
   173  0094                     	;# 
   174  0098                     	;# 
   175  0099                     	;# 
   176  009C                     	;# 
   177  009D                     	;# 
   178  009E                     	;# 
   179  009F                     	;# 
   180  010C                     	;# 
   181  010D                     	;# 
   182  010E                     	;# 
   183  010F                     	;# 
   184  018C                     	;# 
   185  018D                     	;# 
   186  0000                     	;# 
   187  0001                     	;# 
   188  0002                     	;# 
   189  0003                     	;# 
   190  0004                     	;# 
   191  0005                     	;# 
   192  0006                     	;# 
   193  0007                     	;# 
   194  0008                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  000E                     	;# 
   202  000F                     	;# 
   203  0010                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0013                     	;# 
   207  0014                     	;# 
   208  0015                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0017                     	;# 
   212  0018                     	;# 
   213  0019                     	;# 
   214  001A                     	;# 
   215  001B                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  001D                     	;# 
   219  001E                     	;# 
   220  001F                     	;# 
   221  0081                     	;# 
   222  0085                     	;# 
   223  0086                     	;# 
   224  0087                     	;# 
   225  0088                     	;# 
   226  0089                     	;# 
   227  008C                     	;# 
   228  008D                     	;# 
   229  008E                     	;# 
   230  0091                     	;# 
   231  0092                     	;# 
   232  0093                     	;# 
   233  0094                     	;# 
   234  0098                     	;# 
   235  0099                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  010C                     	;# 
   241  010D                     	;# 
   242  010E                     	;# 
   243  010F                     	;# 
   244  018C                     	;# 
   245  018D                     	;# 
   246                           
   247                           	psect	idataBANK0
   248  073F                     __pidataBANK0:
   249                           
   250                           ;initializer for _Massage2
   251  073F  3450               	retlw	80
   252  0740  3472               	retlw	114
   253  0741  3465               	retlw	101
   254  0742  3473               	retlw	115
   255  0743  3473               	retlw	115
   256  0744  3420               	retlw	32
   257  0745  3420               	retlw	32
   258  0746  3453               	retlw	83
   259  0747  3474               	retlw	116
   260  0748  3461               	retlw	97
   261  0749  3472               	retlw	114
   262  074A  3474               	retlw	116
   263  074B  3420               	retlw	32
   264  074C  346B               	retlw	107
   265  074D  3465               	retlw	101
   266  074E  3479               	retlw	121
   267                           
   268                           ;initializer for _Massage1
   269  074F  3453               	retlw	83
   270  0750  3474               	retlw	116
   271  0751  346F               	retlw	111
   272  0752  3470               	retlw	112
   273  0753  3420               	retlw	32
   274  0754  3457               	retlw	87
   275  0755  3461               	retlw	97
   276  0756  3474               	retlw	116
   277  0757  3463               	retlw	99
   278  0758  3468               	retlw	104
   279  0759  3400               	retlw	0
   280                           
   281                           ;initializer for _Massage4
   282  075A  344C               	retlw	76
   283  075B  346E               	retlw	110
   284  075C  343A               	retlw	58
   285  075D  3400               	retlw	0
   286  075E  3400               	retlw	0
   287  075F  3400               	retlw	0
   288  0760  3400               	retlw	0
   289                           
   290                           ;initializer for _Massage3
   291  0761  3453               	retlw	83
   292  0762  3457               	retlw	87
   293  0763  343A               	retlw	58
   294  0764  3400               	retlw	0
   295  0765  3400               	retlw	0
   296  0766  3400               	retlw	0
   297  0767  3400               	retlw	0
   298                           
   299                           	psect	idataBANK3
   300  07FB                     __pidataBANK3:
   301                           
   302                           ;initializer for _Reset_flag
   303  07FB  3401               	retlw	1
   304  000E                     _TMR1	set	14
   305  0008                     _PORTD	set	8
   306  0049                     _RE1	set	73
   307  004A                     _RE2	set	74
   308  005F                     _GIE	set	95
   309  005E                     _PEIE	set	94
   310  0085                     _T1CKPS1	set	133
   311  0084                     _T1CKPS0	set	132
   312  0081                     _TMR1CS	set	129
   313  0034                     _RB4	set	52
   314  0030                     _RB0	set	48
   315  0035                     _RB5	set	53
   316  0080                     _TMR1ON	set	128
   317  0033                     _RB3	set	51
   318  0060                     _TMR1IF	set	96
   319  0089                     _TRISEbits	set	137
   320  0088                     _TRISD	set	136
   321  0086                     _TRISBbits	set	134
   322  0460                     _TMR1IE	set	1120
   323                           
   324                           	psect	cinit
   325  0013                     start_initialization:	
   326                           ; #config settings
   327                           
   328  0013                     __initialization:
   329                           
   330                           ; Initialize objects allocated to BANK3
   331  0013  1683               	bsf	3,5	;RP0=1, select bank3
   332  0014  1703               	bsf	3,6	;RP1=1, select bank3
   333  0015  120A  118A  27FB  120A  118A  	fcall	__pidataBANK3	;fetch initializer
   334  001A  00EF               	movwf	__pdataBANK3& (0+127)
   335                           
   336                           ; Initialize objects allocated to BANK0
   337  001B  1383               	bcf	3,7	;select IRP bank0
   338  001C  3049               	movlw	low (__pdataBANK0+41)
   339  001D  00FD               	movwf	btemp+-1
   340  001E  3007               	movlw	high __pidataBANK0
   341  001F  00FE               	movwf	btemp
   342  0020  303F               	movlw	low __pidataBANK0
   343  0021  00FF               	movwf	btemp+1
   344  0022  3020               	movlw	low __pdataBANK0
   345  0023  0084               	movwf	4
   346  0024  120A  118A  27EC  120A  118A  	fcall	init_ram0
   347                           
   348                           ; Clear objects allocated to BANK3
   349  0029  01E6               	clrf	__pbssBANK3& (0+127)
   350  002A  01E7               	clrf	(__pbssBANK3+1)& (0+127)
   351  002B  01E8               	clrf	(__pbssBANK3+2)& (0+127)
   352  002C  01E9               	clrf	(__pbssBANK3+3)& (0+127)
   353  002D  01EA               	clrf	(__pbssBANK3+4)& (0+127)
   354  002E  01EB               	clrf	(__pbssBANK3+5)& (0+127)
   355  002F  01EC               	clrf	(__pbssBANK3+6)& (0+127)
   356  0030  01ED               	clrf	(__pbssBANK3+7)& (0+127)
   357  0031  01EE               	clrf	(__pbssBANK3+8)& (0+127)
   358                           
   359                           ; Clear objects allocated to COMMON
   360  0032  01F8               	clrf	__pbssCOMMON& (0+127)
   361  0033  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   362  0034  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   363  0035                     end_of_initialization:	
   364                           ;End of C runtime variable initialization code
   365                           
   366  0035                     __end_of__initialization:
   367  0035  0183               	clrf	3
   368  0036  120A  118A  2839   	ljmp	_main	;jump to C main() function
   369                           
   370                           	psect	bssCOMMON
   371  0078                     __pbssCOMMON:
   372  0078                     _Timer_Counter:
   373  0078                     	ds	2
   374  007A                     _first_lap:
   375  007A                     	ds	1
   376                           
   377                           	psect	dataBANK0
   378  0020                     __pdataBANK0:
   379  0020                     _Massage2:
   380  0020                     	ds	16
   381  0030                     _Massage1:
   382  0030                     	ds	11
   383  003B                     _Massage4:
   384  003B                     	ds	7
   385  0042                     _Massage3:
   386  0042                     	ds	7
   387                           
   388                           	psect	bssBANK3
   389  01E6                     __pbssBANK3:
   390  01E6                     _INIT_DONE:
   391  01E6                     	ds	1
   392  01E7                     _LAP_flag:
   393  01E7                     	ds	1
   394  01E8                     _scroll_counter:
   395  01E8                     	ds	1
   396  01E9                     _Lap_counter:
   397  01E9                     	ds	1
   398  01EA                     _Lap_Hours:
   399  01EA                     	ds	1
   400  01EB                     _Lap_Minutes:
   401  01EB                     	ds	1
   402  01EC                     _Lap_Seconds:
   403  01EC                     	ds	1
   404  01ED                     _Lap_MilliSeconds:
   405  01ED                     	ds	1
   406  01EE                     _Start_Stop_Status:
   407  01EE                     	ds	1
   408                           
   409                           	psect	dataBANK3
   410  01EF                     __pdataBANK3:
   411  01EF                     _Reset_flag:
   412  01EF                     	ds	1
   413                           
   414                           	psect	inittext
   415  07E8                     init_fetch0:	
   416                           ;	Called with low address in FSR and high address in W
   417                           
   418  07E8  087E               	movf	btemp,w
   419  07E9  008A               	movwf	10
   420  07EA  087F               	movf	btemp+1,w
   421  07EB  0082               	movwf	2
   422  07EC                     init_ram0:	
   423                           ;Called with:
   424                           ;	high address of idata address in btemp 
   425                           ;	low address of idata address in btemp+1 
   426                           ;	low address of data in FSR
   427                           ;	high address + 1 of data in btemp-1
   428                           
   429  07EC  120A  118A  27E8  120A  118A  	fcall	init_fetch0
   430  07F1  0080               	movwf	0
   431  07F2  0A84               	incf	4,f
   432  07F3  0804               	movf	4,w
   433  07F4  067D               	xorwf	btemp+-1,w
   434  07F5  1903               	btfsc	3,2
   435  07F6  3400               	retlw	0
   436  07F7  0AFF               	incf	btemp+1,f
   437  07F8  1903               	btfsc	3,2
   438  07F9  0AFE               	incf	btemp,f
   439  07FA  2FEC               	goto	init_ram0
   440                           
   441                           	psect	cstackBANK3
   442  0190                     __pcstackBANK3:
   443  0190                     main@save_counter:
   444                           
   445                           ; 1 bytes @ 0x0
   446  0190                     	ds	1
   447  0191                     main@i:
   448                           
   449                           ; 1 bytes @ 0x1
   450  0191                     	ds	1
   451  0192                     main@temp:
   452                           
   453                           ; 12 bytes @ 0x2
   454  0192                     	ds	12
   455  019E                     main@Laps:
   456                           
   457                           ; 72 bytes @ 0xE
   458  019E                     	ds	72
   459                           
   460                           	psect	cstackCOMMON
   461  0070                     __pcstackCOMMON:
   462  0070                     ?_LCD_Init:
   463  0070                     ?_Timer1_Init:	
   464                           ; 1 bytes @ 0x0
   465                           
   466  0070                     ?_LCD_SendCMD:	
   467                           ; 1 bytes @ 0x0
   468                           
   469  0070                     ?_ISR:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ??_ISR:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_main:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_LCD_DisChar:	
   479                           ; 1 bytes @ 0x0
   480                           
   481                           
   482                           ; 1 bytes @ 0x0
   483  0070                     	ds	3
   484  0073                     ??_Timer1_Init:
   485  0073                     ??_LCD_SendCMD:	
   486                           ; 1 bytes @ 0x3
   487                           
   488  0073                     ??_LCD_DisChar:	
   489                           ; 1 bytes @ 0x3
   490                           
   491  0073                     ?___bmul:	
   492                           ; 1 bytes @ 0x3
   493                           
   494  0073                     ??___aldiv:	
   495                           ; 1 bytes @ 0x3
   496                           
   497  0073                     ??___almod:	
   498                           ; 1 bytes @ 0x3
   499                           
   500  0073                     ___bmul@multiplicand:	
   501                           ; 1 bytes @ 0x3
   502                           
   503                           
   504                           ; 1 bytes @ 0x3
   505  0073                     	ds	1
   506  0074                     ??___bmul:
   507  0074                     ___bmul@product:	
   508                           ; 1 bytes @ 0x4
   509                           
   510  0074                     ___almod@counter:	
   511                           ; 1 bytes @ 0x4
   512                           
   513                           
   514                           ; 1 bytes @ 0x4
   515  0074                     	ds	1
   516  0075                     LCD_SendCMD@COMMAND:
   517  0075                     LCD_DisChar@DATA:	
   518                           ; 1 bytes @ 0x5
   519                           
   520  0075                     ___bmul@multiplier:	
   521                           ; 1 bytes @ 0x5
   522                           
   523  0075                     ___almod@sign:	
   524                           ; 1 bytes @ 0x5
   525                           
   526                           
   527                           ; 1 bytes @ 0x5
   528  0075                     	ds	1
   529  0076                     ??_LCD_Init:
   530  0076                     ??_LCD_Int2Str:	
   531                           ; 1 bytes @ 0x6
   532                           
   533  0076                     ?_LCD_DisStr:	
   534                           ; 1 bytes @ 0x6
   535                           
   536  0076                     ?_LCD_GotoRC:	
   537                           ; 1 bytes @ 0x6
   538                           
   539  0076                     LCD_GotoRC@column:	
   540                           ; 1 bytes @ 0x6
   541                           
   542  0076                     LCD_DisStr@str:	
   543                           ; 1 bytes @ 0x6
   544                           
   545                           
   546                           ; 2 bytes @ 0x6
   547  0076                     	ds	1
   548  0077                     ??_LCD_GotoRC:
   549  0077                     LCD_GotoRC@row:	
   550                           ; 1 bytes @ 0x7
   551                           
   552                           
   553                           ; 1 bytes @ 0x7
   554  0077                     	ds	1
   555  0078                     ??_LCD_DisStrRC:
   556                           
   557                           	psect	cstackBANK0
   558  0049                     __pcstackBANK0:	
   559                           ; 1 bytes @ 0x8
   560                           
   561  0049                     ??_LCD_DisStr:
   562  0049                     ?___aldiv:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0049                     ?___almod:	
   566                           ; 4 bytes @ 0x0
   567                           
   568  0049                     ___aldiv@divisor:	
   569                           ; 4 bytes @ 0x0
   570                           
   571  0049                     ___almod@divisor:	
   572                           ; 4 bytes @ 0x0
   573                           
   574                           
   575                           ; 4 bytes @ 0x0
   576  0049                     	ds	2
   577  004B                     LCD_DisStr@i:
   578                           
   579                           ; 1 bytes @ 0x2
   580  004B                     	ds	1
   581  004C                     ?_LCD_DisStrRC:
   582  004C                     LCD_DisStrRC@str:	
   583                           ; 1 bytes @ 0x3
   584                           
   585                           
   586                           ; 2 bytes @ 0x3
   587  004C                     	ds	1
   588  004D                     ___aldiv@dividend:
   589  004D                     ___almod@dividend:	
   590                           ; 4 bytes @ 0x4
   591                           
   592                           
   593                           ; 4 bytes @ 0x4
   594  004D                     	ds	1
   595  004E                     LCD_DisStrRC@row:
   596                           
   597                           ; 1 bytes @ 0x5
   598  004E                     	ds	1
   599  004F                     LCD_DisStrRC@column:
   600                           
   601                           ; 1 bytes @ 0x6
   602  004F                     	ds	2
   603  0051                     ___aldiv@counter:
   604                           
   605                           ; 1 bytes @ 0x8
   606  0051                     	ds	1
   607  0052                     ___aldiv@sign:
   608                           
   609                           ; 1 bytes @ 0x9
   610  0052                     	ds	1
   611  0053                     ___aldiv@quotient:
   612                           
   613                           ; 4 bytes @ 0xA
   614  0053                     	ds	4
   615  0057                     ?_LCD_Int2Str:
   616  0057                     LCD_Int2Str@Integer:	
   617                           ; 1 bytes @ 0xE
   618                           
   619                           
   620                           ; 4 bytes @ 0xE
   621  0057                     	ds	4
   622  005B                     LCD_Int2Str@str:
   623                           
   624                           ; 1 bytes @ 0x12
   625  005B                     	ds	1
   626  005C                     LCD_Int2Str@temp:
   627                           
   628                           ; 1 bytes @ 0x13
   629  005C                     	ds	1
   630  005D                     LCD_Int2Str@j:
   631                           
   632                           ; 1 bytes @ 0x14
   633  005D                     	ds	1
   634  005E                     LCD_Int2Str@i:
   635                           
   636                           ; 1 bytes @ 0x15
   637  005E                     	ds	1
   638  005F                     ??_main:
   639                           
   640                           ; 1 bytes @ 0x16
   641  005F                     	ds	4
   642                           
   643                           	psect	maintext
   644  0039                     __pmaintext:	
   645 ;;
   646 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   647 ;;
   648 ;; *************** function _main *****************
   649 ;; Defined at:
   650 ;;		line 79 in file "main.c"
   651 ;; Parameters:    Size  Location     Type
   652 ;;		None
   653 ;; Auto vars:     Size  Location     Type
   654 ;;  i               1    1[BANK3 ] unsigned char 
   655 ;;  Laps           72   14[BANK3 ] struct .
   656 ;;  temp           12    2[BANK3 ] struct .
   657 ;;  save_counter    1    0[BANK3 ] unsigned char 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  1    wreg      void 
   660 ;; Registers used:
   661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : B00/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   667 ;;      Params:         0       0       0       0       0
   668 ;;      Locals:         0       0       0      86       0
   669 ;;      Temps:          0       4       0       0       0
   670 ;;      Totals:         0       4       0      86       0
   671 ;;Total ram usage:       90 bytes
   672 ;; Hardware stack levels required when called:    4
   673 ;; This function calls:
   674 ;;		_LCD_DisStrRC
   675 ;;		_LCD_Init
   676 ;;		_LCD_Int2Str
   677 ;;		_LCD_SendCMD
   678 ;;		_Timer1_Init
   679 ;;		___bmul
   680 ;; This function is called by:
   681 ;;		Startup code after reset
   682 ;; This function uses a non-reentrant model
   683 ;;
   684                           
   685                           
   686                           ;psect for function _main
   687  0039                     _main:
   688  0039                     l1856:	
   689                           ;incstack = 0
   690                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   691                           
   692                           
   693                           ;main.c: 82:     TRISBbits.TRISB3 = 1;
   694  0039  1683               	bsf	3,5	;RP0=1, select bank1
   695  003A  1303               	bcf	3,6	;RP1=0, select bank1
   696  003B  1586               	bsf	6,3	;volatile
   697                           
   698                           ;main.c: 83:     TRISBbits.TRISB4 = 1;
   699  003C  1606               	bsf	6,4	;volatile
   700                           
   701                           ;main.c: 84:     TRISBbits.TRISB3 = 1;
   702  003D  1586               	bsf	6,3	;volatile
   703                           
   704                           ;main.c: 85:     TRISBbits.TRISB4 = 1;
   705  003E  1606               	bsf	6,4	;volatile
   706  003F                     l1858:
   707                           
   708                           ;main.c: 88:     LCD_Init();
   709  003F  120A  118A  2768  120A  118A  	fcall	_LCD_Init
   710  0044                     l1860:
   711                           
   712                           ;main.c: 89:     Timer1_Init();
   713  0044  120A  158A  27ED  120A  118A  	fcall	_Timer1_Init
   714  0049                     l1862:
   715                           
   716                           ;main.c: 91:     Laps_t Laps;;main.c: 92:     Lap_t temp;;main.c: 96:     LCD_DisStrRC(M
      +                          assage1, 0, 3);
   717  0049  3030               	movlw	(low (_Massage1| 0))& (0+255)
   718  004A  1283               	bcf	3,5	;RP0=0, select bank0
   719  004B  1303               	bcf	3,6	;RP1=0, select bank0
   720  004C  00CC               	movwf	LCD_DisStrRC@str
   721  004D  3000               	movlw	0
   722  004E  00CD               	movwf	LCD_DisStrRC@str+1
   723  004F  01CE               	clrf	LCD_DisStrRC@row
   724  0050  3003               	movlw	3
   725  0051  00FF               	movwf	btemp+1
   726  0052  087F               	movf	btemp+1,w
   727  0053  00CF               	movwf	LCD_DisStrRC@column
   728  0054  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
   729  0059                     l1864:
   730                           
   731                           ;main.c: 97:     LCD_DisStrRC(Massage2, 1, 0);
   732  0059  3020               	movlw	(low (_Massage2| 0))& (0+255)
   733  005A  1283               	bcf	3,5	;RP0=0, select bank0
   734  005B  1303               	bcf	3,6	;RP1=0, select bank0
   735  005C  00CC               	movwf	LCD_DisStrRC@str
   736  005D  3000               	movlw	0
   737  005E  00CD               	movwf	LCD_DisStrRC@str+1
   738  005F  01CE               	clrf	LCD_DisStrRC@row
   739  0060  0ACE               	incf	LCD_DisStrRC@row,f
   740  0061  01CF               	clrf	LCD_DisStrRC@column
   741  0062  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
   742  0067                     l1866:
   743                           
   744                           ;main.c: 101:     INIT_DONE = 0;
   745  0067  1683               	bsf	3,5	;RP0=1, select bank3
   746  0068  1703               	bsf	3,6	;RP1=1, select bank3
   747  0069  01E6               	clrf	_INIT_DONE^(0+384)
   748  006A                     l1868:
   749                           
   750                           ;main.c: 102:     uint8_t save_counter = 0;
   751  006A  0190               	clrf	main@save_counter^(0+384)
   752  006B                     l1870:
   753                           
   754                           ;main.c: 105:         if (Lap_MilliSeconds > 100) {
   755  006B  3065               	movlw	101
   756  006C  1683               	bsf	3,5	;RP0=1, select bank3
   757  006D  1703               	bsf	3,6	;RP1=1, select bank3
   758  006E  026D               	subwf	_Lap_MilliSeconds^(0+384),w
   759  006F  1C03               	skipc
   760  0070  2872               	goto	u1301
   761  0071  2873               	goto	u1300
   762  0072                     u1301:
   763  0072  2878               	goto	l1876
   764  0073                     u1300:
   765  0073                     l1872:
   766                           
   767                           ;main.c: 106:             Lap_Seconds++;
   768  0073  3001               	movlw	1
   769  0074  00FF               	movwf	btemp+1
   770  0075  087F               	movf	btemp+1,w
   771  0076  07EC               	addwf	_Lap_Seconds^(0+384),f
   772  0077                     l1874:
   773                           
   774                           ;main.c: 107:             Lap_MilliSeconds = 0;
   775  0077  01ED               	clrf	_Lap_MilliSeconds^(0+384)
   776  0078                     l1876:
   777                           
   778                           ;main.c: 110:         if (Lap_Seconds == 60) {
   779  0078  303C               	movlw	60
   780  0079  066C               	xorwf	_Lap_Seconds^(0+384),w
   781  007A  1D03               	btfss	3,2
   782  007B  287D               	goto	u1311
   783  007C  287E               	goto	u1310
   784  007D                     u1311:
   785  007D  2883               	goto	l1882
   786  007E                     u1310:
   787  007E                     l1878:
   788                           
   789                           ;main.c: 111:             Lap_Minutes++;
   790  007E  3001               	movlw	1
   791  007F  00FF               	movwf	btemp+1
   792  0080  087F               	movf	btemp+1,w
   793  0081  07EB               	addwf	_Lap_Minutes^(0+384),f
   794  0082                     l1880:
   795                           
   796                           ;main.c: 112:             Lap_Seconds = 0;
   797  0082  01EC               	clrf	_Lap_Seconds^(0+384)
   798  0083                     l1882:
   799                           
   800                           ;main.c: 115:         if (Lap_Minutes == 60) {
   801  0083  303C               	movlw	60
   802  0084  066B               	xorwf	_Lap_Minutes^(0+384),w
   803  0085  1D03               	btfss	3,2
   804  0086  2888               	goto	u1321
   805  0087  2889               	goto	u1320
   806  0088                     u1321:
   807  0088  288E               	goto	l1888
   808  0089                     u1320:
   809  0089                     l1884:
   810                           
   811                           ;main.c: 116:             Lap_Hours++;
   812  0089  3001               	movlw	1
   813  008A  00FF               	movwf	btemp+1
   814  008B  087F               	movf	btemp+1,w
   815  008C  07EA               	addwf	_Lap_Hours^(0+384),f
   816  008D                     l1886:
   817                           
   818                           ;main.c: 117:             Lap_Minutes = 0;
   819  008D  01EB               	clrf	_Lap_Minutes^(0+384)
   820  008E                     l1888:
   821                           
   822                           ;main.c: 120:         if (Lap_Hours == 60) {
   823  008E  303C               	movlw	60
   824  008F  066A               	xorwf	_Lap_Hours^(0+384),w
   825  0090  1D03               	btfss	3,2
   826  0091  2893               	goto	u1331
   827  0092  2894               	goto	u1330
   828  0093                     u1331:
   829  0093  2895               	goto	l1892
   830  0094                     u1330:
   831  0094                     l1890:
   832                           
   833                           ;main.c: 121:             Lap_Hours = 0;
   834  0094  01EA               	clrf	_Lap_Hours^(0+384)
   835  0095                     l1892:
   836                           
   837                           ;main.c: 124:         if (RB3 == 0) {
   838  0095  1283               	bcf	3,5	;RP0=0, select bank0
   839  0096  1303               	bcf	3,6	;RP1=0, select bank0
   840  0097  1986               	btfsc	6,3	;volatile
   841  0098  289A               	goto	u1341
   842  0099  289B               	goto	u1340
   843  009A                     u1341:
   844  009A  28D6               	goto	l86
   845  009B                     u1340:
   846  009B                     l87:
   847  009B  1D86               	btfss	6,3	;volatile
   848  009C  289E               	goto	u1351
   849  009D  289F               	goto	u1350
   850  009E                     u1351:
   851  009E  289B               	goto	l87
   852  009F                     u1350:
   853  009F  28C2               	goto	l1910
   854  00A0                     l91:	
   855                           ;main.c: 127:                 case 1:
   856                           
   857                           
   858                           ;main.c: 128:                     TMR1ON = 0;
   859  00A0  1010               	bcf	16,0	;volatile
   860  00A1                     l1896:
   861                           
   862                           ;main.c: 129:                     Start_Stop_Status = 0;
   863  00A1  1683               	bsf	3,5	;RP0=1, select bank3
   864  00A2  1703               	bsf	3,6	;RP1=1, select bank3
   865  00A3  01EE               	clrf	_Start_Stop_Status^(0+384)
   866                           
   867                           ;main.c: 130:                     break;
   868  00A4  28D6               	goto	l86
   869  00A5                     l1898:
   870                           
   871                           ;main.c: 133:                     LCD_SendCMD((0x01));
   872  00A5  3001               	movlw	1
   873  00A6  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
   874  00AB                     l1900:
   875                           
   876                           ;main.c: 134:                     LCD_DisStrRC(Massage3, 0, 0);
   877  00AB  3042               	movlw	(low (_Massage3| 0))& (0+255)
   878  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   879  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   880  00AE  00CC               	movwf	LCD_DisStrRC@str
   881  00AF  3000               	movlw	0
   882  00B0  00CD               	movwf	LCD_DisStrRC@str+1
   883  00B1  01CE               	clrf	LCD_DisStrRC@row
   884  00B2  01CF               	clrf	LCD_DisStrRC@column
   885  00B3  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
   886  00B8                     l1902:
   887                           
   888                           ;main.c: 135:                     TMR1ON = 1;
   889  00B8  1283               	bcf	3,5	;RP0=0, select bank0
   890  00B9  1303               	bcf	3,6	;RP1=0, select bank0
   891  00BA  1410               	bsf	16,0	;volatile
   892  00BB                     l1904:
   893                           
   894                           ;main.c: 136:                     Start_Stop_Status = 1;
   895  00BB  1683               	bsf	3,5	;RP0=1, select bank3
   896  00BC  1703               	bsf	3,6	;RP1=1, select bank3
   897  00BD  01EE               	clrf	_Start_Stop_Status^(0+384)
   898  00BE  0AEE               	incf	_Start_Stop_Status^(0+384),f
   899  00BF                     l94:	
   900                           ;main.c: 145:                     }
   901                           
   902                           
   903                           ;main.c: 146:                     INIT_DONE = 1;
   904  00BF  01E6               	clrf	_INIT_DONE^(0+384)
   905  00C0  0AE6               	incf	_INIT_DONE^(0+384),f
   906                           
   907                           ;main.c: 147:                     break;
   908  00C1  28D6               	goto	l86
   909  00C2                     l1910:
   910  00C2  1683               	bsf	3,5	;RP0=1, select bank3
   911  00C3  1703               	bsf	3,6	;RP1=1, select bank3
   912  00C4  086E               	movf	_Start_Stop_Status^(0+384),w
   913  00C5  1283               	bcf	3,5	;RP0=0, select bank0
   914  00C6  1303               	bcf	3,6	;RP1=0, select bank0
   915  00C7  00DF               	movwf	??_main
   916  00C8  01E0               	clrf	??_main+1
   917                           
   918                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   919                           ; Switch size 1, requested type "simple"
   920                           ; Number of cases is 1, Range of values is 0 to 0
   921                           ; switch strategies available:
   922                           ; Name         Instructions Cycles
   923                           ; simple_byte            4     3 (average)
   924                           ; direct_byte           11     8 (fixed)
   925                           ; jumptable            260     6 (fixed)
   926                           ;	Chosen strategy is simple_byte
   927  00C9  0860               	movf	??_main+1,w
   928  00CA  3A00               	xorlw	0	; case 0
   929  00CB  1903               	skipnz
   930  00CC  28CE               	goto	l2110
   931  00CD  28D6               	goto	l86
   932  00CE                     l2110:
   933                           
   934                           ; Switch size 1, requested type "simple"
   935                           ; Number of cases is 2, Range of values is 0 to 1
   936                           ; switch strategies available:
   937                           ; Name         Instructions Cycles
   938                           ; simple_byte            7     4 (average)
   939                           ; direct_byte           14     8 (fixed)
   940                           ; jumptable            260     6 (fixed)
   941                           ;	Chosen strategy is simple_byte
   942  00CE  085F               	movf	??_main,w
   943  00CF  3A00               	xorlw	0	; case 0
   944  00D0  1903               	skipnz
   945  00D1  28A5               	goto	l1898
   946  00D2  3A01               	xorlw	1	; case 1
   947  00D3  1903               	skipnz
   948  00D4  28A0               	goto	l91
   949  00D5  28D6               	goto	l86
   950  00D6                     l86:	
   951                           ;main.c: 149:         }
   952                           
   953                           
   954                           ;main.c: 152:         if (RB5 == 0) {
   955  00D6  1283               	bcf	3,5	;RP0=0, select bank0
   956  00D7  1303               	bcf	3,6	;RP1=0, select bank0
   957  00D8  1A86               	btfsc	6,5	;volatile
   958  00D9  28DB               	goto	u1361
   959  00DA  28DC               	goto	u1360
   960  00DB                     u1361:
   961  00DB  28F3               	goto	l1922
   962  00DC                     u1360:
   963  00DC                     l96:
   964  00DC  1E86               	btfss	6,5	;volatile
   965  00DD  28DF               	goto	u1371
   966  00DE  28E0               	goto	u1370
   967  00DF                     u1371:
   968  00DF  28DC               	goto	l96
   969  00E0                     u1370:
   970  00E0                     l1914:
   971                           
   972                           ;main.c: 154:             if (Start_Stop_Status == 0) {
   973  00E0  1683               	bsf	3,5	;RP0=1, select bank3
   974  00E1  1703               	bsf	3,6	;RP1=1, select bank3
   975  00E2  086E               	movf	_Start_Stop_Status^(0+384),w
   976  00E3  1D03               	btfss	3,2
   977  00E4  28E6               	goto	u1381
   978  00E5  28E7               	goto	u1380
   979  00E6                     u1381:
   980  00E6  28F3               	goto	l1922
   981  00E7                     u1380:
   982  00E7                     l1916:
   983                           
   984                           ;main.c: 155:                 scroll_counter++;
   985  00E7  3001               	movlw	1
   986  00E8  00FF               	movwf	btemp+1
   987  00E9  087F               	movf	btemp+1,w
   988  00EA  07E8               	addwf	_scroll_counter^(0+384),f
   989  00EB                     l1918:
   990                           
   991                           ;main.c: 156:                 if (scroll_counter > 4) {
   992  00EB  0868               	movf	_scroll_counter^(0+384),w
   993  00EC  3A80               	xorlw	128
   994  00ED  3E7B               	addlw	-133
   995  00EE  1C03               	skipc
   996  00EF  28F1               	goto	u1391
   997  00F0  28F2               	goto	u1390
   998  00F1                     u1391:
   999  00F1  28F3               	goto	l1922
  1000  00F2                     u1390:
  1001  00F2                     l1920:
  1002                           
  1003                           ;main.c: 157:                     scroll_counter = 0;
  1004  00F2  01E8               	clrf	_scroll_counter^(0+384)
  1005  00F3                     l1922:
  1006                           
  1007                           ;main.c: 162:         if (RB0 == 0) {
  1008  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1009  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1010  00F5  1806               	btfsc	6,0	;volatile
  1011  00F6  28F8               	goto	u1401
  1012  00F7  28F9               	goto	u1400
  1013  00F8                     u1401:
  1014  00F8  2910               	goto	l1934
  1015  00F9                     u1400:
  1016  00F9                     l102:
  1017  00F9  1C06               	btfss	6,0	;volatile
  1018  00FA  28FC               	goto	u1411
  1019  00FB  28FD               	goto	u1410
  1020  00FC                     u1411:
  1021  00FC  28F9               	goto	l102
  1022  00FD                     u1410:
  1023  00FD                     l1926:
  1024                           
  1025                           ;main.c: 164:             if (Start_Stop_Status == 0) {
  1026  00FD  1683               	bsf	3,5	;RP0=1, select bank3
  1027  00FE  1703               	bsf	3,6	;RP1=1, select bank3
  1028  00FF  086E               	movf	_Start_Stop_Status^(0+384),w
  1029  0100  1D03               	btfss	3,2
  1030  0101  2903               	goto	u1421
  1031  0102  2904               	goto	u1420
  1032  0103                     u1421:
  1033  0103  2910               	goto	l1934
  1034  0104                     u1420:
  1035  0104                     l1928:
  1036                           
  1037                           ;main.c: 165:                 scroll_counter--;
  1038  0104  30FF               	movlw	255
  1039  0105  00FF               	movwf	btemp+1
  1040  0106  087F               	movf	btemp+1,w
  1041  0107  07E8               	addwf	_scroll_counter^(0+384),f
  1042  0108                     l1930:
  1043                           
  1044                           ;main.c: 166:                 if (scroll_counter < 0) {
  1045  0108  1FE8               	btfss	_scroll_counter^(0+384),7
  1046  0109  290B               	goto	u1431
  1047  010A  290C               	goto	u1430
  1048  010B                     u1431:
  1049  010B  2910               	goto	l1934
  1050  010C                     u1430:
  1051  010C                     l1932:
  1052                           
  1053                           ;main.c: 167:                     scroll_counter = 4;
  1054  010C  3004               	movlw	4
  1055  010D  00FF               	movwf	btemp+1
  1056  010E  087F               	movf	btemp+1,w
  1057  010F  00E8               	movwf	_scroll_counter^(0+384)
  1058  0110                     l1934:
  1059                           
  1060                           ;main.c: 173:         if (RB4 == 0) {
  1061  0110  1283               	bcf	3,5	;RP0=0, select bank0
  1062  0111  1303               	bcf	3,6	;RP1=0, select bank0
  1063  0112  1A06               	btfsc	6,4	;volatile
  1064  0113  2915               	goto	u1441
  1065  0114  2916               	goto	u1440
  1066  0115                     u1441:
  1067  0115  294B               	goto	l1948
  1068  0116                     u1440:
  1069  0116                     l108:
  1070  0116  1E06               	btfss	6,4	;volatile
  1071  0117  2919               	goto	u1451
  1072  0118  291A               	goto	u1450
  1073  0119                     u1451:
  1074  0119  2916               	goto	l108
  1075  011A                     u1450:
  1076  011A  2937               	goto	l1946
  1077  011B                     l1938:
  1078                           
  1079                           ;main.c: 177:                     Lap_counter++;
  1080  011B  3001               	movlw	1
  1081  011C  00FF               	movwf	btemp+1
  1082  011D  087F               	movf	btemp+1,w
  1083  011E  1683               	bsf	3,5	;RP0=1, select bank3
  1084  011F  1703               	bsf	3,6	;RP1=1, select bank3
  1085  0120  07E9               	addwf	_Lap_counter^(0+384),f
  1086                           
  1087                           ;main.c: 178:                     save_counter++;
  1088  0121  3001               	movlw	1
  1089  0122  00FF               	movwf	btemp+1
  1090  0123  087F               	movf	btemp+1,w
  1091  0124  0790               	addwf	main@save_counter^(0+384),f
  1092  0125                     l1940:
  1093                           
  1094                           ;main.c: 179:                     if (Lap_counter > 5) {
  1095  0125  3006               	movlw	6
  1096  0126  0269               	subwf	_Lap_counter^(0+384),w
  1097  0127  1C03               	skipc
  1098  0128  292A               	goto	u1461
  1099  0129  292B               	goto	u1460
  1100  012A                     u1461:
  1101  012A  292D               	goto	l113
  1102  012B                     u1460:
  1103  012B                     l1942:
  1104                           
  1105                           ;main.c: 180:                         Lap_counter = 1;
  1106  012B  01E9               	clrf	_Lap_counter^(0+384)
  1107  012C  0AE9               	incf	_Lap_counter^(0+384),f
  1108  012D                     l113:	
  1109                           ;main.c: 181:                     }
  1110                           
  1111                           
  1112                           ;main.c: 183:                     LAP_flag = 1;
  1113  012D  01E7               	clrf	_LAP_flag^(0+384)
  1114  012E  0AE7               	incf	_LAP_flag^(0+384),f
  1115                           
  1116                           ;main.c: 184:                     first_lap = 1;
  1117  012F  01FA               	clrf	_first_lap
  1118  0130  0AFA               	incf	_first_lap,f
  1119                           
  1120                           ;main.c: 185:                     break;
  1121  0131  294B               	goto	l1948
  1122  0132                     l115:	
  1123                           ;main.c: 187:                 case 0:
  1124                           
  1125                           
  1126                           ;main.c: 188:                     Reset_flag = 1;
  1127  0132  1683               	bsf	3,5	;RP0=1, select bank3
  1128  0133  1703               	bsf	3,6	;RP1=1, select bank3
  1129  0134  01EF               	clrf	_Reset_flag^(0+384)
  1130  0135  0AEF               	incf	_Reset_flag^(0+384),f
  1131                           
  1132                           ;main.c: 189:                     break;
  1133  0136  294B               	goto	l1948
  1134  0137                     l1946:
  1135  0137  1683               	bsf	3,5	;RP0=1, select bank3
  1136  0138  1703               	bsf	3,6	;RP1=1, select bank3
  1137  0139  086E               	movf	_Start_Stop_Status^(0+384),w
  1138  013A  1283               	bcf	3,5	;RP0=0, select bank0
  1139  013B  1303               	bcf	3,6	;RP1=0, select bank0
  1140  013C  00DF               	movwf	??_main
  1141  013D  01E0               	clrf	??_main+1
  1142                           
  1143                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1144                           ; Switch size 1, requested type "simple"
  1145                           ; Number of cases is 1, Range of values is 0 to 0
  1146                           ; switch strategies available:
  1147                           ; Name         Instructions Cycles
  1148                           ; simple_byte            4     3 (average)
  1149                           ; direct_byte           11     8 (fixed)
  1150                           ; jumptable            260     6 (fixed)
  1151                           ;	Chosen strategy is simple_byte
  1152  013E  0860               	movf	??_main+1,w
  1153  013F  3A00               	xorlw	0	; case 0
  1154  0140  1903               	skipnz
  1155  0141  2943               	goto	l2112
  1156  0142  294B               	goto	l1948
  1157  0143                     l2112:
  1158                           
  1159                           ; Switch size 1, requested type "simple"
  1160                           ; Number of cases is 2, Range of values is 0 to 1
  1161                           ; switch strategies available:
  1162                           ; Name         Instructions Cycles
  1163                           ; simple_byte            7     4 (average)
  1164                           ; direct_byte           14     8 (fixed)
  1165                           ; jumptable            260     6 (fixed)
  1166                           ;	Chosen strategy is simple_byte
  1167  0143  085F               	movf	??_main,w
  1168  0144  3A00               	xorlw	0	; case 0
  1169  0145  1903               	skipnz
  1170  0146  2932               	goto	l115
  1171  0147  3A01               	xorlw	1	; case 1
  1172  0148  1903               	skipnz
  1173  0149  291B               	goto	l1938
  1174  014A  294B               	goto	l1948
  1175  014B                     l1948:
  1176                           
  1177                           ;main.c: 194:         if (Reset_flag == 1) {
  1178  014B  1683               	bsf	3,5	;RP0=1, select bank3
  1179  014C  1703               	bsf	3,6	;RP1=1, select bank3
  1180  014D  036F               	decf	_Reset_flag^(0+384),w
  1181  014E  1D03               	btfss	3,2
  1182  014F  2951               	goto	u1471
  1183  0150  2952               	goto	u1470
  1184  0151                     u1471:
  1185  0151  29DE               	goto	l1976
  1186  0152                     u1470:
  1187  0152                     l1950:
  1188                           
  1189                           ;main.c: 196:             uint8_t i = 0;
  1190  0152  0191               	clrf	main@i^(0+384)
  1191                           
  1192                           ;main.c: 197:             for (i = 0; i < 5; i++) {
  1193  0153  0191               	clrf	main@i^(0+384)
  1194  0154                     l1956:
  1195                           
  1196                           ;main.c: 198:                 Laps.Laps[i].Lap_1_MilliSeconds[0] = '0';
  1197  0154  300C               	movlw	12
  1198  0155  00FF               	movwf	btemp+1
  1199  0156  087F               	movf	btemp+1,w
  1200  0157  00F3               	movwf	___bmul@multiplicand
  1201  0158  0811               	movf	main@i^(0+384),w
  1202  0159  120A  118A  27D3  120A  118A  	fcall	___bmul
  1203  015E  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1204  015F  0084               	movwf	4
  1205  0160  3030               	movlw	48
  1206  0161  00FF               	movwf	btemp+1
  1207  0162  087F               	movf	btemp+1,w
  1208  0163  1783               	bsf	3,7	;select IRP bank3
  1209  0164  0080               	movwf	0
  1210  0165                     l1958:
  1211                           
  1212                           ;main.c: 199:                 Laps.Laps[1].Lap_1_Seconds[0] = '0';
  1213  0165  3030               	movlw	48
  1214  0166  00FF               	movwf	btemp+1
  1215  0167  087F               	movf	btemp+1,w
  1216  0168  1683               	bsf	3,5	;RP0=1, select bank3
  1217  0169  1703               	bsf	3,6	;RP1=1, select bank3
  1218  016A  00AD               	movwf	(main@Laps^(0+384)+15)
  1219  016B                     l1960:
  1220                           
  1221                           ;main.c: 200:                 Laps.Laps[i].Lap_1_Minutes[0] = '0';
  1222  016B  300C               	movlw	12
  1223  016C  00FF               	movwf	btemp+1
  1224  016D  087F               	movf	btemp+1,w
  1225  016E  00F3               	movwf	___bmul@multiplicand
  1226  016F  0811               	movf	main@i^(0+384),w
  1227  0170  120A  118A  27D3  120A  118A  	fcall	___bmul
  1228  0175  3E06               	addlw	6
  1229  0176  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1230  0177  0084               	movwf	4
  1231  0178  3030               	movlw	48
  1232  0179  00FF               	movwf	btemp+1
  1233  017A  087F               	movf	btemp+1,w
  1234  017B  1783               	bsf	3,7	;select IRP bank3
  1235  017C  0080               	movwf	0
  1236  017D                     l1962:
  1237                           
  1238                           ;main.c: 201:                 Laps.Laps[i].Lap_1_Hours[0] = '0';
  1239  017D  300C               	movlw	12
  1240  017E  00FF               	movwf	btemp+1
  1241  017F  087F               	movf	btemp+1,w
  1242  0180  00F3               	movwf	___bmul@multiplicand
  1243  0181  1683               	bsf	3,5	;RP0=1, select bank3
  1244  0182  1703               	bsf	3,6	;RP1=1, select bank3
  1245  0183  0811               	movf	main@i^(0+384),w
  1246  0184  120A  118A  27D3  120A  118A  	fcall	___bmul
  1247  0189  3E09               	addlw	9
  1248  018A  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1249  018B  0084               	movwf	4
  1250  018C  3030               	movlw	48
  1251  018D  00FF               	movwf	btemp+1
  1252  018E  087F               	movf	btemp+1,w
  1253  018F  1783               	bsf	3,7	;select IRP bank3
  1254  0190  0080               	movwf	0
  1255  0191                     l1964:
  1256                           
  1257                           ;main.c: 202:                 Laps.Laps[i].Lap_1_MilliSeconds[1] = ' ';
  1258  0191  300C               	movlw	12
  1259  0192  00FF               	movwf	btemp+1
  1260  0193  087F               	movf	btemp+1,w
  1261  0194  00F3               	movwf	___bmul@multiplicand
  1262  0195  1683               	bsf	3,5	;RP0=1, select bank3
  1263  0196  1703               	bsf	3,6	;RP1=1, select bank3
  1264  0197  0811               	movf	main@i^(0+384),w
  1265  0198  120A  118A  27D3  120A  118A  	fcall	___bmul
  1266  019D  3E01               	addlw	1
  1267  019E  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1268  019F  0084               	movwf	4
  1269  01A0  3020               	movlw	32
  1270  01A1  00FF               	movwf	btemp+1
  1271  01A2  087F               	movf	btemp+1,w
  1272  01A3  1783               	bsf	3,7	;select IRP bank3
  1273  01A4  0080               	movwf	0
  1274                           
  1275                           ;main.c: 203:                 Laps.Laps[1].Lap_1_Seconds[1] = ' ';
  1276  01A5  3020               	movlw	32
  1277  01A6  00FF               	movwf	btemp+1
  1278  01A7  087F               	movf	btemp+1,w
  1279  01A8  1683               	bsf	3,5	;RP0=1, select bank3
  1280  01A9  1703               	bsf	3,6	;RP1=1, select bank3
  1281  01AA  00AE               	movwf	(main@Laps^(0+384)+16)
  1282  01AB                     l1966:
  1283                           
  1284                           ;main.c: 204:                 Laps.Laps[i].Lap_1_Minutes[1] = ' ';
  1285  01AB  300C               	movlw	12
  1286  01AC  00FF               	movwf	btemp+1
  1287  01AD  087F               	movf	btemp+1,w
  1288  01AE  00F3               	movwf	___bmul@multiplicand
  1289  01AF  0811               	movf	main@i^(0+384),w
  1290  01B0  120A  118A  27D3  120A  118A  	fcall	___bmul
  1291  01B5  3E07               	addlw	7
  1292  01B6  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1293  01B7  0084               	movwf	4
  1294  01B8  3020               	movlw	32
  1295  01B9  00FF               	movwf	btemp+1
  1296  01BA  087F               	movf	btemp+1,w
  1297  01BB  1783               	bsf	3,7	;select IRP bank3
  1298  01BC  0080               	movwf	0
  1299  01BD                     l1968:
  1300                           
  1301                           ;main.c: 205:                 Laps.Laps[i].Lap_1_Hours[1] = ' ';
  1302  01BD  300C               	movlw	12
  1303  01BE  00FF               	movwf	btemp+1
  1304  01BF  087F               	movf	btemp+1,w
  1305  01C0  00F3               	movwf	___bmul@multiplicand
  1306  01C1  1683               	bsf	3,5	;RP0=1, select bank3
  1307  01C2  1703               	bsf	3,6	;RP1=1, select bank3
  1308  01C3  0811               	movf	main@i^(0+384),w
  1309  01C4  120A  118A  27D3  120A  118A  	fcall	___bmul
  1310  01C9  3E0A               	addlw	10
  1311  01CA  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1312  01CB  0084               	movwf	4
  1313  01CC  3020               	movlw	32
  1314  01CD  00FF               	movwf	btemp+1
  1315  01CE  087F               	movf	btemp+1,w
  1316  01CF  1783               	bsf	3,7	;select IRP bank3
  1317  01D0  0080               	movwf	0
  1318  01D1                     l1970:
  1319                           
  1320                           ;main.c: 206:             }
  1321  01D1  3001               	movlw	1
  1322  01D2  00FF               	movwf	btemp+1
  1323  01D3  087F               	movf	btemp+1,w
  1324  01D4  1683               	bsf	3,5	;RP0=1, select bank3
  1325  01D5  1703               	bsf	3,6	;RP1=1, select bank3
  1326  01D6  0791               	addwf	main@i^(0+384),f
  1327  01D7                     l1972:
  1328  01D7  3005               	movlw	5
  1329  01D8  0211               	subwf	main@i^(0+384),w
  1330  01D9  1C03               	skipc
  1331  01DA  29DC               	goto	u1481
  1332  01DB  29DD               	goto	u1480
  1333  01DC                     u1481:
  1334  01DC  2954               	goto	l1956
  1335  01DD                     u1480:
  1336  01DD                     l1974:
  1337                           
  1338                           ;main.c: 207:             Reset_flag = 0;
  1339  01DD  01EF               	clrf	_Reset_flag^(0+384)
  1340  01DE                     l1976:
  1341                           
  1342                           ;main.c: 211:         if (LAP_flag == 1) {
  1343  01DE  0367               	decf	_LAP_flag^(0+384),w
  1344  01DF  1D03               	btfss	3,2
  1345  01E0  29E2               	goto	u1491
  1346  01E1  29E3               	goto	u1490
  1347  01E2                     u1491:
  1348  01E2  2C4A               	goto	l2000
  1349  01E3                     u1490:
  1350  01E3                     l1978:
  1351                           
  1352                           ;main.c: 213:             LCD_Int2Str(Lap_Hours, Laps.Laps[Lap_counter - 1].Lap_1_MilliS
      +                          econds);
  1353  01E3  086A               	movf	_Lap_Hours^(0+384),w
  1354  01E4  1283               	bcf	3,5	;RP0=0, select bank0
  1355  01E5  1303               	bcf	3,6	;RP1=0, select bank0
  1356  01E6  00DF               	movwf	??_main
  1357  01E7  01E0               	clrf	??_main+1
  1358  01E8  01E1               	clrf	??_main+2
  1359  01E9  01E2               	clrf	??_main+3
  1360  01EA  0862               	movf	??_main+3,w
  1361  01EB  00DA               	movwf	LCD_Int2Str@Integer+3
  1362  01EC  0861               	movf	??_main+2,w
  1363  01ED  00D9               	movwf	LCD_Int2Str@Integer+2
  1364  01EE  0860               	movf	??_main+1,w
  1365  01EF  00D8               	movwf	LCD_Int2Str@Integer+1
  1366  01F0  085F               	movf	??_main,w
  1367  01F1  00D7               	movwf	LCD_Int2Str@Integer
  1368  01F2  300C               	movlw	12
  1369  01F3  00FF               	movwf	btemp+1
  1370  01F4  087F               	movf	btemp+1,w
  1371  01F5  00F3               	movwf	___bmul@multiplicand
  1372  01F6  1683               	bsf	3,5	;RP0=1, select bank3
  1373  01F7  1703               	bsf	3,6	;RP1=1, select bank3
  1374  01F8  0869               	movf	_Lap_counter^(0+384),w
  1375  01F9  120A  118A  27D3  120A  118A  	fcall	___bmul
  1376  01FE  3EF4               	addlw	244
  1377  01FF  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1378  0200  00FF               	movwf	btemp+1
  1379  0201  087F               	movf	btemp+1,w
  1380  0202  1283               	bcf	3,5	;RP0=0, select bank0
  1381  0203  1303               	bcf	3,6	;RP1=0, select bank0
  1382  0204  00DB               	movwf	LCD_Int2Str@str
  1383  0205  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1384                           
  1385                           ;main.c: 214:             LCD_Int2Str(Lap_Minutes, Laps.Laps[Lap_counter - 1].Lap_1_Seco
      +                          nds);
  1386  020A  1683               	bsf	3,5	;RP0=1, select bank3
  1387  020B  1703               	bsf	3,6	;RP1=1, select bank3
  1388  020C  086B               	movf	_Lap_Minutes^(0+384),w
  1389  020D  1283               	bcf	3,5	;RP0=0, select bank0
  1390  020E  1303               	bcf	3,6	;RP1=0, select bank0
  1391  020F  00DF               	movwf	??_main
  1392  0210  01E0               	clrf	??_main+1
  1393  0211  01E1               	clrf	??_main+2
  1394  0212  01E2               	clrf	??_main+3
  1395  0213  0862               	movf	??_main+3,w
  1396  0214  00DA               	movwf	LCD_Int2Str@Integer+3
  1397  0215  0861               	movf	??_main+2,w
  1398  0216  00D9               	movwf	LCD_Int2Str@Integer+2
  1399  0217  0860               	movf	??_main+1,w
  1400  0218  00D8               	movwf	LCD_Int2Str@Integer+1
  1401  0219  085F               	movf	??_main,w
  1402  021A  00D7               	movwf	LCD_Int2Str@Integer
  1403  021B  300C               	movlw	12
  1404  021C  00FF               	movwf	btemp+1
  1405  021D  087F               	movf	btemp+1,w
  1406  021E  00F3               	movwf	___bmul@multiplicand
  1407  021F  1683               	bsf	3,5	;RP0=1, select bank3
  1408  0220  1703               	bsf	3,6	;RP1=1, select bank3
  1409  0221  0869               	movf	_Lap_counter^(0+384),w
  1410  0222  120A  118A  27D3  120A  118A  	fcall	___bmul
  1411  0227  3EF7               	addlw	247
  1412  0228  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1413  0229  00FF               	movwf	btemp+1
  1414  022A  087F               	movf	btemp+1,w
  1415  022B  1283               	bcf	3,5	;RP0=0, select bank0
  1416  022C  1303               	bcf	3,6	;RP1=0, select bank0
  1417  022D  00DB               	movwf	LCD_Int2Str@str
  1418  022E  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1419                           
  1420                           ;main.c: 215:             LCD_Int2Str(Lap_Seconds, Laps.Laps[Lap_counter - 1].Lap_1_Minu
      +                          tes);
  1421  0233  1683               	bsf	3,5	;RP0=1, select bank3
  1422  0234  1703               	bsf	3,6	;RP1=1, select bank3
  1423  0235  086C               	movf	_Lap_Seconds^(0+384),w
  1424  0236  1283               	bcf	3,5	;RP0=0, select bank0
  1425  0237  1303               	bcf	3,6	;RP1=0, select bank0
  1426  0238  00DF               	movwf	??_main
  1427  0239  01E0               	clrf	??_main+1
  1428  023A  01E1               	clrf	??_main+2
  1429  023B  01E2               	clrf	??_main+3
  1430  023C  0862               	movf	??_main+3,w
  1431  023D  00DA               	movwf	LCD_Int2Str@Integer+3
  1432  023E  0861               	movf	??_main+2,w
  1433  023F  00D9               	movwf	LCD_Int2Str@Integer+2
  1434  0240  0860               	movf	??_main+1,w
  1435  0241  00D8               	movwf	LCD_Int2Str@Integer+1
  1436  0242  085F               	movf	??_main,w
  1437  0243  00D7               	movwf	LCD_Int2Str@Integer
  1438  0244  300C               	movlw	12
  1439  0245  00FF               	movwf	btemp+1
  1440  0246  087F               	movf	btemp+1,w
  1441  0247  00F3               	movwf	___bmul@multiplicand
  1442  0248  1683               	bsf	3,5	;RP0=1, select bank3
  1443  0249  1703               	bsf	3,6	;RP1=1, select bank3
  1444  024A  0869               	movf	_Lap_counter^(0+384),w
  1445  024B  120A  118A  27D3  120A  118A  	fcall	___bmul
  1446  0250  3EFA               	addlw	250
  1447  0251  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1448  0252  00FF               	movwf	btemp+1
  1449  0253  087F               	movf	btemp+1,w
  1450  0254  1283               	bcf	3,5	;RP0=0, select bank0
  1451  0255  1303               	bcf	3,6	;RP1=0, select bank0
  1452  0256  00DB               	movwf	LCD_Int2Str@str
  1453  0257  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1454                           
  1455                           ;main.c: 216:             LCD_Int2Str(Lap_MilliSeconds, Laps.Laps[Lap_counter - 1].Lap_1
      +                          _Hours);
  1456  025C  1683               	bsf	3,5	;RP0=1, select bank3
  1457  025D  1703               	bsf	3,6	;RP1=1, select bank3
  1458  025E  086D               	movf	_Lap_MilliSeconds^(0+384),w
  1459  025F  1283               	bcf	3,5	;RP0=0, select bank0
  1460  0260  1303               	bcf	3,6	;RP1=0, select bank0
  1461  0261  00DF               	movwf	??_main
  1462  0262  01E0               	clrf	??_main+1
  1463  0263  01E1               	clrf	??_main+2
  1464  0264  01E2               	clrf	??_main+3
  1465  0265  0862               	movf	??_main+3,w
  1466  0266  00DA               	movwf	LCD_Int2Str@Integer+3
  1467  0267  0861               	movf	??_main+2,w
  1468  0268  00D9               	movwf	LCD_Int2Str@Integer+2
  1469  0269  0860               	movf	??_main+1,w
  1470  026A  00D8               	movwf	LCD_Int2Str@Integer+1
  1471  026B  085F               	movf	??_main,w
  1472  026C  00D7               	movwf	LCD_Int2Str@Integer
  1473  026D  300C               	movlw	12
  1474  026E  00FF               	movwf	btemp+1
  1475  026F  087F               	movf	btemp+1,w
  1476  0270  00F3               	movwf	___bmul@multiplicand
  1477  0271  1683               	bsf	3,5	;RP0=1, select bank3
  1478  0272  1703               	bsf	3,6	;RP1=1, select bank3
  1479  0273  0869               	movf	_Lap_counter^(0+384),w
  1480  0274  120A  118A  27D3  120A  118A  	fcall	___bmul
  1481  0279  3EFD               	addlw	253
  1482  027A  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1483  027B  00FF               	movwf	btemp+1
  1484  027C  087F               	movf	btemp+1,w
  1485  027D  1283               	bcf	3,5	;RP0=0, select bank0
  1486  027E  1303               	bcf	3,6	;RP1=0, select bank0
  1487  027F  00DB               	movwf	LCD_Int2Str@str
  1488  0280  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1489  0285                     l1980:
  1490                           
  1491                           ;main.c: 217:             LAP_flag = 0;
  1492  0285  1683               	bsf	3,5	;RP0=1, select bank3
  1493  0286  1703               	bsf	3,6	;RP1=1, select bank3
  1494  0287  01E7               	clrf	_LAP_flag^(0+384)
  1495  0288  2C4A               	goto	l2000
  1496  0289                     l1982:
  1497                           
  1498                           ;main.c: 227:                 LCD_Int2Str(Lap_Hours, temp.Lap_1_MilliSeconds);
  1499  0289  1683               	bsf	3,5	;RP0=1, select bank3
  1500  028A  1703               	bsf	3,6	;RP1=1, select bank3
  1501  028B  086A               	movf	_Lap_Hours^(0+384),w
  1502  028C  1283               	bcf	3,5	;RP0=0, select bank0
  1503  028D  1303               	bcf	3,6	;RP1=0, select bank0
  1504  028E  00DF               	movwf	??_main
  1505  028F  01E0               	clrf	??_main+1
  1506  0290  01E1               	clrf	??_main+2
  1507  0291  01E2               	clrf	??_main+3
  1508  0292  0862               	movf	??_main+3,w
  1509  0293  00DA               	movwf	LCD_Int2Str@Integer+3
  1510  0294  0861               	movf	??_main+2,w
  1511  0295  00D9               	movwf	LCD_Int2Str@Integer+2
  1512  0296  0860               	movf	??_main+1,w
  1513  0297  00D8               	movwf	LCD_Int2Str@Integer+1
  1514  0298  085F               	movf	??_main,w
  1515  0299  00D7               	movwf	LCD_Int2Str@Integer
  1516  029A  3092               	movlw	(low (main@temp| (0+256)))& (0+255)
  1517  029B  00FF               	movwf	btemp+1
  1518  029C  087F               	movf	btemp+1,w
  1519  029D  00DB               	movwf	LCD_Int2Str@str
  1520  029E  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1521                           
  1522                           ;main.c: 228:                 LCD_DisStrRC(temp.Lap_1_MilliSeconds, 0, 5);
  1523  02A3  3092               	movlw	(low (main@temp| (0+256)))& (0+255)
  1524  02A4  1283               	bcf	3,5	;RP0=0, select bank0
  1525  02A5  1303               	bcf	3,6	;RP1=0, select bank0
  1526  02A6  00CC               	movwf	LCD_DisStrRC@str
  1527  02A7  3001               	movlw	1
  1528  02A8  00CD               	movwf	LCD_DisStrRC@str+1
  1529  02A9  01CE               	clrf	LCD_DisStrRC@row
  1530  02AA  3005               	movlw	5
  1531  02AB  00FF               	movwf	btemp+1
  1532  02AC  087F               	movf	btemp+1,w
  1533  02AD  00CF               	movwf	LCD_DisStrRC@column
  1534  02AE  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1535                           
  1536                           ;main.c: 230:                 LCD_Int2Str(Lap_Minutes, temp.Lap_1_Seconds);
  1537  02B3  1683               	bsf	3,5	;RP0=1, select bank3
  1538  02B4  1703               	bsf	3,6	;RP1=1, select bank3
  1539  02B5  086B               	movf	_Lap_Minutes^(0+384),w
  1540  02B6  1283               	bcf	3,5	;RP0=0, select bank0
  1541  02B7  1303               	bcf	3,6	;RP1=0, select bank0
  1542  02B8  00DF               	movwf	??_main
  1543  02B9  01E0               	clrf	??_main+1
  1544  02BA  01E1               	clrf	??_main+2
  1545  02BB  01E2               	clrf	??_main+3
  1546  02BC  0862               	movf	??_main+3,w
  1547  02BD  00DA               	movwf	LCD_Int2Str@Integer+3
  1548  02BE  0861               	movf	??_main+2,w
  1549  02BF  00D9               	movwf	LCD_Int2Str@Integer+2
  1550  02C0  0860               	movf	??_main+1,w
  1551  02C1  00D8               	movwf	LCD_Int2Str@Integer+1
  1552  02C2  085F               	movf	??_main,w
  1553  02C3  00D7               	movwf	LCD_Int2Str@Integer
  1554  02C4  3095               	movlw	(low ((main@temp| (0+256)+3)))& (0+255)
  1555  02C5  00FF               	movwf	btemp+1
  1556  02C6  087F               	movf	btemp+1,w
  1557  02C7  00DB               	movwf	LCD_Int2Str@str
  1558  02C8  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1559                           
  1560                           ;main.c: 231:                 LCD_DisStrRC(temp.Lap_1_Seconds, 0, 8);
  1561  02CD  3095               	movlw	(low ((main@temp| (0+256)+3)))& (0+255)
  1562  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  1563  02CF  1303               	bcf	3,6	;RP1=0, select bank0
  1564  02D0  00CC               	movwf	LCD_DisStrRC@str
  1565  02D1  3001               	movlw	1
  1566  02D2  00CD               	movwf	LCD_DisStrRC@str+1
  1567  02D3  01CE               	clrf	LCD_DisStrRC@row
  1568  02D4  3008               	movlw	8
  1569  02D5  00FF               	movwf	btemp+1
  1570  02D6  087F               	movf	btemp+1,w
  1571  02D7  00CF               	movwf	LCD_DisStrRC@column
  1572  02D8  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1573                           
  1574                           ;main.c: 233:                 LCD_Int2Str(Lap_Seconds, temp.Lap_1_Minutes);
  1575  02DD  1683               	bsf	3,5	;RP0=1, select bank3
  1576  02DE  1703               	bsf	3,6	;RP1=1, select bank3
  1577  02DF  086C               	movf	_Lap_Seconds^(0+384),w
  1578  02E0  1283               	bcf	3,5	;RP0=0, select bank0
  1579  02E1  1303               	bcf	3,6	;RP1=0, select bank0
  1580  02E2  00DF               	movwf	??_main
  1581  02E3  01E0               	clrf	??_main+1
  1582  02E4  01E1               	clrf	??_main+2
  1583  02E5  01E2               	clrf	??_main+3
  1584  02E6  0862               	movf	??_main+3,w
  1585  02E7  00DA               	movwf	LCD_Int2Str@Integer+3
  1586  02E8  0861               	movf	??_main+2,w
  1587  02E9  00D9               	movwf	LCD_Int2Str@Integer+2
  1588  02EA  0860               	movf	??_main+1,w
  1589  02EB  00D8               	movwf	LCD_Int2Str@Integer+1
  1590  02EC  085F               	movf	??_main,w
  1591  02ED  00D7               	movwf	LCD_Int2Str@Integer
  1592  02EE  3098               	movlw	(low ((main@temp| (0+256)+6)))& (0+255)
  1593  02EF  00FF               	movwf	btemp+1
  1594  02F0  087F               	movf	btemp+1,w
  1595  02F1  00DB               	movwf	LCD_Int2Str@str
  1596  02F2  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1597                           
  1598                           ;main.c: 234:                 LCD_DisStrRC(temp.Lap_1_Minutes, 0, 11);
  1599  02F7  3098               	movlw	(low ((main@temp| (0+256)+6)))& (0+255)
  1600  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  1601  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  1602  02FA  00CC               	movwf	LCD_DisStrRC@str
  1603  02FB  3001               	movlw	1
  1604  02FC  00CD               	movwf	LCD_DisStrRC@str+1
  1605  02FD  01CE               	clrf	LCD_DisStrRC@row
  1606  02FE  300B               	movlw	11
  1607  02FF  00FF               	movwf	btemp+1
  1608  0300  087F               	movf	btemp+1,w
  1609  0301  00CF               	movwf	LCD_DisStrRC@column
  1610  0302  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1611                           
  1612                           ;main.c: 236:                 LCD_Int2Str(Lap_MilliSeconds, temp.Lap_1_Hours);
  1613  0307  1683               	bsf	3,5	;RP0=1, select bank3
  1614  0308  1703               	bsf	3,6	;RP1=1, select bank3
  1615  0309  086D               	movf	_Lap_MilliSeconds^(0+384),w
  1616  030A  1283               	bcf	3,5	;RP0=0, select bank0
  1617  030B  1303               	bcf	3,6	;RP1=0, select bank0
  1618  030C  00DF               	movwf	??_main
  1619  030D  01E0               	clrf	??_main+1
  1620  030E  01E1               	clrf	??_main+2
  1621  030F  01E2               	clrf	??_main+3
  1622  0310  0862               	movf	??_main+3,w
  1623  0311  00DA               	movwf	LCD_Int2Str@Integer+3
  1624  0312  0861               	movf	??_main+2,w
  1625  0313  00D9               	movwf	LCD_Int2Str@Integer+2
  1626  0314  0860               	movf	??_main+1,w
  1627  0315  00D8               	movwf	LCD_Int2Str@Integer+1
  1628  0316  085F               	movf	??_main,w
  1629  0317  00D7               	movwf	LCD_Int2Str@Integer
  1630  0318  309B               	movlw	(low ((main@temp| (0+256)+9)))& (0+255)
  1631  0319  00FF               	movwf	btemp+1
  1632  031A  087F               	movf	btemp+1,w
  1633  031B  00DB               	movwf	LCD_Int2Str@str
  1634  031C  120A  118A  245F  120A  118A  	fcall	_LCD_Int2Str
  1635                           
  1636                           ;main.c: 237:                 LCD_DisStrRC(temp.Lap_1_Hours, 0, 14);
  1637  0321  309B               	movlw	(low ((main@temp| (0+256)+9)))& (0+255)
  1638  0322  1283               	bcf	3,5	;RP0=0, select bank0
  1639  0323  1303               	bcf	3,6	;RP1=0, select bank0
  1640  0324  00CC               	movwf	LCD_DisStrRC@str
  1641  0325  3001               	movlw	1
  1642  0326  00CD               	movwf	LCD_DisStrRC@str+1
  1643  0327  01CE               	clrf	LCD_DisStrRC@row
  1644  0328  300E               	movlw	14
  1645  0329  00FF               	movwf	btemp+1
  1646  032A  087F               	movf	btemp+1,w
  1647  032B  00CF               	movwf	LCD_DisStrRC@column
  1648  032C  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1649  0331                     l1984:
  1650                           
  1651                           ;main.c: 239:                 if (first_lap == 1) {
  1652  0331  037A               	decf	_first_lap,w
  1653  0332  1D03               	btfss	3,2
  1654  0333  2B35               	goto	u1501
  1655  0334  2B36               	goto	u1500
  1656  0335                     u1501:
  1657  0335  286B               	goto	l1870
  1658  0336                     u1500:
  1659  0336                     l1986:
  1660                           
  1661                           ;main.c: 240:                     LCD_DisStrRC(Laps.Laps[Lap_counter - 1].Lap_1_MilliSec
      +                          onds, 1, 5);
  1662  0336  300C               	movlw	12
  1663  0337  00FF               	movwf	btemp+1
  1664  0338  087F               	movf	btemp+1,w
  1665  0339  00F3               	movwf	___bmul@multiplicand
  1666  033A  1683               	bsf	3,5	;RP0=1, select bank3
  1667  033B  1703               	bsf	3,6	;RP1=1, select bank3
  1668  033C  0869               	movf	_Lap_counter^(0+384),w
  1669  033D  120A  118A  27D3  120A  118A  	fcall	___bmul
  1670  0342  3EF4               	addlw	244
  1671  0343  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1672  0344  1283               	bcf	3,5	;RP0=0, select bank0
  1673  0345  1303               	bcf	3,6	;RP1=0, select bank0
  1674  0346  00CC               	movwf	LCD_DisStrRC@str
  1675  0347  3001               	movlw	1
  1676  0348  00CD               	movwf	LCD_DisStrRC@str+1
  1677  0349  01CE               	clrf	LCD_DisStrRC@row
  1678  034A  0ACE               	incf	LCD_DisStrRC@row,f
  1679  034B  3005               	movlw	5
  1680  034C  00FF               	movwf	btemp+1
  1681  034D  087F               	movf	btemp+1,w
  1682  034E  00CF               	movwf	LCD_DisStrRC@column
  1683  034F  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1684                           
  1685                           ;main.c: 241:                     LCD_DisStrRC(Laps.Laps[Lap_counter - 1].Lap_1_Seconds,
      +                           1, 8);
  1686  0354  300C               	movlw	12
  1687  0355  00FF               	movwf	btemp+1
  1688  0356  087F               	movf	btemp+1,w
  1689  0357  00F3               	movwf	___bmul@multiplicand
  1690  0358  1683               	bsf	3,5	;RP0=1, select bank3
  1691  0359  1703               	bsf	3,6	;RP1=1, select bank3
  1692  035A  0869               	movf	_Lap_counter^(0+384),w
  1693  035B  120A  118A  27D3  120A  118A  	fcall	___bmul
  1694  0360  3EF7               	addlw	247
  1695  0361  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1696  0362  1283               	bcf	3,5	;RP0=0, select bank0
  1697  0363  1303               	bcf	3,6	;RP1=0, select bank0
  1698  0364  00CC               	movwf	LCD_DisStrRC@str
  1699  0365  3001               	movlw	1
  1700  0366  00CD               	movwf	LCD_DisStrRC@str+1
  1701  0367  01CE               	clrf	LCD_DisStrRC@row
  1702  0368  0ACE               	incf	LCD_DisStrRC@row,f
  1703  0369  3008               	movlw	8
  1704  036A  00FF               	movwf	btemp+1
  1705  036B  087F               	movf	btemp+1,w
  1706  036C  00CF               	movwf	LCD_DisStrRC@column
  1707  036D  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1708                           
  1709                           ;main.c: 242:                     LCD_DisStrRC(Laps.Laps[Lap_counter - 1].Lap_1_Minutes,
      +                           1, 11);
  1710  0372  300C               	movlw	12
  1711  0373  00FF               	movwf	btemp+1
  1712  0374  087F               	movf	btemp+1,w
  1713  0375  00F3               	movwf	___bmul@multiplicand
  1714  0376  1683               	bsf	3,5	;RP0=1, select bank3
  1715  0377  1703               	bsf	3,6	;RP1=1, select bank3
  1716  0378  0869               	movf	_Lap_counter^(0+384),w
  1717  0379  120A  118A  27D3  120A  118A  	fcall	___bmul
  1718  037E  3EFA               	addlw	250
  1719  037F  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1720  0380  1283               	bcf	3,5	;RP0=0, select bank0
  1721  0381  1303               	bcf	3,6	;RP1=0, select bank0
  1722  0382  00CC               	movwf	LCD_DisStrRC@str
  1723  0383  3001               	movlw	1
  1724  0384  00CD               	movwf	LCD_DisStrRC@str+1
  1725  0385  01CE               	clrf	LCD_DisStrRC@row
  1726  0386  0ACE               	incf	LCD_DisStrRC@row,f
  1727  0387  300B               	movlw	11
  1728  0388  00FF               	movwf	btemp+1
  1729  0389  087F               	movf	btemp+1,w
  1730  038A  00CF               	movwf	LCD_DisStrRC@column
  1731  038B  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1732                           
  1733                           ;main.c: 243:                     LCD_DisStrRC(Laps.Laps[Lap_counter - 1].Lap_1_Hours, 1
      +                          , 14);
  1734  0390  300C               	movlw	12
  1735  0391  00FF               	movwf	btemp+1
  1736  0392  087F               	movf	btemp+1,w
  1737  0393  00F3               	movwf	___bmul@multiplicand
  1738  0394  1683               	bsf	3,5	;RP0=1, select bank3
  1739  0395  1703               	bsf	3,6	;RP1=1, select bank3
  1740  0396  0869               	movf	_Lap_counter^(0+384),w
  1741  0397  120A  118A  27D3  120A  118A  	fcall	___bmul
  1742  039C  3EFD               	addlw	253
  1743  039D  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1744  039E  1283               	bcf	3,5	;RP0=0, select bank0
  1745  039F  1303               	bcf	3,6	;RP1=0, select bank0
  1746  03A0  00CC               	movwf	LCD_DisStrRC@str
  1747  03A1  3001               	movlw	1
  1748  03A2  00CD               	movwf	LCD_DisStrRC@str+1
  1749  03A3  01CE               	clrf	LCD_DisStrRC@row
  1750  03A4  0ACE               	incf	LCD_DisStrRC@row,f
  1751  03A5  300E               	movlw	14
  1752  03A6  00FF               	movwf	btemp+1
  1753  03A7  087F               	movf	btemp+1,w
  1754  03A8  00CF               	movwf	LCD_DisStrRC@column
  1755  03A9  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1756  03AE                     l1988:
  1757                           
  1758                           ;main.c: 245:                     Massage4[1] = Lap_counter - 1 + '0';
  1759  03AE  1683               	bsf	3,5	;RP0=1, select bank3
  1760  03AF  1703               	bsf	3,6	;RP1=1, select bank3
  1761  03B0  0869               	movf	_Lap_counter^(0+384),w
  1762  03B1  3E2F               	addlw	47
  1763  03B2  00FF               	movwf	btemp+1
  1764  03B3  087F               	movf	btemp+1,w
  1765  03B4  1283               	bcf	3,5	;RP0=0, select bank0
  1766  03B5  1303               	bcf	3,6	;RP1=0, select bank0
  1767  03B6  00BC               	movwf	_Massage4+1
  1768  03B7                     l1990:
  1769                           
  1770                           ;main.c: 246:                     LCD_DisStrRC(Massage4, 1, 0);
  1771  03B7  303B               	movlw	(low (_Massage4| 0))& (0+255)
  1772  03B8  00CC               	movwf	LCD_DisStrRC@str
  1773  03B9  3000               	movlw	0
  1774  03BA  00CD               	movwf	LCD_DisStrRC@str+1
  1775  03BB  01CE               	clrf	LCD_DisStrRC@row
  1776  03BC  0ACE               	incf	LCD_DisStrRC@row,f
  1777  03BD  01CF               	clrf	LCD_DisStrRC@column
  1778  03BE  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1779  03C3  286B               	goto	l1870
  1780  03C4                     l1992:
  1781                           
  1782                           ;main.c: 251:                 if (INIT_DONE == 1) {
  1783  03C4  1683               	bsf	3,5	;RP0=1, select bank3
  1784  03C5  1703               	bsf	3,6	;RP1=1, select bank3
  1785  03C6  0366               	decf	_INIT_DONE^(0+384),w
  1786  03C7  1D03               	btfss	3,2
  1787  03C8  2BCA               	goto	u1511
  1788  03C9  2BCB               	goto	u1510
  1789  03CA                     u1511:
  1790  03CA  286B               	goto	l1870
  1791  03CB                     u1510:
  1792  03CB                     l1994:
  1793                           
  1794                           ;main.c: 252:                     LCD_DisStrRC(Laps.Laps[scroll_counter].Lap_1_MilliSeco
      +                          nds, 1, 5);
  1795  03CB  300C               	movlw	12
  1796  03CC  00FF               	movwf	btemp+1
  1797  03CD  087F               	movf	btemp+1,w
  1798  03CE  00F3               	movwf	___bmul@multiplicand
  1799  03CF  0868               	movf	_scroll_counter^(0+384),w
  1800  03D0  120A  118A  27D3  120A  118A  	fcall	___bmul
  1801  03D5  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1802  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  1803  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  1804  03D8  00CC               	movwf	LCD_DisStrRC@str
  1805  03D9  3001               	movlw	1
  1806  03DA  00CD               	movwf	LCD_DisStrRC@str+1
  1807  03DB  01CE               	clrf	LCD_DisStrRC@row
  1808  03DC  0ACE               	incf	LCD_DisStrRC@row,f
  1809  03DD  3005               	movlw	5
  1810  03DE  00FF               	movwf	btemp+1
  1811  03DF  087F               	movf	btemp+1,w
  1812  03E0  00CF               	movwf	LCD_DisStrRC@column
  1813  03E1  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1814                           
  1815                           ;main.c: 253:                     LCD_DisStrRC(Laps.Laps[scroll_counter].Lap_1_Seconds, 
      +                          1, 8);
  1816  03E6  300C               	movlw	12
  1817  03E7  00FF               	movwf	btemp+1
  1818  03E8  087F               	movf	btemp+1,w
  1819  03E9  00F3               	movwf	___bmul@multiplicand
  1820  03EA  1683               	bsf	3,5	;RP0=1, select bank3
  1821  03EB  1703               	bsf	3,6	;RP1=1, select bank3
  1822  03EC  0868               	movf	_scroll_counter^(0+384),w
  1823  03ED  120A  118A  27D3  120A  118A  	fcall	___bmul
  1824  03F2  3E03               	addlw	3
  1825  03F3  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1826  03F4  1283               	bcf	3,5	;RP0=0, select bank0
  1827  03F5  1303               	bcf	3,6	;RP1=0, select bank0
  1828  03F6  00CC               	movwf	LCD_DisStrRC@str
  1829  03F7  3001               	movlw	1
  1830  03F8  00CD               	movwf	LCD_DisStrRC@str+1
  1831  03F9  01CE               	clrf	LCD_DisStrRC@row
  1832  03FA  0ACE               	incf	LCD_DisStrRC@row,f
  1833  03FB  3008               	movlw	8
  1834  03FC  00FF               	movwf	btemp+1
  1835  03FD  087F               	movf	btemp+1,w
  1836  03FE  00CF               	movwf	LCD_DisStrRC@column
  1837  03FF  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1838                           
  1839                           ;main.c: 254:                     LCD_DisStrRC(Laps.Laps[scroll_counter].Lap_1_Minutes, 
      +                          1, 11);
  1840  0404  300C               	movlw	12
  1841  0405  00FF               	movwf	btemp+1
  1842  0406  087F               	movf	btemp+1,w
  1843  0407  00F3               	movwf	___bmul@multiplicand
  1844  0408  1683               	bsf	3,5	;RP0=1, select bank3
  1845  0409  1703               	bsf	3,6	;RP1=1, select bank3
  1846  040A  0868               	movf	_scroll_counter^(0+384),w
  1847  040B  120A  118A  27D3  120A  118A  	fcall	___bmul
  1848  0410  3E06               	addlw	6
  1849  0411  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1850  0412  1283               	bcf	3,5	;RP0=0, select bank0
  1851  0413  1303               	bcf	3,6	;RP1=0, select bank0
  1852  0414  00CC               	movwf	LCD_DisStrRC@str
  1853  0415  3001               	movlw	1
  1854  0416  00CD               	movwf	LCD_DisStrRC@str+1
  1855  0417  01CE               	clrf	LCD_DisStrRC@row
  1856  0418  0ACE               	incf	LCD_DisStrRC@row,f
  1857  0419  300B               	movlw	11
  1858  041A  00FF               	movwf	btemp+1
  1859  041B  087F               	movf	btemp+1,w
  1860  041C  00CF               	movwf	LCD_DisStrRC@column
  1861  041D  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1862                           
  1863                           ;main.c: 255:                     LCD_DisStrRC(Laps.Laps[scroll_counter].Lap_1_Hours, 1,
      +                           14);
  1864  0422  300C               	movlw	12
  1865  0423  00FF               	movwf	btemp+1
  1866  0424  087F               	movf	btemp+1,w
  1867  0425  00F3               	movwf	___bmul@multiplicand
  1868  0426  1683               	bsf	3,5	;RP0=1, select bank3
  1869  0427  1703               	bsf	3,6	;RP1=1, select bank3
  1870  0428  0868               	movf	_scroll_counter^(0+384),w
  1871  0429  120A  118A  27D3  120A  118A  	fcall	___bmul
  1872  042E  3E09               	addlw	9
  1873  042F  3E9E               	addlw	(low (main@Laps| (0+256)))& (0+255)
  1874  0430  1283               	bcf	3,5	;RP0=0, select bank0
  1875  0431  1303               	bcf	3,6	;RP1=0, select bank0
  1876  0432  00CC               	movwf	LCD_DisStrRC@str
  1877  0433  3001               	movlw	1
  1878  0434  00CD               	movwf	LCD_DisStrRC@str+1
  1879  0435  01CE               	clrf	LCD_DisStrRC@row
  1880  0436  0ACE               	incf	LCD_DisStrRC@row,f
  1881  0437  300E               	movlw	14
  1882  0438  00FF               	movwf	btemp+1
  1883  0439  087F               	movf	btemp+1,w
  1884  043A  00CF               	movwf	LCD_DisStrRC@column
  1885  043B  120A  118A  27A3  120A  118A  	fcall	_LCD_DisStrRC
  1886  0440                     l1996:
  1887                           
  1888                           ;main.c: 257:                     Massage4[1] = scroll_counter + '0';
  1889  0440  1683               	bsf	3,5	;RP0=1, select bank3
  1890  0441  1703               	bsf	3,6	;RP1=1, select bank3
  1891  0442  0868               	movf	_scroll_counter^(0+384),w
  1892  0443  3E30               	addlw	48
  1893  0444  00FF               	movwf	btemp+1
  1894  0445  087F               	movf	btemp+1,w
  1895  0446  1283               	bcf	3,5	;RP0=0, select bank0
  1896  0447  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0448  00BC               	movwf	_Massage4+1
  1898  0449  2BB7               	goto	l1990
  1899  044A                     l2000:
  1900  044A  086E               	movf	_Start_Stop_Status^(0+384),w
  1901  044B  1283               	bcf	3,5	;RP0=0, select bank0
  1902  044C  1303               	bcf	3,6	;RP1=0, select bank0
  1903  044D  00DF               	movwf	??_main
  1904  044E  01E0               	clrf	??_main+1
  1905                           
  1906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1907                           ; Switch size 1, requested type "simple"
  1908                           ; Number of cases is 1, Range of values is 0 to 0
  1909                           ; switch strategies available:
  1910                           ; Name         Instructions Cycles
  1911                           ; simple_byte            4     3 (average)
  1912                           ; direct_byte           11     8 (fixed)
  1913                           ; jumptable            260     6 (fixed)
  1914                           ;	Chosen strategy is simple_byte
  1915  044F  0860               	movf	??_main+1,w
  1916  0450  3A00               	xorlw	0	; case 0
  1917  0451  1903               	skipnz
  1918  0452  2C54               	goto	l2114
  1919  0453  286B               	goto	l1870
  1920  0454                     l2114:
  1921                           
  1922                           ; Switch size 1, requested type "simple"
  1923                           ; Number of cases is 2, Range of values is 0 to 1
  1924                           ; switch strategies available:
  1925                           ; Name         Instructions Cycles
  1926                           ; simple_byte            7     4 (average)
  1927                           ; direct_byte           14     8 (fixed)
  1928                           ; jumptable            260     6 (fixed)
  1929                           ;	Chosen strategy is simple_byte
  1930  0454  085F               	movf	??_main,w
  1931  0455  3A00               	xorlw	0	; case 0
  1932  0456  1903               	skipnz
  1933  0457  2BC4               	goto	l1992
  1934  0458  3A01               	xorlw	1	; case 1
  1935  0459  1903               	skipnz
  1936  045A  2A89               	goto	l1982
  1937  045B  286B               	goto	l1870
  1938  045C  120A  118A  2810   	ljmp	start
  1939  045F                     __end_of_main:
  1940                           
  1941                           	psect	text1
  1942  07D3                     __ptext1:	
  1943 ;; *************** function ___bmul *****************
  1944 ;; Defined at:
  1945 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul8.c"
  1946 ;; Parameters:    Size  Location     Type
  1947 ;;  multiplier      1    wreg     unsigned char 
  1948 ;;  multiplicand    1    3[COMMON] unsigned char 
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  multiplier      1    5[COMMON] unsigned char 
  1951 ;;  product         1    4[COMMON] unsigned char 
  1952 ;; Return value:  Size  Location     Type
  1953 ;;                  1    wreg      unsigned char 
  1954 ;; Registers used:
  1955 ;;		wreg, status,2, status,0, btemp+1
  1956 ;; Tracked objects:
  1957 ;;		On entry : 0/0
  1958 ;;		On exit  : 0/0
  1959 ;;		Unchanged: 0/0
  1960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1961 ;;      Params:         1       0       0       0       0
  1962 ;;      Locals:         2       0       0       0       0
  1963 ;;      Temps:          0       0       0       0       0
  1964 ;;      Totals:         3       0       0       0       0
  1965 ;;Total ram usage:        3 bytes
  1966 ;; Hardware stack levels used:    1
  1967 ;; Hardware stack levels required when called:    1
  1968 ;; This function calls:
  1969 ;;		Nothing
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           
  1976                           ;psect for function ___bmul
  1977  07D3                     ___bmul:
  1978                           
  1979                           ;incstack = 0
  1980                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1981                           ;___bmul@multiplier stored from wreg
  1982  07D3  00F5               	movwf	___bmul@multiplier
  1983  07D4                     l1430:
  1984  07D4  01F4               	clrf	___bmul@product
  1985  07D5                     l1432:
  1986  07D5  1C75               	btfss	___bmul@multiplier,0
  1987  07D6  2FD8               	goto	u801
  1988  07D7  2FD9               	goto	u800
  1989  07D8                     u801:
  1990  07D8  2FDD               	goto	l1436
  1991  07D9                     u800:
  1992  07D9                     l1434:
  1993  07D9  0873               	movf	___bmul@multiplicand,w
  1994  07DA  00FF               	movwf	btemp+1
  1995  07DB  087F               	movf	btemp+1,w
  1996  07DC  07F4               	addwf	___bmul@product,f
  1997  07DD                     l1436:
  1998  07DD  1003               	clrc
  1999  07DE  0DF3               	rlf	___bmul@multiplicand,f
  2000  07DF                     l1438:
  2001  07DF  1003               	clrc
  2002  07E0  0CF5               	rrf	___bmul@multiplier,f
  2003  07E1                     l1440:
  2004  07E1  0875               	movf	___bmul@multiplier,w
  2005  07E2  1D03               	btfss	3,2
  2006  07E3  2FE5               	goto	u811
  2007  07E4  2FE6               	goto	u810
  2008  07E5                     u811:
  2009  07E5  2FD5               	goto	l1432
  2010  07E6                     u810:
  2011  07E6                     l1442:
  2012  07E6  0874               	movf	___bmul@product,w
  2013  07E7                     l292:
  2014  07E7  0008               	return
  2015  07E8                     __end_of___bmul:
  2016                           
  2017                           	psect	text2
  2018  0FED                     __ptext2:	
  2019 ;; *************** function _Timer1_Init *****************
  2020 ;; Defined at:
  2021 ;;		line 268 in file "main.c"
  2022 ;; Parameters:    Size  Location     Type
  2023 ;;		None
  2024 ;; Auto vars:     Size  Location     Type
  2025 ;;		None
  2026 ;; Return value:  Size  Location     Type
  2027 ;;                  1    wreg      void 
  2028 ;; Registers used:
  2029 ;;		None
  2030 ;; Tracked objects:
  2031 ;;		On entry : 0/0
  2032 ;;		On exit  : 0/0
  2033 ;;		Unchanged: 0/0
  2034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2035 ;;      Params:         0       0       0       0       0
  2036 ;;      Locals:         0       0       0       0       0
  2037 ;;      Temps:          0       0       0       0       0
  2038 ;;      Totals:         0       0       0       0       0
  2039 ;;Total ram usage:        0 bytes
  2040 ;; Hardware stack levels used:    1
  2041 ;; Hardware stack levels required when called:    1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_main
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function _Timer1_Init
  2051  0FED                     _Timer1_Init:
  2052  0FED                     l1384:	
  2053                           ;incstack = 0
  2054                           ; Regs used in _Timer1_Init: []
  2055                           
  2056                           
  2057                           ;main.c: 270:     TMR1 = 65536 - 10000;
  2058  0FED  30D8               	movlw	216
  2059  0FEE  1283               	bcf	3,5	;RP0=0, select bank0
  2060  0FEF  1303               	bcf	3,6	;RP1=0, select bank0
  2061  0FF0  008F               	movwf	15	;volatile
  2062  0FF1  30F0               	movlw	240
  2063  0FF2  008E               	movwf	14	;volatile
  2064                           
  2065                           ;main.c: 272:     TMR1CS = 0;
  2066  0FF3  1090               	bcf	16,1	;volatile
  2067                           
  2068                           ;main.c: 274:     T1CKPS0 = 0;
  2069  0FF4  1210               	bcf	16,4	;volatile
  2070                           
  2071                           ;main.c: 275:     T1CKPS1 = 0;
  2072  0FF5  1290               	bcf	16,5	;volatile
  2073                           
  2074                           ;main.c: 278:     TMR1ON = 0;
  2075  0FF6  1010               	bcf	16,0	;volatile
  2076                           
  2077                           ;main.c: 280:     TMR1IE = 1;
  2078  0FF7  1683               	bsf	3,5	;RP0=1, select bank1
  2079  0FF8  1303               	bcf	3,6	;RP1=0, select bank1
  2080  0FF9  140C               	bsf	12,0	;volatile
  2081                           
  2082                           ;main.c: 281:     TMR1IF = 0;
  2083  0FFA  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0FFB  1303               	bcf	3,6	;RP1=0, select bank0
  2085  0FFC  100C               	bcf	12,0	;volatile
  2086                           
  2087                           ;main.c: 282:     PEIE = 1;
  2088  0FFD  170B               	bsf	11,6	;volatile
  2089                           
  2090                           ;main.c: 283:     GIE = 1;
  2091  0FFE  178B               	bsf	11,7	;volatile
  2092  0FFF                     l131:
  2093  0FFF  0008               	return
  2094  1000                     __end_of_Timer1_Init:
  2095                           
  2096                           	psect	text3
  2097  045F                     __ptext3:	
  2098 ;; *************** function _LCD_Int2Str *****************
  2099 ;; Defined at:
  2100 ;;		line 134 in file "LCD.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  Integer         4   14[BANK0 ] long 
  2103 ;;  str             1   18[BANK0 ] PTR unsigned char 
  2104 ;;		 -> main@temp(12), Laps.Laps(72), main@Laps(72), 
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;  temp            1   19[BANK0 ] unsigned char 
  2107 ;;  i               1   21[BANK0 ] unsigned char 
  2108 ;;  j               1   20[BANK0 ] unsigned char 
  2109 ;; Return value:  Size  Location     Type
  2110 ;;                  1    wreg      void 
  2111 ;; Registers used:
  2112 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2113 ;; Tracked objects:
  2114 ;;		On entry : 0/0
  2115 ;;		On exit  : 0/0
  2116 ;;		Unchanged: 0/0
  2117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2118 ;;      Params:         0       5       0       0       0
  2119 ;;      Locals:         0       3       0       0       0
  2120 ;;      Temps:          2       0       0       0       0
  2121 ;;      Totals:         2       8       0       0       0
  2122 ;;Total ram usage:       10 bytes
  2123 ;; Hardware stack levels used:    1
  2124 ;; Hardware stack levels required when called:    2
  2125 ;; This function calls:
  2126 ;;		___aldiv
  2127 ;;		___almod
  2128 ;; This function is called by:
  2129 ;;		_main
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           
  2134                           ;psect for function _LCD_Int2Str
  2135  045F                     _LCD_Int2Str:
  2136  045F                     l1816:	
  2137                           ;incstack = 0
  2138                           ; Regs used in _LCD_Int2Str: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2139                           
  2140                           
  2141                           ;LCD.c: 134: void LCD_Int2Str(int32_t Integer ,uint8_t* str);LCD.c: 135: {;LCD.c: 136:  
      +                          uint8_t i=0;
  2142  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2143  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2144  0461  01DE               	clrf	LCD_Int2Str@i
  2145  0462                     l1818:
  2146                           
  2147                           ;LCD.c: 139:  if (Integer != 0)
  2148  0462  085A               	movf	LCD_Int2Str@Integer+3,w
  2149  0463  0459               	iorwf	LCD_Int2Str@Integer+2,w
  2150  0464  0458               	iorwf	LCD_Int2Str@Integer+1,w
  2151  0465  0457               	iorwf	LCD_Int2Str@Integer,w
  2152  0466  1903               	skipnz
  2153  0467  2C69               	goto	u1261
  2154  0468  2C6A               	goto	u1260
  2155  0469                     u1261:
  2156  0469  2CF3               	goto	l1846
  2157  046A                     u1260:
  2158  046A  2CB0               	goto	l1828
  2159  046B                     l1822:
  2160                           
  2161                           ;LCD.c: 142:   {;LCD.c: 143:    str[i] = (Integer % 10) + 0x30;
  2162  046B  3000               	movlw	0
  2163  046C  00CC               	movwf	___almod@divisor+3
  2164  046D  3000               	movlw	0
  2165  046E  00CB               	movwf	___almod@divisor+2
  2166  046F  3000               	movlw	0
  2167  0470  00CA               	movwf	___almod@divisor+1
  2168  0471  300A               	movlw	10
  2169  0472  00C9               	movwf	___almod@divisor
  2170  0473  085A               	movf	LCD_Int2Str@Integer+3,w
  2171  0474  00D0               	movwf	___almod@dividend+3
  2172  0475  0859               	movf	LCD_Int2Str@Integer+2,w
  2173  0476  00CF               	movwf	___almod@dividend+2
  2174  0477  0858               	movf	LCD_Int2Str@Integer+1,w
  2175  0478  00CE               	movwf	___almod@dividend+1
  2176  0479  0857               	movf	LCD_Int2Str@Integer,w
  2177  047A  00CD               	movwf	___almod@dividend
  2178  047B  120A  118A  25AC  120A  118A  	fcall	___almod
  2179  0480  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0481  1303               	bcf	3,6	;RP1=0, select bank0
  2181  0482  0849               	movf	?___almod,w
  2182  0483  3E30               	addlw	48
  2183  0484  00FF               	movwf	btemp+1
  2184  0485  085E               	movf	LCD_Int2Str@i,w
  2185  0486  075B               	addwf	LCD_Int2Str@str,w
  2186  0487  00F6               	movwf	??_LCD_Int2Str
  2187  0488  0876               	movf	??_LCD_Int2Str,w
  2188  0489  0084               	movwf	4
  2189  048A  087F               	movf	btemp+1,w
  2190  048B  1783               	bsf	3,7	;select IRP bank2
  2191  048C  0080               	movwf	0
  2192  048D                     l1824:
  2193                           
  2194                           ;LCD.c: 144:    Integer = Integer / 10;
  2195  048D  3000               	movlw	0
  2196  048E  00CC               	movwf	___aldiv@divisor+3
  2197  048F  3000               	movlw	0
  2198  0490  00CB               	movwf	___aldiv@divisor+2
  2199  0491  3000               	movlw	0
  2200  0492  00CA               	movwf	___aldiv@divisor+1
  2201  0493  300A               	movlw	10
  2202  0494  00C9               	movwf	___aldiv@divisor
  2203  0495  085A               	movf	LCD_Int2Str@Integer+3,w
  2204  0496  00D0               	movwf	___aldiv@dividend+3
  2205  0497  0859               	movf	LCD_Int2Str@Integer+2,w
  2206  0498  00CF               	movwf	___aldiv@dividend+2
  2207  0499  0858               	movf	LCD_Int2Str@Integer+1,w
  2208  049A  00CE               	movwf	___aldiv@dividend+1
  2209  049B  0857               	movf	LCD_Int2Str@Integer,w
  2210  049C  00CD               	movwf	___aldiv@dividend
  2211  049D  120A  118A  250F  120A  118A  	fcall	___aldiv
  2212  04A2  1283               	bcf	3,5	;RP0=0, select bank0
  2213  04A3  1303               	bcf	3,6	;RP1=0, select bank0
  2214  04A4  084C               	movf	?___aldiv+3,w
  2215  04A5  00DA               	movwf	LCD_Int2Str@Integer+3
  2216  04A6  084B               	movf	?___aldiv+2,w
  2217  04A7  00D9               	movwf	LCD_Int2Str@Integer+2
  2218  04A8  084A               	movf	?___aldiv+1,w
  2219  04A9  00D8               	movwf	LCD_Int2Str@Integer+1
  2220  04AA  0849               	movf	?___aldiv,w
  2221  04AB  00D7               	movwf	LCD_Int2Str@Integer
  2222  04AC                     l1826:
  2223                           
  2224                           ;LCD.c: 145:    i++;
  2225  04AC  3001               	movlw	1
  2226  04AD  00FF               	movwf	btemp+1
  2227  04AE  087F               	movf	btemp+1,w
  2228  04AF  07DE               	addwf	LCD_Int2Str@i,f
  2229  04B0                     l1828:
  2230                           
  2231                           ;LCD.c: 141:   while(Integer != 0)
  2232  04B0  085A               	movf	LCD_Int2Str@Integer+3,w
  2233  04B1  0459               	iorwf	LCD_Int2Str@Integer+2,w
  2234  04B2  0458               	iorwf	LCD_Int2Str@Integer+1,w
  2235  04B3  0457               	iorwf	LCD_Int2Str@Integer,w
  2236  04B4  1D03               	skipz
  2237  04B5  2CB7               	goto	u1271
  2238  04B6  2CB8               	goto	u1270
  2239  04B7                     u1271:
  2240  04B7  2C6B               	goto	l1822
  2241  04B8                     u1270:
  2242  04B8                     l1830:
  2243                           
  2244                           ;LCD.c: 148:   str[i] = '\0';
  2245  04B8  085E               	movf	LCD_Int2Str@i,w
  2246  04B9  075B               	addwf	LCD_Int2Str@str,w
  2247  04BA  00F6               	movwf	??_LCD_Int2Str
  2248  04BB  0876               	movf	??_LCD_Int2Str,w
  2249  04BC  0084               	movwf	4
  2250  04BD  1783               	bsf	3,7	;select IRP bank2
  2251  04BE  0180               	clrf	0
  2252  04BF                     l1832:
  2253                           
  2254                           ;LCD.c: 150:    j=i-1;
  2255  04BF  085E               	movf	LCD_Int2Str@i,w
  2256  04C0  3EFF               	addlw	255
  2257  04C1  00FF               	movwf	btemp+1
  2258  04C2  087F               	movf	btemp+1,w
  2259  04C3  00DD               	movwf	LCD_Int2Str@j
  2260  04C4                     l1834:
  2261                           
  2262                           ;LCD.c: 151:    i=0;
  2263  04C4  01DE               	clrf	LCD_Int2Str@i
  2264  04C5                     l1836:
  2265                           
  2266                           ;LCD.c: 154:    while(i < j )
  2267  04C5  2CEC               	goto	l1844
  2268  04C6                     l1838:
  2269                           
  2270                           ;LCD.c: 155:    {;LCD.c: 156:     temp = str[i];
  2271  04C6  085E               	movf	LCD_Int2Str@i,w
  2272  04C7  075B               	addwf	LCD_Int2Str@str,w
  2273  04C8  00F6               	movwf	??_LCD_Int2Str
  2274  04C9  0876               	movf	??_LCD_Int2Str,w
  2275  04CA  0084               	movwf	4
  2276  04CB  0800               	movf	0,w
  2277  04CC  00FF               	movwf	btemp+1
  2278  04CD  087F               	movf	btemp+1,w
  2279  04CE  00DC               	movwf	LCD_Int2Str@temp
  2280                           
  2281                           ;LCD.c: 157:     str[i] = str[j];
  2282  04CF  085D               	movf	LCD_Int2Str@j,w
  2283  04D0  075B               	addwf	LCD_Int2Str@str,w
  2284  04D1  00F6               	movwf	??_LCD_Int2Str
  2285  04D2  0876               	movf	??_LCD_Int2Str,w
  2286  04D3  0084               	movwf	4
  2287  04D4  0800               	movf	0,w
  2288  04D5  00FF               	movwf	btemp+1
  2289  04D6  085E               	movf	LCD_Int2Str@i,w
  2290  04D7  075B               	addwf	LCD_Int2Str@str,w
  2291  04D8  00F7               	movwf	??_LCD_Int2Str+1
  2292  04D9  0877               	movf	??_LCD_Int2Str+1,w
  2293  04DA  0084               	movwf	4
  2294  04DB  087F               	movf	btemp+1,w
  2295  04DC  0080               	movwf	0
  2296                           
  2297                           ;LCD.c: 158:     str[j] = temp;
  2298  04DD  085C               	movf	LCD_Int2Str@temp,w
  2299  04DE  00FF               	movwf	btemp+1
  2300  04DF  085D               	movf	LCD_Int2Str@j,w
  2301  04E0  075B               	addwf	LCD_Int2Str@str,w
  2302  04E1  00F6               	movwf	??_LCD_Int2Str
  2303  04E2  0876               	movf	??_LCD_Int2Str,w
  2304  04E3  0084               	movwf	4
  2305  04E4  087F               	movf	btemp+1,w
  2306  04E5  0080               	movwf	0
  2307  04E6                     l1840:
  2308                           
  2309                           ;LCD.c: 160:     j--;
  2310  04E6  3001               	movlw	1
  2311  04E7  02DD               	subwf	LCD_Int2Str@j,f
  2312  04E8                     l1842:
  2313                           
  2314                           ;LCD.c: 161:     i++;
  2315  04E8  3001               	movlw	1
  2316  04E9  00FF               	movwf	btemp+1
  2317  04EA  087F               	movf	btemp+1,w
  2318  04EB  07DE               	addwf	LCD_Int2Str@i,f
  2319  04EC                     l1844:
  2320                           
  2321                           ;LCD.c: 154:    while(i < j )
  2322  04EC  085D               	movf	LCD_Int2Str@j,w
  2323  04ED  025E               	subwf	LCD_Int2Str@i,w
  2324  04EE  1C03               	skipc
  2325  04EF  2CF1               	goto	u1281
  2326  04F0  2CF2               	goto	u1280
  2327  04F1                     u1281:
  2328  04F1  2CC6               	goto	l1838
  2329  04F2                     u1280:
  2330  04F2  2CFD               	goto	l1850
  2331  04F3                     l1846:
  2332                           
  2333                           ;LCD.c: 166:  {;LCD.c: 167:   str[0] = 0x30;
  2334  04F3  3030               	movlw	48
  2335  04F4  00FF               	movwf	btemp+1
  2336  04F5  085B               	movf	LCD_Int2Str@str,w
  2337  04F6  0084               	movwf	4
  2338  04F7  087F               	movf	btemp+1,w
  2339  04F8  1783               	bsf	3,7	;select IRP bank2
  2340  04F9  0080               	movwf	0
  2341  04FA                     l1848:
  2342                           
  2343                           ;LCD.c: 168:   str[1] = '\0';
  2344  04FA  0A5B               	incf	LCD_Int2Str@str,w
  2345  04FB  0084               	movwf	4
  2346  04FC  0180               	clrf	0
  2347  04FD                     l1850:
  2348                           
  2349                           ;LCD.c: 172:     if(str[1] == '\0'){
  2350  04FD  0A5B               	incf	LCD_Int2Str@str,w
  2351  04FE  0084               	movwf	4
  2352  04FF  0800               	movf	0,w
  2353  0500  1D03               	btfss	3,2
  2354  0501  2D03               	goto	u1291
  2355  0502  2D04               	goto	u1290
  2356  0503                     u1291:
  2357  0503  2D0E               	goto	l172
  2358  0504                     u1290:
  2359  0504                     l1852:
  2360                           
  2361                           ;LCD.c: 173:         str[1] = ' ';
  2362  0504  3020               	movlw	32
  2363  0505  00FF               	movwf	btemp+1
  2364  0506  0A5B               	incf	LCD_Int2Str@str,w
  2365  0507  0084               	movwf	4
  2366  0508  087F               	movf	btemp+1,w
  2367  0509  0080               	movwf	0
  2368  050A                     l1854:
  2369                           
  2370                           ;LCD.c: 174:         str[2] = 0;
  2371  050A  085B               	movf	LCD_Int2Str@str,w
  2372  050B  3E02               	addlw	2
  2373  050C  0084               	movwf	4
  2374  050D  0180               	clrf	0
  2375  050E                     l172:
  2376  050E  0008               	return
  2377  050F                     __end_of_LCD_Int2Str:
  2378                           
  2379                           	psect	text4
  2380  05AC                     __ptext4:	
  2381 ;; *************** function ___almod *****************
  2382 ;; Defined at:
  2383 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\almod.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  divisor         4    0[BANK0 ] long 
  2386 ;;  dividend        4    4[BANK0 ] long 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  sign            1    5[COMMON] unsigned char 
  2389 ;;  counter         1    4[COMMON] unsigned char 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  4    0[BANK0 ] long 
  2392 ;; Registers used:
  2393 ;;		wreg, status,2, status,0, btemp+1
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2399 ;;      Params:         0       8       0       0       0
  2400 ;;      Locals:         2       0       0       0       0
  2401 ;;      Temps:          1       0       0       0       0
  2402 ;;      Totals:         3       8       0       0       0
  2403 ;;Total ram usage:       11 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    1
  2406 ;; This function calls:
  2407 ;;		Nothing
  2408 ;; This function is called by:
  2409 ;;		_LCD_Int2Str
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function ___almod
  2415  05AC                     ___almod:
  2416  05AC                     l1778:	
  2417                           ;incstack = 0
  2418                           ; Regs used in ___almod: [wreg+status,2+status,0+btemp+1]
  2419                           
  2420  05AC  01F5               	clrf	___almod@sign
  2421  05AD                     l1780:
  2422  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  2423  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  2424  05AF  1FD0               	btfss	___almod@dividend+3,7
  2425  05B0  2DB2               	goto	u1171
  2426  05B1  2DB3               	goto	u1170
  2427  05B2                     u1171:
  2428  05B2  2DC0               	goto	l344
  2429  05B3                     u1170:
  2430  05B3                     l1782:
  2431  05B3  09CD               	comf	___almod@dividend,f
  2432  05B4  09CE               	comf	___almod@dividend+1,f
  2433  05B5  09CF               	comf	___almod@dividend+2,f
  2434  05B6  09D0               	comf	___almod@dividend+3,f
  2435  05B7  0ACD               	incf	___almod@dividend,f
  2436  05B8  1903               	skipnz
  2437  05B9  0ACE               	incf	___almod@dividend+1,f
  2438  05BA  1903               	skipnz
  2439  05BB  0ACF               	incf	___almod@dividend+2,f
  2440  05BC  1903               	skipnz
  2441  05BD  0AD0               	incf	___almod@dividend+3,f
  2442  05BE  01F5               	clrf	___almod@sign
  2443  05BF  0AF5               	incf	___almod@sign,f
  2444  05C0                     l344:
  2445  05C0  1FCC               	btfss	___almod@divisor+3,7
  2446  05C1  2DC3               	goto	u1181
  2447  05C2  2DC4               	goto	u1180
  2448  05C3                     u1181:
  2449  05C3  2DCF               	goto	l1786
  2450  05C4                     u1180:
  2451  05C4                     l1784:
  2452  05C4  09C9               	comf	___almod@divisor,f
  2453  05C5  09CA               	comf	___almod@divisor+1,f
  2454  05C6  09CB               	comf	___almod@divisor+2,f
  2455  05C7  09CC               	comf	___almod@divisor+3,f
  2456  05C8  0AC9               	incf	___almod@divisor,f
  2457  05C9  1903               	skipnz
  2458  05CA  0ACA               	incf	___almod@divisor+1,f
  2459  05CB  1903               	skipnz
  2460  05CC  0ACB               	incf	___almod@divisor+2,f
  2461  05CD  1903               	skipnz
  2462  05CE  0ACC               	incf	___almod@divisor+3,f
  2463  05CF                     l1786:
  2464  05CF  084C               	movf	___almod@divisor+3,w
  2465  05D0  044B               	iorwf	___almod@divisor+2,w
  2466  05D1  044A               	iorwf	___almod@divisor+1,w
  2467  05D2  0449               	iorwf	___almod@divisor,w
  2468  05D3  1903               	skipnz
  2469  05D4  2DD6               	goto	u1191
  2470  05D5  2DD7               	goto	u1190
  2471  05D6                     u1191:
  2472  05D6  2E1A               	goto	l1804
  2473  05D7                     u1190:
  2474  05D7                     l1788:
  2475  05D7  01F4               	clrf	___almod@counter
  2476  05D8  0AF4               	incf	___almod@counter,f
  2477  05D9  2DE7               	goto	l1794
  2478  05DA                     l1790:
  2479  05DA  3001               	movlw	1
  2480  05DB  00F3               	movwf	??___almod
  2481  05DC                     u1205:
  2482  05DC  1003               	clrc
  2483  05DD  0DC9               	rlf	___almod@divisor,f
  2484  05DE  0DCA               	rlf	___almod@divisor+1,f
  2485  05DF  0DCB               	rlf	___almod@divisor+2,f
  2486  05E0  0DCC               	rlf	___almod@divisor+3,f
  2487  05E1  0BF3               	decfsz	??___almod,f
  2488  05E2  2DDC               	goto	u1205
  2489  05E3                     l1792:
  2490  05E3  3001               	movlw	1
  2491  05E4  00FF               	movwf	btemp+1
  2492  05E5  087F               	movf	btemp+1,w
  2493  05E6  07F4               	addwf	___almod@counter,f
  2494  05E7                     l1794:
  2495  05E7  1FCC               	btfss	___almod@divisor+3,7
  2496  05E8  2DEA               	goto	u1211
  2497  05E9  2DEB               	goto	u1210
  2498  05EA                     u1211:
  2499  05EA  2DDA               	goto	l1790
  2500  05EB                     u1210:
  2501  05EB                     l1796:
  2502  05EB  084C               	movf	___almod@divisor+3,w
  2503  05EC  0250               	subwf	___almod@dividend+3,w
  2504  05ED  1D03               	skipz
  2505  05EE  2DF9               	goto	u1225
  2506  05EF  084B               	movf	___almod@divisor+2,w
  2507  05F0  024F               	subwf	___almod@dividend+2,w
  2508  05F1  1D03               	skipz
  2509  05F2  2DF9               	goto	u1225
  2510  05F3  084A               	movf	___almod@divisor+1,w
  2511  05F4  024E               	subwf	___almod@dividend+1,w
  2512  05F5  1D03               	skipz
  2513  05F6  2DF9               	goto	u1225
  2514  05F7  0849               	movf	___almod@divisor,w
  2515  05F8  024D               	subwf	___almod@dividend,w
  2516  05F9                     u1225:
  2517  05F9  1C03               	skipc
  2518  05FA  2DFC               	goto	u1221
  2519  05FB  2DFD               	goto	u1220
  2520  05FC                     u1221:
  2521  05FC  2E0B               	goto	l1800
  2522  05FD                     u1220:
  2523  05FD                     l1798:
  2524  05FD  0849               	movf	___almod@divisor,w
  2525  05FE  02CD               	subwf	___almod@dividend,f
  2526  05FF  084A               	movf	___almod@divisor+1,w
  2527  0600  1C03               	skipc
  2528  0601  0F4A               	incfsz	___almod@divisor+1,w
  2529  0602  02CE               	subwf	___almod@dividend+1,f
  2530  0603  084B               	movf	___almod@divisor+2,w
  2531  0604  1C03               	skipc
  2532  0605  0F4B               	incfsz	___almod@divisor+2,w
  2533  0606  02CF               	subwf	___almod@dividend+2,f
  2534  0607  084C               	movf	___almod@divisor+3,w
  2535  0608  1C03               	skipc
  2536  0609  0F4C               	incfsz	___almod@divisor+3,w
  2537  060A  02D0               	subwf	___almod@dividend+3,f
  2538  060B                     l1800:
  2539  060B  3001               	movlw	1
  2540  060C                     u1235:
  2541  060C  1003               	clrc
  2542  060D  0CCC               	rrf	___almod@divisor+3,f
  2543  060E  0CCB               	rrf	___almod@divisor+2,f
  2544  060F  0CCA               	rrf	___almod@divisor+1,f
  2545  0610  0CC9               	rrf	___almod@divisor,f
  2546  0611  3EFF               	addlw	-1
  2547  0612  1D03               	skipz
  2548  0613  2E0C               	goto	u1235
  2549  0614                     l1802:
  2550  0614  3001               	movlw	1
  2551  0615  02F4               	subwf	___almod@counter,f
  2552  0616  1D03               	btfss	3,2
  2553  0617  2E19               	goto	u1241
  2554  0618  2E1A               	goto	u1240
  2555  0619                     u1241:
  2556  0619  2DEB               	goto	l1796
  2557  061A                     u1240:
  2558  061A                     l1804:
  2559  061A  0875               	movf	___almod@sign,w
  2560  061B  1903               	btfsc	3,2
  2561  061C  2E1E               	goto	u1251
  2562  061D  2E1F               	goto	u1250
  2563  061E                     u1251:
  2564  061E  2E2A               	goto	l1808
  2565  061F                     u1250:
  2566  061F                     l1806:
  2567  061F  09CD               	comf	___almod@dividend,f
  2568  0620  09CE               	comf	___almod@dividend+1,f
  2569  0621  09CF               	comf	___almod@dividend+2,f
  2570  0622  09D0               	comf	___almod@dividend+3,f
  2571  0623  0ACD               	incf	___almod@dividend,f
  2572  0624  1903               	skipnz
  2573  0625  0ACE               	incf	___almod@dividend+1,f
  2574  0626  1903               	skipnz
  2575  0627  0ACF               	incf	___almod@dividend+2,f
  2576  0628  1903               	skipnz
  2577  0629  0AD0               	incf	___almod@dividend+3,f
  2578  062A                     l1808:
  2579  062A  0850               	movf	___almod@dividend+3,w
  2580  062B  00CC               	movwf	?___almod+3
  2581  062C  084F               	movf	___almod@dividend+2,w
  2582  062D  00CB               	movwf	?___almod+2
  2583  062E  084E               	movf	___almod@dividend+1,w
  2584  062F  00CA               	movwf	?___almod+1
  2585  0630  084D               	movf	___almod@dividend,w
  2586  0631  00C9               	movwf	?___almod
  2587  0632                     l354:
  2588  0632  0008               	return
  2589  0633                     __end_of___almod:
  2590                           
  2591                           	psect	text5
  2592  050F                     __ptext5:	
  2593 ;; *************** function ___aldiv *****************
  2594 ;; Defined at:
  2595 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\aldiv.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  divisor         4    0[BANK0 ] long 
  2598 ;;  dividend        4    4[BANK0 ] long 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  quotient        4   10[BANK0 ] long 
  2601 ;;  sign            1    9[BANK0 ] unsigned char 
  2602 ;;  counter         1    8[BANK0 ] unsigned char 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  4    0[BANK0 ] long 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2, status,0, btemp+1
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2612 ;;      Params:         0       8       0       0       0
  2613 ;;      Locals:         0       6       0       0       0
  2614 ;;      Temps:          1       0       0       0       0
  2615 ;;      Totals:         1      14       0       0       0
  2616 ;;Total ram usage:       15 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    1
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_LCD_Int2Str
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function ___aldiv
  2628  050F                     ___aldiv:
  2629  050F                     l1736:	
  2630                           ;incstack = 0
  2631                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  2632                           
  2633  050F  1283               	bcf	3,5	;RP0=0, select bank0
  2634  0510  1303               	bcf	3,6	;RP1=0, select bank0
  2635  0511  01D2               	clrf	___aldiv@sign
  2636  0512                     l1738:
  2637  0512  1FCC               	btfss	___aldiv@divisor+3,7
  2638  0513  2D15               	goto	u1071
  2639  0514  2D16               	goto	u1070
  2640  0515                     u1071:
  2641  0515  2D23               	goto	l331
  2642  0516                     u1070:
  2643  0516                     l1740:
  2644  0516  09C9               	comf	___aldiv@divisor,f
  2645  0517  09CA               	comf	___aldiv@divisor+1,f
  2646  0518  09CB               	comf	___aldiv@divisor+2,f
  2647  0519  09CC               	comf	___aldiv@divisor+3,f
  2648  051A  0AC9               	incf	___aldiv@divisor,f
  2649  051B  1903               	skipnz
  2650  051C  0ACA               	incf	___aldiv@divisor+1,f
  2651  051D  1903               	skipnz
  2652  051E  0ACB               	incf	___aldiv@divisor+2,f
  2653  051F  1903               	skipnz
  2654  0520  0ACC               	incf	___aldiv@divisor+3,f
  2655  0521  01D2               	clrf	___aldiv@sign
  2656  0522  0AD2               	incf	___aldiv@sign,f
  2657  0523                     l331:
  2658  0523  1FD0               	btfss	___aldiv@dividend+3,7
  2659  0524  2D26               	goto	u1081
  2660  0525  2D27               	goto	u1080
  2661  0526                     u1081:
  2662  0526  2D36               	goto	l1746
  2663  0527                     u1080:
  2664  0527                     l1742:
  2665  0527  09CD               	comf	___aldiv@dividend,f
  2666  0528  09CE               	comf	___aldiv@dividend+1,f
  2667  0529  09CF               	comf	___aldiv@dividend+2,f
  2668  052A  09D0               	comf	___aldiv@dividend+3,f
  2669  052B  0ACD               	incf	___aldiv@dividend,f
  2670  052C  1903               	skipnz
  2671  052D  0ACE               	incf	___aldiv@dividend+1,f
  2672  052E  1903               	skipnz
  2673  052F  0ACF               	incf	___aldiv@dividend+2,f
  2674  0530  1903               	skipnz
  2675  0531  0AD0               	incf	___aldiv@dividend+3,f
  2676  0532                     l1744:
  2677  0532  3001               	movlw	1
  2678  0533  00FF               	movwf	btemp+1
  2679  0534  087F               	movf	btemp+1,w
  2680  0535  06D2               	xorwf	___aldiv@sign,f
  2681  0536                     l1746:
  2682  0536  3000               	movlw	0
  2683  0537  00D6               	movwf	___aldiv@quotient+3
  2684  0538  3000               	movlw	0
  2685  0539  00D5               	movwf	___aldiv@quotient+2
  2686  053A  3000               	movlw	0
  2687  053B  00D4               	movwf	___aldiv@quotient+1
  2688  053C  3000               	movlw	0
  2689  053D  00D3               	movwf	___aldiv@quotient
  2690  053E                     l1748:
  2691  053E  084C               	movf	___aldiv@divisor+3,w
  2692  053F  044B               	iorwf	___aldiv@divisor+2,w
  2693  0540  044A               	iorwf	___aldiv@divisor+1,w
  2694  0541  0449               	iorwf	___aldiv@divisor,w
  2695  0542  1903               	skipnz
  2696  0543  2D45               	goto	u1091
  2697  0544  2D46               	goto	u1090
  2698  0545                     u1091:
  2699  0545  2D93               	goto	l1770
  2700  0546                     u1090:
  2701  0546                     l1750:
  2702  0546  01D1               	clrf	___aldiv@counter
  2703  0547  0AD1               	incf	___aldiv@counter,f
  2704  0548  2D56               	goto	l1756
  2705  0549                     l1752:
  2706  0549  3001               	movlw	1
  2707  054A  00F3               	movwf	??___aldiv
  2708  054B                     u1105:
  2709  054B  1003               	clrc
  2710  054C  0DC9               	rlf	___aldiv@divisor,f
  2711  054D  0DCA               	rlf	___aldiv@divisor+1,f
  2712  054E  0DCB               	rlf	___aldiv@divisor+2,f
  2713  054F  0DCC               	rlf	___aldiv@divisor+3,f
  2714  0550  0BF3               	decfsz	??___aldiv,f
  2715  0551  2D4B               	goto	u1105
  2716  0552                     l1754:
  2717  0552  3001               	movlw	1
  2718  0553  00FF               	movwf	btemp+1
  2719  0554  087F               	movf	btemp+1,w
  2720  0555  07D1               	addwf	___aldiv@counter,f
  2721  0556                     l1756:
  2722  0556  1FCC               	btfss	___aldiv@divisor+3,7
  2723  0557  2D59               	goto	u1111
  2724  0558  2D5A               	goto	u1110
  2725  0559                     u1111:
  2726  0559  2D49               	goto	l1752
  2727  055A                     u1110:
  2728  055A                     l1758:
  2729  055A  3001               	movlw	1
  2730  055B  00F3               	movwf	??___aldiv
  2731  055C                     u1125:
  2732  055C  1003               	clrc
  2733  055D  0DD3               	rlf	___aldiv@quotient,f
  2734  055E  0DD4               	rlf	___aldiv@quotient+1,f
  2735  055F  0DD5               	rlf	___aldiv@quotient+2,f
  2736  0560  0DD6               	rlf	___aldiv@quotient+3,f
  2737  0561  0BF3               	decfsz	??___aldiv,f
  2738  0562  2D5C               	goto	u1125
  2739  0563                     l1760:
  2740  0563  084C               	movf	___aldiv@divisor+3,w
  2741  0564  0250               	subwf	___aldiv@dividend+3,w
  2742  0565  1D03               	skipz
  2743  0566  2D71               	goto	u1135
  2744  0567  084B               	movf	___aldiv@divisor+2,w
  2745  0568  024F               	subwf	___aldiv@dividend+2,w
  2746  0569  1D03               	skipz
  2747  056A  2D71               	goto	u1135
  2748  056B  084A               	movf	___aldiv@divisor+1,w
  2749  056C  024E               	subwf	___aldiv@dividend+1,w
  2750  056D  1D03               	skipz
  2751  056E  2D71               	goto	u1135
  2752  056F  0849               	movf	___aldiv@divisor,w
  2753  0570  024D               	subwf	___aldiv@dividend,w
  2754  0571                     u1135:
  2755  0571  1C03               	skipc
  2756  0572  2D74               	goto	u1131
  2757  0573  2D75               	goto	u1130
  2758  0574                     u1131:
  2759  0574  2D84               	goto	l1766
  2760  0575                     u1130:
  2761  0575                     l1762:
  2762  0575  0849               	movf	___aldiv@divisor,w
  2763  0576  02CD               	subwf	___aldiv@dividend,f
  2764  0577  084A               	movf	___aldiv@divisor+1,w
  2765  0578  1C03               	skipc
  2766  0579  0F4A               	incfsz	___aldiv@divisor+1,w
  2767  057A  02CE               	subwf	___aldiv@dividend+1,f
  2768  057B  084B               	movf	___aldiv@divisor+2,w
  2769  057C  1C03               	skipc
  2770  057D  0F4B               	incfsz	___aldiv@divisor+2,w
  2771  057E  02CF               	subwf	___aldiv@dividend+2,f
  2772  057F  084C               	movf	___aldiv@divisor+3,w
  2773  0580  1C03               	skipc
  2774  0581  0F4C               	incfsz	___aldiv@divisor+3,w
  2775  0582  02D0               	subwf	___aldiv@dividend+3,f
  2776  0583                     l1764:
  2777  0583  1453               	bsf	___aldiv@quotient,0
  2778  0584                     l1766:
  2779  0584  3001               	movlw	1
  2780  0585                     u1145:
  2781  0585  1003               	clrc
  2782  0586  0CCC               	rrf	___aldiv@divisor+3,f
  2783  0587  0CCB               	rrf	___aldiv@divisor+2,f
  2784  0588  0CCA               	rrf	___aldiv@divisor+1,f
  2785  0589  0CC9               	rrf	___aldiv@divisor,f
  2786  058A  3EFF               	addlw	-1
  2787  058B  1D03               	skipz
  2788  058C  2D85               	goto	u1145
  2789  058D                     l1768:
  2790  058D  3001               	movlw	1
  2791  058E  02D1               	subwf	___aldiv@counter,f
  2792  058F  1D03               	btfss	3,2
  2793  0590  2D92               	goto	u1151
  2794  0591  2D93               	goto	u1150
  2795  0592                     u1151:
  2796  0592  2D5A               	goto	l1758
  2797  0593                     u1150:
  2798  0593                     l1770:
  2799  0593  0852               	movf	___aldiv@sign,w
  2800  0594  1903               	btfsc	3,2
  2801  0595  2D97               	goto	u1161
  2802  0596  2D98               	goto	u1160
  2803  0597                     u1161:
  2804  0597  2DA3               	goto	l1774
  2805  0598                     u1160:
  2806  0598                     l1772:
  2807  0598  09D3               	comf	___aldiv@quotient,f
  2808  0599  09D4               	comf	___aldiv@quotient+1,f
  2809  059A  09D5               	comf	___aldiv@quotient+2,f
  2810  059B  09D6               	comf	___aldiv@quotient+3,f
  2811  059C  0AD3               	incf	___aldiv@quotient,f
  2812  059D  1903               	skipnz
  2813  059E  0AD4               	incf	___aldiv@quotient+1,f
  2814  059F  1903               	skipnz
  2815  05A0  0AD5               	incf	___aldiv@quotient+2,f
  2816  05A1  1903               	skipnz
  2817  05A2  0AD6               	incf	___aldiv@quotient+3,f
  2818  05A3                     l1774:
  2819  05A3  0856               	movf	___aldiv@quotient+3,w
  2820  05A4  00CC               	movwf	?___aldiv+3
  2821  05A5  0855               	movf	___aldiv@quotient+2,w
  2822  05A6  00CB               	movwf	?___aldiv+2
  2823  05A7  0854               	movf	___aldiv@quotient+1,w
  2824  05A8  00CA               	movwf	?___aldiv+1
  2825  05A9  0853               	movf	___aldiv@quotient,w
  2826  05AA  00C9               	movwf	?___aldiv
  2827  05AB                     l341:
  2828  05AB  0008               	return
  2829  05AC                     __end_of___aldiv:
  2830                           
  2831                           	psect	text6
  2832  0768                     __ptext6:	
  2833 ;; *************** function _LCD_Init *****************
  2834 ;; Defined at:
  2835 ;;		line 6 in file "LCD.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;                  1    wreg      void 
  2842 ;; Registers used:
  2843 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2849 ;;      Params:         0       0       0       0       0
  2850 ;;      Locals:         0       0       0       0       0
  2851 ;;      Temps:          0       0       0       0       0
  2852 ;;      Totals:         0       0       0       0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:    2
  2856 ;; This function calls:
  2857 ;;		_LCD_SendCMD
  2858 ;; This function is called by:
  2859 ;;		_main
  2860 ;; This function uses a non-reentrant model
  2861 ;;
  2862                           
  2863                           
  2864                           ;psect for function _LCD_Init
  2865  0768                     _LCD_Init:
  2866  0768                     l1370:	
  2867                           ;incstack = 0
  2868                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  2869                           
  2870                           
  2871                           ;LCD.c: 9:     TRISD &= ~(0xf0);
  2872  0768  300F               	movlw	15
  2873  0769  00FF               	movwf	btemp+1
  2874  076A  087F               	movf	btemp+1,w
  2875  076B  1683               	bsf	3,5	;RP0=1, select bank1
  2876  076C  1303               	bcf	3,6	;RP1=0, select bank1
  2877  076D  0588               	andwf	8,f	;volatile
  2878  076E                     l1372:
  2879                           
  2880                           ;LCD.c: 10:     TRISEbits.TRISE2 = 0;
  2881  076E  1109               	bcf	9,2	;volatile
  2882  076F                     l1374:
  2883                           
  2884                           ;LCD.c: 11:     TRISEbits.TRISE1 = 0;
  2885  076F  1089               	bcf	9,1	;volatile
  2886  0770                     l1376:
  2887                           
  2888                           ;LCD.c: 14:  LCD_SendCMD((0x02));
  2889  0770  3002               	movlw	2
  2890  0771  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  2891  0776                     l1378:
  2892                           
  2893                           ;LCD.c: 17:   LCD_SendCMD((0x28));
  2894  0776  3028               	movlw	40
  2895  0777  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  2896  077C                     l1380:
  2897                           
  2898                           ;LCD.c: 22:  LCD_SendCMD((0x0C));
  2899  077C  300C               	movlw	12
  2900  077D  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  2901  0782                     l1382:
  2902                           
  2903                           ;LCD.c: 23:  LCD_SendCMD((0x01));
  2904  0782  3001               	movlw	1
  2905  0783  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  2906  0788                     l148:
  2907  0788  0008               	return
  2908  0789                     __end_of_LCD_Init:
  2909                           
  2910                           	psect	text7
  2911  07A3                     __ptext7:	
  2912 ;; *************** function _LCD_DisStrRC *****************
  2913 ;; Defined at:
  2914 ;;		line 192 in file "LCD.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  str             2    3[BANK0 ] PTR unsigned char 
  2917 ;;		 -> Massage4(7), main@temp(12), Laps.Laps(72), main@Laps(72), 
  2918 ;;		 -> Massage3(7), Massage2(16), Massage1(11), 
  2919 ;;  row             1    5[BANK0 ] unsigned char 
  2920 ;;  column          1    6[BANK0 ] unsigned char 
  2921 ;; Auto vars:     Size  Location     Type
  2922 ;;		None
  2923 ;; Return value:  Size  Location     Type
  2924 ;;                  1    wreg      void 
  2925 ;; Registers used:
  2926 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2927 ;; Tracked objects:
  2928 ;;		On entry : 0/0
  2929 ;;		On exit  : 0/0
  2930 ;;		Unchanged: 0/0
  2931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2932 ;;      Params:         0       4       0       0       0
  2933 ;;      Locals:         0       0       0       0       0
  2934 ;;      Temps:          0       0       0       0       0
  2935 ;;      Totals:         0       4       0       0       0
  2936 ;;Total ram usage:        4 bytes
  2937 ;; Hardware stack levels used:    1
  2938 ;; Hardware stack levels required when called:    3
  2939 ;; This function calls:
  2940 ;;		_LCD_DisStr
  2941 ;;		_LCD_GotoRC
  2942 ;; This function is called by:
  2943 ;;		_main
  2944 ;; This function uses a non-reentrant model
  2945 ;;
  2946                           
  2947                           
  2948                           ;psect for function _LCD_DisStrRC
  2949  07A3                     _LCD_DisStrRC:
  2950  07A3                     l1812:	
  2951                           ;incstack = 0
  2952                           ; Regs used in _LCD_DisStrRC: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2953                           
  2954                           
  2955                           ;LCD.c: 192: void LCD_DisStrRC(uint8_t* str ,uint8_t row ,uint8_t column);LCD.c: 193: {;
      +                          LCD.c: 194:  LCD_GotoRC(row ,column);
  2956  07A3  1283               	bcf	3,5	;RP0=0, select bank0
  2957  07A4  1303               	bcf	3,6	;RP1=0, select bank0
  2958  07A5  084F               	movf	LCD_DisStrRC@column,w
  2959  07A6  00FF               	movwf	btemp+1
  2960  07A7  087F               	movf	btemp+1,w
  2961  07A8  00F6               	movwf	LCD_GotoRC@column
  2962  07A9  084E               	movf	LCD_DisStrRC@row,w
  2963  07AA  120A  118A  27BB  120A  118A  	fcall	_LCD_GotoRC
  2964  07AF                     l1814:
  2965                           
  2966                           ;LCD.c: 195:  LCD_DisStr(str);
  2967  07AF  1283               	bcf	3,5	;RP0=0, select bank0
  2968  07B0  1303               	bcf	3,6	;RP1=0, select bank0
  2969  07B1  084C               	movf	LCD_DisStrRC@str,w
  2970  07B2  00F6               	movwf	LCD_DisStr@str
  2971  07B3  084D               	movf	LCD_DisStrRC@str+1,w
  2972  07B4  00F7               	movwf	LCD_DisStr@str+1
  2973  07B5  120A  118A  2711  120A  118A  	fcall	_LCD_DisStr
  2974  07BA                     l180:
  2975  07BA  0008               	return
  2976  07BB                     __end_of_LCD_DisStrRC:
  2977                           
  2978                           	psect	text8
  2979  07BB                     __ptext8:	
  2980 ;; *************** function _LCD_GotoRC *****************
  2981 ;; Defined at:
  2982 ;;		line 181 in file "LCD.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  row             1    wreg     unsigned char 
  2985 ;;  column          1    6[COMMON] unsigned char 
  2986 ;; Auto vars:     Size  Location     Type
  2987 ;;  row             1    7[COMMON] unsigned char 
  2988 ;; Return value:  Size  Location     Type
  2989 ;;                  1    wreg      void 
  2990 ;; Registers used:
  2991 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  2992 ;; Tracked objects:
  2993 ;;		On entry : 0/0
  2994 ;;		On exit  : 0/0
  2995 ;;		Unchanged: 0/0
  2996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2997 ;;      Params:         1       0       0       0       0
  2998 ;;      Locals:         1       0       0       0       0
  2999 ;;      Temps:          0       0       0       0       0
  3000 ;;      Totals:         2       0       0       0       0
  3001 ;;Total ram usage:        2 bytes
  3002 ;; Hardware stack levels used:    1
  3003 ;; Hardware stack levels required when called:    2
  3004 ;; This function calls:
  3005 ;;		_LCD_SendCMD
  3006 ;; This function is called by:
  3007 ;;		_LCD_DisStrRC
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           
  3012                           ;psect for function _LCD_GotoRC
  3013  07BB                     _LCD_GotoRC:
  3014                           
  3015                           ;incstack = 0
  3016                           ; Regs used in _LCD_GotoRC: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3017                           ;LCD_GotoRC@row stored from wreg
  3018  07BB  00F7               	movwf	LCD_GotoRC@row
  3019  07BC                     l1288:
  3020                           
  3021                           ;LCD.c: 181: void LCD_GotoRC(uint8_t row ,uint8_t column);LCD.c: 182: {;LCD.c: 183:   if
      +                          (row == 0)
  3022  07BC  0877               	movf	LCD_GotoRC@row,w
  3023  07BD  1D03               	btfss	3,2
  3024  07BE  2FC0               	goto	u561
  3025  07BF  2FC1               	goto	u560
  3026  07C0                     u561:
  3027  07C0  2FCA               	goto	l1292
  3028  07C1                     u560:
  3029  07C1                     l1290:
  3030                           
  3031                           ;LCD.c: 184:    LCD_SendCMD( (0x80) | (row + column) );
  3032  07C1  0876               	movf	LCD_GotoRC@column,w
  3033  07C2  0777               	addwf	LCD_GotoRC@row,w
  3034  07C3  3880               	iorlw	128
  3035  07C4  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  3036  07C9  2FD2               	goto	l177
  3037  07CA                     l1292:
  3038                           
  3039                           ;LCD.c: 187:    LCD_SendCMD( (0x80) | (column + 0x40) );
  3040  07CA  0876               	movf	LCD_GotoRC@column,w
  3041  07CB  3E40               	addlw	64
  3042  07CC  3880               	iorlw	128
  3043  07CD  120A  118A  2633  120A  118A  	fcall	_LCD_SendCMD
  3044  07D2                     l177:
  3045  07D2  0008               	return
  3046  07D3                     __end_of_LCD_GotoRC:
  3047                           
  3048                           	psect	text9
  3049  0633                     __ptext9:	
  3050 ;; *************** function _LCD_SendCMD *****************
  3051 ;; Defined at:
  3052 ;;		line 31 in file "LCD.c"
  3053 ;; Parameters:    Size  Location     Type
  3054 ;;  COMMAND         1    wreg     unsigned char 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  COMMAND         1    5[COMMON] unsigned char 
  3057 ;; Return value:  Size  Location     Type
  3058 ;;                  1    wreg      void 
  3059 ;; Registers used:
  3060 ;;		wreg, status,2, status,0, btemp+1
  3061 ;; Tracked objects:
  3062 ;;		On entry : 0/0
  3063 ;;		On exit  : 0/0
  3064 ;;		Unchanged: 0/0
  3065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3066 ;;      Params:         0       0       0       0       0
  3067 ;;      Locals:         1       0       0       0       0
  3068 ;;      Temps:          2       0       0       0       0
  3069 ;;      Totals:         3       0       0       0       0
  3070 ;;Total ram usage:        3 bytes
  3071 ;; Hardware stack levels used:    1
  3072 ;; Hardware stack levels required when called:    1
  3073 ;; This function calls:
  3074 ;;		Nothing
  3075 ;; This function is called by:
  3076 ;;		_main
  3077 ;;		_LCD_Init
  3078 ;;		_LCD_GotoRC
  3079 ;; This function uses a non-reentrant model
  3080 ;;
  3081                           
  3082                           
  3083                           ;psect for function _LCD_SendCMD
  3084  0633                     _LCD_SendCMD:
  3085                           
  3086                           ;incstack = 0
  3087                           ; Regs used in _LCD_SendCMD: [wreg+status,2+status,0+btemp+1]
  3088                           ;LCD_SendCMD@COMMAND stored from wreg
  3089  0633  00F5               	movwf	LCD_SendCMD@COMMAND
  3090  0634                     l1240:
  3091                           
  3092                           ;LCD.c: 31: void LCD_SendCMD(uint8_t COMMAND);LCD.c: 32: {;LCD.c: 34:     RE2 = 0;
  3093  0634  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0635  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0636  1109               	bcf	9,2	;volatile
  3096  0637                     l1242:
  3097                           
  3098                           ;LCD.c: 35:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3099  0637  3003               	movlw	3
  3100  0638  00F4               	movwf	??_LCD_SendCMD+1
  3101  0639  3097               	movlw	151
  3102  063A  00F3               	movwf	??_LCD_SendCMD
  3103  063B                     u1527:
  3104  063B  0BF3               	decfsz	??_LCD_SendCMD,f
  3105  063C  2E3B               	goto	u1527
  3106  063D  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3107  063E  2E3B               	goto	u1527
  3108  063F  2E40               	nop2
  3109  0640                     l1244:
  3110                           
  3111                           ;LCD.c: 39:         RE1 = 1;
  3112  0640  1283               	bcf	3,5	;RP0=0, select bank0
  3113  0641  1303               	bcf	3,6	;RP1=0, select bank0
  3114  0642  1489               	bsf	9,1	;volatile
  3115                           
  3116                           ;LCD.c: 40:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3117  0643  3003               	movlw	3
  3118  0644  00F4               	movwf	??_LCD_SendCMD+1
  3119  0645  3097               	movlw	151
  3120  0646  00F3               	movwf	??_LCD_SendCMD
  3121  0647                     u1537:
  3122  0647  0BF3               	decfsz	??_LCD_SendCMD,f
  3123  0648  2E47               	goto	u1537
  3124  0649  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3125  064A  2E47               	goto	u1537
  3126  064B  2E4C               	nop2
  3127  064C                     l1246:
  3128                           
  3129                           ;LCD.c: 42:         PORTD &= ~(0xf0);
  3130  064C  300F               	movlw	15
  3131  064D  00FF               	movwf	btemp+1
  3132  064E  087F               	movf	btemp+1,w
  3133  064F  1283               	bcf	3,5	;RP0=0, select bank0
  3134  0650  1303               	bcf	3,6	;RP1=0, select bank0
  3135  0651  0588               	andwf	8,f	;volatile
  3136  0652                     l1248:
  3137                           
  3138                           ;LCD.c: 43:         PORTD |= (COMMAND & 0xF0);
  3139  0652  0875               	movf	LCD_SendCMD@COMMAND,w
  3140  0653  39F0               	andlw	240
  3141  0654  00FF               	movwf	btemp+1
  3142  0655  087F               	movf	btemp+1,w
  3143  0656  0488               	iorwf	8,f	;volatile
  3144                           
  3145                           ;LCD.c: 44:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3146  0657  3003               	movlw	3
  3147  0658  00F4               	movwf	??_LCD_SendCMD+1
  3148  0659  3097               	movlw	151
  3149  065A  00F3               	movwf	??_LCD_SendCMD
  3150  065B                     u1547:
  3151  065B  0BF3               	decfsz	??_LCD_SendCMD,f
  3152  065C  2E5B               	goto	u1547
  3153  065D  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3154  065E  2E5B               	goto	u1547
  3155  065F  2E60               	nop2
  3156  0660                     l1250:
  3157                           
  3158                           ;LCD.c: 46:   RE1 = 0;
  3159  0660  1283               	bcf	3,5	;RP0=0, select bank0
  3160  0661  1303               	bcf	3,6	;RP1=0, select bank0
  3161  0662  1089               	bcf	9,1	;volatile
  3162                           
  3163                           ;LCD.c: 47:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3164  0663  3003               	movlw	3
  3165  0664  00F4               	movwf	??_LCD_SendCMD+1
  3166  0665  3097               	movlw	151
  3167  0666  00F3               	movwf	??_LCD_SendCMD
  3168  0667                     u1557:
  3169  0667  0BF3               	decfsz	??_LCD_SendCMD,f
  3170  0668  2E67               	goto	u1557
  3171  0669  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3172  066A  2E67               	goto	u1557
  3173  066B  2E6C               	nop2
  3174  066C                     l1252:
  3175                           
  3176                           ;LCD.c: 50:         RE1 = 1;
  3177  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3178  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3179  066E  1489               	bsf	9,1	;volatile
  3180                           
  3181                           ;LCD.c: 51:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3182  066F  3003               	movlw	3
  3183  0670  00F4               	movwf	??_LCD_SendCMD+1
  3184  0671  3097               	movlw	151
  3185  0672  00F3               	movwf	??_LCD_SendCMD
  3186  0673                     u1567:
  3187  0673  0BF3               	decfsz	??_LCD_SendCMD,f
  3188  0674  2E73               	goto	u1567
  3189  0675  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3190  0676  2E73               	goto	u1567
  3191  0677  2E78               	nop2
  3192  0678                     l1254:
  3193                           
  3194                           ;LCD.c: 53:         PORTD &= ~(0xf0);
  3195  0678  300F               	movlw	15
  3196  0679  00FF               	movwf	btemp+1
  3197  067A  087F               	movf	btemp+1,w
  3198  067B  1283               	bcf	3,5	;RP0=0, select bank0
  3199  067C  1303               	bcf	3,6	;RP1=0, select bank0
  3200  067D  0588               	andwf	8,f	;volatile
  3201  067E                     l1256:
  3202                           
  3203                           ;LCD.c: 54:         PORTD |= ((COMMAND << 4) & 0xF0);
  3204  067E  0875               	movf	LCD_SendCMD@COMMAND,w
  3205  067F  00F3               	movwf	??_LCD_SendCMD
  3206  0680  3003               	movlw	3
  3207  0681                     u535:
  3208  0681  1003               	clrc
  3209  0682  0DF3               	rlf	??_LCD_SendCMD,f
  3210  0683  3EFF               	addlw	-1
  3211  0684  1D03               	skipz
  3212  0685  2E81               	goto	u535
  3213  0686  1003               	clrc
  3214  0687  0D73               	rlf	??_LCD_SendCMD,w
  3215  0688  39F0               	andlw	240
  3216  0689  00FF               	movwf	btemp+1
  3217  068A  087F               	movf	btemp+1,w
  3218  068B  0488               	iorwf	8,f	;volatile
  3219                           
  3220                           ;LCD.c: 55:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3221  068C  3003               	movlw	3
  3222  068D  00F4               	movwf	??_LCD_SendCMD+1
  3223  068E  3097               	movlw	151
  3224  068F  00F3               	movwf	??_LCD_SendCMD
  3225  0690                     u1577:
  3226  0690  0BF3               	decfsz	??_LCD_SendCMD,f
  3227  0691  2E90               	goto	u1577
  3228  0692  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3229  0693  2E90               	goto	u1577
  3230  0694  2E95               	nop2
  3231  0695                     l1258:
  3232                           
  3233                           ;LCD.c: 57:   RE1 = 0;
  3234  0695  1283               	bcf	3,5	;RP0=0, select bank0
  3235  0696  1303               	bcf	3,6	;RP1=0, select bank0
  3236  0697  1089               	bcf	9,1	;volatile
  3237                           
  3238                           ;LCD.c: 58:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3239  0698  3003               	movlw	3
  3240  0699  00F4               	movwf	??_LCD_SendCMD+1
  3241  069A  3097               	movlw	151
  3242  069B  00F3               	movwf	??_LCD_SendCMD
  3243  069C                     u1587:
  3244  069C  0BF3               	decfsz	??_LCD_SendCMD,f
  3245  069D  2E9C               	goto	u1587
  3246  069E  0BF4               	decfsz	??_LCD_SendCMD+1,f
  3247  069F  2E9C               	goto	u1587
  3248  06A0  2EA1               	nop2
  3249  06A1                     l151:
  3250  06A1  0008               	return
  3251  06A2                     __end_of_LCD_SendCMD:
  3252                           
  3253                           	psect	text10
  3254  0711                     __ptext10:	
  3255 ;; *************** function _LCD_DisStr *****************
  3256 ;; Defined at:
  3257 ;;		line 120 in file "LCD.c"
  3258 ;; Parameters:    Size  Location     Type
  3259 ;;  str             2    6[COMMON] PTR unsigned char 
  3260 ;;		 -> Massage4(7), main@temp(12), Laps.Laps(72), main@Laps(72), 
  3261 ;;		 -> Massage3(7), Massage2(16), Massage1(11), 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  i               1    2[BANK0 ] unsigned char 
  3264 ;; Return value:  Size  Location     Type
  3265 ;;                  1    wreg      void 
  3266 ;; Registers used:
  3267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3268 ;; Tracked objects:
  3269 ;;		On entry : 0/0
  3270 ;;		On exit  : 0/0
  3271 ;;		Unchanged: 0/0
  3272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3273 ;;      Params:         2       0       0       0       0
  3274 ;;      Locals:         0       1       0       0       0
  3275 ;;      Temps:          0       2       0       0       0
  3276 ;;      Totals:         2       3       0       0       0
  3277 ;;Total ram usage:        5 bytes
  3278 ;; Hardware stack levels used:    1
  3279 ;; Hardware stack levels required when called:    2
  3280 ;; This function calls:
  3281 ;;		_LCD_DisChar
  3282 ;; This function is called by:
  3283 ;;		_LCD_DisStrRC
  3284 ;; This function uses a non-reentrant model
  3285 ;;
  3286                           
  3287                           
  3288                           ;psect for function _LCD_DisStr
  3289  0711                     _LCD_DisStr:
  3290  0711                     l1728:	
  3291                           ;incstack = 0
  3292                           ; Regs used in _LCD_DisStr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3293                           
  3294                           
  3295                           ;LCD.c: 120: void LCD_DisStr(uint8_t* str);LCD.c: 121: {;LCD.c: 122:  uint8_t i=0;
  3296  0711  1283               	bcf	3,5	;RP0=0, select bank0
  3297  0712  1303               	bcf	3,6	;RP1=0, select bank0
  3298  0713  01CB               	clrf	LCD_DisStr@i
  3299                           
  3300                           ;LCD.c: 125:  while(str[i] != 0)
  3301  0714  2F2D               	goto	l1734
  3302  0715                     l1730:
  3303                           
  3304                           ;LCD.c: 126:  {;LCD.c: 127:   LCD_DisChar(str[i]);
  3305  0715  084B               	movf	LCD_DisStr@i,w
  3306  0716  0776               	addwf	LCD_DisStr@str,w
  3307  0717  00C9               	movwf	??_LCD_DisStr
  3308  0718  0877               	movf	LCD_DisStr@str+1,w
  3309  0719  1803               	skipnc
  3310  071A  3E01               	addlw	1
  3311  071B  00CA               	movwf	??_LCD_DisStr+1
  3312  071C  0849               	movf	??_LCD_DisStr,w
  3313  071D  0084               	movwf	4
  3314  071E  1783               	bsf	3,7
  3315  071F  1C4A               	btfss	??_LCD_DisStr+1,0
  3316  0720  1383               	bcf	3,7
  3317  0721  0800               	movf	0,w
  3318  0722  120A  118A  26A2  120A  118A  	fcall	_LCD_DisChar
  3319  0727                     l1732:
  3320                           
  3321                           ;LCD.c: 128:   i++;
  3322  0727  3001               	movlw	1
  3323  0728  00FF               	movwf	btemp+1
  3324  0729  087F               	movf	btemp+1,w
  3325  072A  1283               	bcf	3,5	;RP0=0, select bank0
  3326  072B  1303               	bcf	3,6	;RP1=0, select bank0
  3327  072C  07CB               	addwf	LCD_DisStr@i,f
  3328  072D                     l1734:
  3329                           
  3330                           ;LCD.c: 125:  while(str[i] != 0)
  3331  072D  084B               	movf	LCD_DisStr@i,w
  3332  072E  0776               	addwf	LCD_DisStr@str,w
  3333  072F  00C9               	movwf	??_LCD_DisStr
  3334  0730  0877               	movf	LCD_DisStr@str+1,w
  3335  0731  1803               	skipnc
  3336  0732  3E01               	addlw	1
  3337  0733  00CA               	movwf	??_LCD_DisStr+1
  3338  0734  0849               	movf	??_LCD_DisStr,w
  3339  0735  0084               	movwf	4
  3340  0736  1783               	bsf	3,7
  3341  0737  1C4A               	btfss	??_LCD_DisStr+1,0
  3342  0738  1383               	bcf	3,7
  3343  0739  0800               	movf	0,w
  3344  073A  1D03               	btfss	3,2
  3345  073B  2F3D               	goto	u1061
  3346  073C  2F3E               	goto	u1060
  3347  073D                     u1061:
  3348  073D  2F15               	goto	l1730
  3349  073E                     u1060:
  3350  073E                     l160:
  3351  073E  0008               	return
  3352  073F                     __end_of_LCD_DisStr:
  3353                           
  3354                           	psect	text11
  3355  06A2                     __ptext11:	
  3356 ;; *************** function _LCD_DisChar *****************
  3357 ;; Defined at:
  3358 ;;		line 76 in file "LCD.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  DATA            1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  DATA            1    5[COMMON] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;                  1    wreg      void 
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0, btemp+1
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3372 ;;      Params:         0       0       0       0       0
  3373 ;;      Locals:         1       0       0       0       0
  3374 ;;      Temps:          2       0       0       0       0
  3375 ;;      Totals:         3       0       0       0       0
  3376 ;;Total ram usage:        3 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    1
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_LCD_DisStr
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _LCD_DisChar
  3388  06A2                     _LCD_DisChar:
  3389                           
  3390                           ;incstack = 0
  3391                           ; Regs used in _LCD_DisChar: [wreg+status,2+status,0+btemp+1]
  3392                           ;LCD_DisChar@DATA stored from wreg
  3393  06A2  00F5               	movwf	LCD_DisChar@DATA
  3394  06A3                     l1708:
  3395                           
  3396                           ;LCD.c: 76: void LCD_DisChar(uint8_t DATA);LCD.c: 77: {;LCD.c: 78:     RE2 = 1;
  3397  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  3398  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  3399  06A5  1509               	bsf	9,2	;volatile
  3400  06A6                     l1710:
  3401                           
  3402                           ;LCD.c: 79:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3403  06A6  3003               	movlw	3
  3404  06A7  00F4               	movwf	??_LCD_DisChar+1
  3405  06A8  3097               	movlw	151
  3406  06A9  00F3               	movwf	??_LCD_DisChar
  3407  06AA                     u1597:
  3408  06AA  0BF3               	decfsz	??_LCD_DisChar,f
  3409  06AB  2EAA               	goto	u1597
  3410  06AC  0BF4               	decfsz	??_LCD_DisChar+1,f
  3411  06AD  2EAA               	goto	u1597
  3412  06AE  2EAF               	nop2
  3413  06AF                     l1712:
  3414                           
  3415                           ;LCD.c: 83:         RE1 = 1;
  3416  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  3417  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  3418  06B1  1489               	bsf	9,1	;volatile
  3419                           
  3420                           ;LCD.c: 84:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3421  06B2  3003               	movlw	3
  3422  06B3  00F4               	movwf	??_LCD_DisChar+1
  3423  06B4  3097               	movlw	151
  3424  06B5  00F3               	movwf	??_LCD_DisChar
  3425  06B6                     u1607:
  3426  06B6  0BF3               	decfsz	??_LCD_DisChar,f
  3427  06B7  2EB6               	goto	u1607
  3428  06B8  0BF4               	decfsz	??_LCD_DisChar+1,f
  3429  06B9  2EB6               	goto	u1607
  3430  06BA  2EBB               	nop2
  3431  06BB                     l1714:
  3432                           
  3433                           ;LCD.c: 86:         PORTD &= ~(0xf0);
  3434  06BB  300F               	movlw	15
  3435  06BC  00FF               	movwf	btemp+1
  3436  06BD  087F               	movf	btemp+1,w
  3437  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  3438  06BF  1303               	bcf	3,6	;RP1=0, select bank0
  3439  06C0  0588               	andwf	8,f	;volatile
  3440  06C1                     l1716:
  3441                           
  3442                           ;LCD.c: 87:         PORTD |= (DATA & 0xF0);
  3443  06C1  0875               	movf	LCD_DisChar@DATA,w
  3444  06C2  39F0               	andlw	240
  3445  06C3  00FF               	movwf	btemp+1
  3446  06C4  087F               	movf	btemp+1,w
  3447  06C5  0488               	iorwf	8,f	;volatile
  3448                           
  3449                           ;LCD.c: 88:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3450  06C6  3003               	movlw	3
  3451  06C7  00F4               	movwf	??_LCD_DisChar+1
  3452  06C8  3097               	movlw	151
  3453  06C9  00F3               	movwf	??_LCD_DisChar
  3454  06CA                     u1617:
  3455  06CA  0BF3               	decfsz	??_LCD_DisChar,f
  3456  06CB  2ECA               	goto	u1617
  3457  06CC  0BF4               	decfsz	??_LCD_DisChar+1,f
  3458  06CD  2ECA               	goto	u1617
  3459  06CE  2ECF               	nop2
  3460  06CF                     l1718:
  3461                           
  3462                           ;LCD.c: 90:         RE1 = 0;
  3463  06CF  1283               	bcf	3,5	;RP0=0, select bank0
  3464  06D0  1303               	bcf	3,6	;RP1=0, select bank0
  3465  06D1  1089               	bcf	9,1	;volatile
  3466                           
  3467                           ;LCD.c: 91:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3468  06D2  3003               	movlw	3
  3469  06D3  00F4               	movwf	??_LCD_DisChar+1
  3470  06D4  3097               	movlw	151
  3471  06D5  00F3               	movwf	??_LCD_DisChar
  3472  06D6                     u1627:
  3473  06D6  0BF3               	decfsz	??_LCD_DisChar,f
  3474  06D7  2ED6               	goto	u1627
  3475  06D8  0BF4               	decfsz	??_LCD_DisChar+1,f
  3476  06D9  2ED6               	goto	u1627
  3477  06DA  2EDB               	nop2
  3478  06DB                     l1720:
  3479                           
  3480                           ;LCD.c: 93:         RE1 = 1;
  3481  06DB  1283               	bcf	3,5	;RP0=0, select bank0
  3482  06DC  1303               	bcf	3,6	;RP1=0, select bank0
  3483  06DD  1489               	bsf	9,1	;volatile
  3484                           
  3485                           ;LCD.c: 94:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3486  06DE  3003               	movlw	3
  3487  06DF  00F4               	movwf	??_LCD_DisChar+1
  3488  06E0  3097               	movlw	151
  3489  06E1  00F3               	movwf	??_LCD_DisChar
  3490  06E2                     u1637:
  3491  06E2  0BF3               	decfsz	??_LCD_DisChar,f
  3492  06E3  2EE2               	goto	u1637
  3493  06E4  0BF4               	decfsz	??_LCD_DisChar+1,f
  3494  06E5  2EE2               	goto	u1637
  3495  06E6  2EE7               	nop2
  3496  06E7                     l1722:
  3497                           
  3498                           ;LCD.c: 96:         PORTD &= ~(0xf0);
  3499  06E7  300F               	movlw	15
  3500  06E8  00FF               	movwf	btemp+1
  3501  06E9  087F               	movf	btemp+1,w
  3502  06EA  1283               	bcf	3,5	;RP0=0, select bank0
  3503  06EB  1303               	bcf	3,6	;RP1=0, select bank0
  3504  06EC  0588               	andwf	8,f	;volatile
  3505  06ED                     l1724:
  3506                           
  3507                           ;LCD.c: 97:   PORTD |= ((DATA << 4) & 0xF0);
  3508  06ED  0875               	movf	LCD_DisChar@DATA,w
  3509  06EE  00F3               	movwf	??_LCD_DisChar
  3510  06EF  3003               	movlw	3
  3511  06F0                     u1055:
  3512  06F0  1003               	clrc
  3513  06F1  0DF3               	rlf	??_LCD_DisChar,f
  3514  06F2  3EFF               	addlw	-1
  3515  06F3  1D03               	skipz
  3516  06F4  2EF0               	goto	u1055
  3517  06F5  1003               	clrc
  3518  06F6  0D73               	rlf	??_LCD_DisChar,w
  3519  06F7  39F0               	andlw	240
  3520  06F8  00FF               	movwf	btemp+1
  3521  06F9  087F               	movf	btemp+1,w
  3522  06FA  0488               	iorwf	8,f	;volatile
  3523                           
  3524                           ;LCD.c: 98:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3525  06FB  3003               	movlw	3
  3526  06FC  00F4               	movwf	??_LCD_DisChar+1
  3527  06FD  3097               	movlw	151
  3528  06FE  00F3               	movwf	??_LCD_DisChar
  3529  06FF                     u1647:
  3530  06FF  0BF3               	decfsz	??_LCD_DisChar,f
  3531  0700  2EFF               	goto	u1647
  3532  0701  0BF4               	decfsz	??_LCD_DisChar+1,f
  3533  0702  2EFF               	goto	u1647
  3534  0703  2F04               	nop2
  3535  0704                     l1726:
  3536                           
  3537                           ;LCD.c: 100:   RE1 = 0;
  3538  0704  1283               	bcf	3,5	;RP0=0, select bank0
  3539  0705  1303               	bcf	3,6	;RP1=0, select bank0
  3540  0706  1089               	bcf	9,1	;volatile
  3541                           
  3542                           ;LCD.c: 101:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  3543  0707  3003               	movlw	3
  3544  0708  00F4               	movwf	??_LCD_DisChar+1
  3545  0709  3097               	movlw	151
  3546  070A  00F3               	movwf	??_LCD_DisChar
  3547  070B                     u1657:
  3548  070B  0BF3               	decfsz	??_LCD_DisChar,f
  3549  070C  2F0B               	goto	u1657
  3550  070D  0BF4               	decfsz	??_LCD_DisChar+1,f
  3551  070E  2F0B               	goto	u1657
  3552  070F  2F10               	nop2
  3553  0710                     l154:
  3554  0710  0008               	return
  3555  0711                     __end_of_LCD_DisChar:
  3556                           
  3557                           	psect	text12
  3558  0789                     __ptext12:	
  3559 ;; *************** function _ISR *****************
  3560 ;; Defined at:
  3561 ;;		line 63 in file "main.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      void 
  3568 ;; Registers used:
  3569 ;;		wreg, status,2, status,0, btemp+1
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3575 ;;      Params:         0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0
  3577 ;;      Temps:          3       0       0       0       0
  3578 ;;      Totals:         3       0       0       0       0
  3579 ;;Total ram usage:        3 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		Interrupt level 1
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _ISR
  3590  0789                     _ISR:
  3591  0789                     i1l1446:
  3592                           
  3593                           ;main.c: 67:     if (TMR1IF) {
  3594  0789  1C0C               	btfss	12,0	;volatile
  3595  078A  2F8C               	goto	u82_21
  3596  078B  2F8D               	goto	u82_20
  3597  078C                     u82_21:
  3598  078C  2F9A               	goto	i1l76
  3599  078D                     u82_20:
  3600  078D                     i1l1448:
  3601                           
  3602                           ;main.c: 69:         Lap_MilliSeconds++;
  3603  078D  3001               	movlw	1
  3604  078E  00FF               	movwf	btemp+1
  3605  078F  087F               	movf	btemp+1,w
  3606  0790  1683               	bsf	3,5	;RP0=1, select bank3
  3607  0791  1703               	bsf	3,6	;RP1=1, select bank3
  3608  0792  07ED               	addwf	_Lap_MilliSeconds^(0+384),f
  3609  0793                     i1l1450:
  3610                           
  3611                           ;main.c: 71:         TMR1 = 65536 - 10000;
  3612  0793  30D8               	movlw	216
  3613  0794  1283               	bcf	3,5	;RP0=0, select bank0
  3614  0795  1303               	bcf	3,6	;RP1=0, select bank0
  3615  0796  008F               	movwf	15	;volatile
  3616  0797  30F0               	movlw	240
  3617  0798  008E               	movwf	14	;volatile
  3618  0799                     i1l1452:
  3619                           
  3620                           ;main.c: 72:         TMR1IF = 0;
  3621  0799  100C               	bcf	12,0	;volatile
  3622  079A                     i1l76:
  3623  079A  0872               	movf	??_ISR+2,w
  3624  079B  00FF               	movwf	btemp+1
  3625  079C  0871               	movf	??_ISR+1,w
  3626  079D  008A               	movwf	10
  3627  079E  0E70               	swapf	??_ISR^(0+4294967168),w
  3628  079F  0083               	movwf	3
  3629  07A0  0EFE               	swapf	btemp,f
  3630  07A1  0E7E               	swapf	btemp,w
  3631  07A2  0009               	retfie
  3632  07A3                     __end_of_ISR:
  3633  007E                     btemp	set	126	;btemp
  3634  007E                     wtemp0	set	126
  3635                           
  3636                           	psect	intentry
  3637  0004                     __pintentry:	
  3638                           ;incstack = 0
  3639                           ; Regs used in _ISR: [wreg+status,2+status,0+btemp+1]
  3640                           
  3641  0004                     interrupt_function:
  3642  007E                     saved_w	set	btemp
  3643  0004  00FE               	movwf	btemp
  3644  0005  0E03               	swapf	3,w
  3645  0006  00F0               	movwf	??_ISR
  3646  0007  080A               	movf	10,w
  3647  0008  00F1               	movwf	??_ISR+1
  3648  0009  1283               	bcf	3,5	;RP0=0, select bank0
  3649  000A  1303               	bcf	3,6	;RP1=0, select bank0
  3650  000B  087F               	movf	btemp+1,w
  3651  000C  00F2               	movwf	??_ISR+2
  3652  000D  120A  118A  2F89   	ljmp	_ISR
  3653                           
  3654                           	psect	config
  3655                           
  3656                           ;Config register CONFIG @ 0x2007
  3657                           ;	Oscillator Selection bits
  3658                           ;	FOSC = XT, XT oscillator
  3659                           ;	Watchdog Timer Enable bit
  3660                           ;	WDTE = OFF, WDT disabled
  3661                           ;	Power-up Timer Enable bit
  3662                           ;	PWRTE = ON, PWRT enabled
  3663                           ;	Brown-out Reset Enable bit
  3664                           ;	BOREN = ON, BOR enabled
  3665                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  3666                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  3667                           ;	Data EEPROM Memory Code Protection bit
  3668                           ;	CPD = OFF, Data EEPROM code protection off
  3669                           ;	Flash Program Memory Write Enable bits
  3670                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  3671                           ;	In-Circuit Debugger Mode bit
  3672                           ;	DEBUG = 0x1, unprogrammed default
  3673                           ;	Flash Program Memory Code Protection bit
  3674                           ;	CP = OFF, Code protection off
  3675  2007                     	org	8199
  3676  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        42
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     26      67
    BANK1            80      0       0
    BANK3            96     86      96
    BANK2            96      0       0

Pointer List with Targets:

    LCD_DisStrRC@str	PTR unsigned char  size(2) Largest target is 72
		 -> Massage4(BANK0[7]), main@temp(BANK3[12]), Laps.Laps(BANK0[72]), main@Laps(BANK3[72]), 
		 -> Massage3(BANK0[7]), Massage2(BANK0[16]), Massage1(BANK0[11]), 

    LCD_Int2Str@str	PTR unsigned char  size(1) Largest target is 72
		 -> main@temp(BANK3[12]), Laps.Laps(BANK0[72]), main@Laps(BANK3[72]), 

    LCD_DisStr@str	PTR unsigned char  size(2) Largest target is 72
		 -> Massage4(BANK0[7]), main@temp(BANK3[12]), Laps.Laps(BANK0[72]), main@Laps(BANK3[72]), 
		 -> Massage3(BANK0[7]), Massage2(BANK0[16]), Massage1(BANK0[11]), 


Critical Paths under _main in COMMON

    _main->_LCD_Int2Str
    _LCD_Int2Str->___almod
    _LCD_Int2Str->___bmul
    _LCD_Init->_LCD_SendCMD
    _LCD_DisStrRC->_LCD_DisStr
    _LCD_DisStrRC->_LCD_GotoRC
    _LCD_GotoRC->_LCD_SendCMD
    _LCD_DisStr->_LCD_DisChar

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_LCD_Int2Str
    _LCD_Int2Str->___aldiv
    _LCD_DisStrRC->_LCD_DisStr

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                90    90      0    9799
                                             22 BANK0      4     4      0
                                              0 BANK3     86    86      0
                       _LCD_DisStrRC
                           _LCD_Init
                        _LCD_Int2Str
                        _LCD_SendCMD
                        _Timer1_Init
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) ___bmul                                               3     2      1     560
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _Timer1_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Int2Str                                         10     5      5    3483
                                              6 COMMON     2     2      0
                                             14 BANK0      8     3      5
                            ___aldiv
                            ___almod
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___almod                                             11     3      8     613
                                              3 COMMON     3     3      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      44
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (1) _LCD_DisStrRC                                         4     0      4    4363
                                              3 BANK0      4     0      4
                         _LCD_DisStr
                         _LCD_GotoRC
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _LCD_GotoRC                                           2     1      1     208
                                              6 COMMON     2     1      1
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SendCMD                                          3     3      0      44
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _LCD_DisStr                                           5     3      2     237
                                              6 COMMON     2     0      2
                                              0 BANK0      3     3      0
                        _LCD_DisChar
 ---------------------------------------------------------------------------------
 (3) _LCD_DisChar                                          3     3      0      62
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_DisStrRC
     _LCD_DisStr
       _LCD_DisChar
     _LCD_GotoRC
       _LCD_SendCMD
     ___bmul (ARG)
   _LCD_Init
     _LCD_SendCMD
   _LCD_Int2Str
     ___aldiv
     ___almod
     ___bmul (ARG)
   _LCD_SendCMD
   _Timer1_Init
   ___bmul

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     56      60       9      100.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1A      43       5       83.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      AE      12        0.0%
ABS                  0      0      AE       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Nov 10 05:40:24 2020

            ?_LCD_DisStr 0076             ?_LCD_DisChar 0070                        pc 0002  
            ?_LCD_GotoRC 0076           ___bmul@product 0074             ?_LCD_Int2Str 0057  
                     l91 00A0                       l94 00BF                       l86 00D6  
                     l87 009B                       l96 00DC                       fsr 0004  
          ?_LCD_DisStrRC 004C             ?_LCD_SendCMD 0070                      l102 00F9  
                    l113 012D                      l131 0FFF                      l115 0132  
                    l108 0116                      l151 06A1                      l160 073E  
                    l154 0710                      l331 0523                      l180 07BA  
                    l148 0788                      l172 050E                      l341 05AB  
                    l344 05C0                      l177 07D2                      l354 0632  
                    l292 07E7                      _GIE 005F                      _RB0 0030  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RE1 0049                      _RE2 004A                      _ISR 0789  
                    u535 0681                      u560 07C1                      u800 07D9  
                    u561 07C0                      u801 07D8                      u810 07E6  
                    u811 07E5                      fsr0 0004                      indf 0000  
                   ?_ISR 0070                     l2000 044A                     l2110 00CE  
                   l1240 0634                     l2112 0143                     l1250 0660  
                   l1242 0637                     l2114 0454                     l1252 066C  
                   l1244 0640                     l1254 0678                     l1246 064C  
                   l1430 07D4                     l1256 067E                     l1248 0652  
                   l1440 07E1                     l1432 07D5                     l1258 0695  
                   l1290 07C1                     l1370 0768                     l1442 07E6  
                   l1434 07D9                     l1292 07CA                     l1380 077C  
                   l1372 076E                     l1436 07DD                     l1710 06A6  
                   l1382 0782                     l1374 076F                     l1438 07DF  
                   l1720 06DB                     l1712 06AF                     l1288 07BC  
                   l1376 0770                     l1800 060B                     l1384 0FED  
                   l1722 06E7                     l1714 06BB                     l1730 0715  
                   l1378 0776                     l1802 0614                     l1724 06ED  
                   l1716 06C1                     l1708 06A3                     l1732 0727  
                   l1812 07A3                     l1740 0516                     l1804 061A  
                   l1900 00AB                     l1726 0704                     l1718 06CF  
                   l1734 072D                     l1814 07AF                     l1750 0546  
                   l1742 0527                     l1806 061F                     l1830 04B8  
                   l1822 046B                     l1902 00B8                     l1910 00C2  
                   l1728 0711                     l1760 0563                     l1752 0549  
                   l1744 0532                     l1736 050F                     l1808 062A  
                   l1840 04E6                     l1832 04BF                     l1824 048D  
                   l1816 045F                     l1920 00F2                     l1904 00BB  
                   l1762 0575                     l1754 0552                     l1770 0593  
                   l1746 0536                     l1738 0512                     l1850 04FD  
                   l1842 04E8                     l1834 04C4                     l1826 04AC  
                   l1818 0462                     l1930 0108                     l1914 00E0  
                   l1922 00F3                     l1772 0598                     l1764 0583  
                   l1756 0556                     l1748 053E                     l1780 05AD  
                   l1852 0504                     l1844 04EC                     l1836 04C5  
                   l1828 04B0                     l1940 0125                     l1932 010C  
                   l1916 00E7                     l1860 0044                     l1774 05A3  
                   l1766 0584                     l1758 055A                     l1790 05DA  
                   l1782 05B3                     l1854 050A                     l1838 04C6  
                   l1846 04F3                     l1950 0152                     l1942 012B  
                   l1926 00FD                     l1934 0110                     l1918 00EB  
                   l1870 006B                     l1862 0049                     l1768 058D  
                   l1792 05E3                     l1784 05C4                     l1848 04FA  
                   l1960 016B                     l1928 0104                     l1880 0082  
                   l1872 0073                     l1864 0059                     l1856 0039  
                   l1794 05E7                     l1786 05CF                     l1778 05AC  
                   l1970 01D1                     l1962 017D                     l1938 011B  
                   l1946 0137                     l1890 0094                     l1882 0083  
                   l1874 0077                     l1866 0067                     l1858 003F  
                   l1796 05EB                     l1788 05D7                     l1980 0285  
                   l1972 01D7                     l1964 0191                     l1956 0154  
                   l1948 014B                     l1892 0095                     l1884 0089  
                   l1876 0078                     l1868 006A                     l1798 05FD  
                   l1990 03B7                     l1982 0289                     l1974 01DD  
                   l1966 01AB                     l1958 0165                     l1886 008D  
                   l1878 007E                     l1992 03C4                     l1984 0331  
                   l1968 01BD                     l1976 01DE                     l1896 00A1  
                   l1888 008E                     l1994 03CB                     l1986 0336  
                   l1978 01E3                     l1898 00A5                     l1996 0440  
                   l1988 03AE                     u1110 055A                     u1111 0559  
                   u1105 054B                     u1130 0575                     u1210 05EB  
                   u1131 0574                     u1211 05EA                     u1060 073E  
                   u1220 05FD                     u1300 0073                     u1061 073D  
                   u1125 055C                     u1221 05FC                     u1205 05DC  
                   u1301 0072                     u1150 0593                     u1070 0516  
                   u1310 007E                     u1055 06F0                     u1151 0592  
                   u1135 0571                     u1071 0515                     u1311 007D  
                   u1160 0598                     u1080 0527                     u1240 061A  
                   u1400 00F9                     u1320 0089                     u1161 0597  
                   u1145 0585                     u1081 0526                     u1241 0619  
                   u1225 05F9                     u1401 00F8                     u1321 0088  
                   u1090 0546                     u1250 061F                     u1170 05B3  
                   u1410 00FD                     u1330 0094                     u1091 0545  
                   u1251 061E                     u1235 060C                     u1171 05B2  
                   u1411 00FC                     u1331 0093                     u1180 05C4  
                   u1260 046A                     u1500 0336                     u1420 0104  
                   u1340 009B                     u1181 05C3                     u1261 0469  
                   u1501 0335                     u1421 0103                     u1341 009A  
                   u1190 05D7                     u1270 04B8                     u1510 03CB  
                   u1430 010C                     u1350 009F                     u1191 05D6  
                   u1271 04B7                     u1511 03CA                     u1431 010B  
                   u1351 009E                     u1280 04F2                     u1440 0116  
                   u1360 00DC                     u1281 04F1                     u1441 0115  
                   u1361 00DB                     u1290 0504                     u1450 011A  
                   u1370 00E0                     u1291 0503                     u1451 0119  
                   u1371 00DF                     u1460 012B                     u1380 00E7  
                   u1461 012A                     u1381 00E6                     u1470 0152  
                   u1390 00F2                     u1607 06B6                     u1527 063B  
                   u1471 0151                     u1391 00F1                     u1480 01DD  
                   u1617 06CA                     u1537 0647                     u1481 01DC  
                   u1490 01E3                     u1627 06D6                     u1547 065B  
                   u1491 01E2                     u1637 06E2                     u1557 0667  
                   u1647 06FF                     u1567 0673                     u1657 070B  
                   u1577 0690                     u1587 069C                     u1597 06AA  
                   _PEIE 005E                     i1l76 079A         LCD_GotoRC@column 0076  
                   _TMR1 000E              LCD_DisStr@i 004B                     _main 0039  
                   btemp 007E       LCD_Int2Str@Integer 0057                     start 0010  
      ___bmul@multiplier 0075                    ??_ISR 0070           ??_LCD_DisStrRC 0078  
       __end_of_LCD_Init 0789          __end_of___aldiv 05AC          __end_of___almod 0633  
                  ?_main 0070                    _PORTD 0008                    _TRISD 0088  
                  u82_20 078D                    u82_21 078C      __size_of_LCD_DisStr 002E  
                  main@i 0191             LCD_Int2Str@i 005E             LCD_Int2Str@j 005D  
    __size_of_LCD_GotoRC 0018                    pclath 000A                    status 0003  
                  wtemp0 007E         _Lap_MilliSeconds 01ED          __initialization 0013  
           __end_of_main 045F                   ??_main 005F                   i1l1450 0793  
                 i1l1452 0799                   i1l1446 0789                   i1l1448 078D  
                 _TMR1IE 0460                   _TMR1IF 0060                   _TMR1CS 0081  
                 _TMR1ON 0080               _Reset_flag 01EF            ??_Timer1_Init 0073  
            _Lap_Minutes 01EB              _Lap_Seconds 01EC                   ___bmul 07D3  
          LCD_DisStr@str 0076                ??___aldiv 0073                ??___almod 0073  
   __size_of_LCD_DisChar 006F     __size_of_LCD_Int2Str 00B0              _Lap_counter 01E9  
   __size_of_LCD_SendCMD 006F                   saved_w 007E     __end_of_LCD_DisStrRC 07BB  
__end_of__initialization 0035                ?_LCD_Init 0070            LCD_GotoRC@row 0077  
    ___bmul@multiplicand 0073           __pcstackCOMMON 0070             ??_LCD_DisStr 0049  
           __pidataBANK0 073F             __pidataBANK3 07FB             ??_LCD_GotoRC 0077  
    __end_of_Timer1_Init 1000               __pbssBANK3 01E6       __end_of_LCD_DisStr 073F  
     __end_of_LCD_GotoRC 07D3               ??_LCD_Init 0076               __pmaintext 0039  
                ?___bmul 0073               __pintentry 0004                  _T1CKPS0 0084  
                _T1CKPS1 0085              _Timer1_Init 0FED                  ___aldiv 050F  
        __size_of___bmul 0015                  ___almod 05AC                  __ptext1 07D3  
                __ptext2 0FED                  __ptext3 045F                  __ptext4 05AC  
                __ptext5 050F                  __ptext6 0768                  __ptext7 07A3  
                __ptext8 07BB                  __ptext9 0633             __size_of_ISR 001A  
       ___aldiv@dividend 004D    __size_of_LCD_DisStrRC 0018     end_of_initialization 0035  
         LCD_Int2Str@str 005B                _INIT_DONE 01E6         ___aldiv@quotient 0053  
     LCD_DisStrRC@column 004F             _LCD_DisStrRC 07A3                _TRISBbits 0086  
              _TRISEbits 0089        __size_of_LCD_Init 0021            ??_LCD_DisChar 0073  
         _scroll_counter 01E8            ??_LCD_Int2Str 0076           __end_of___bmul 07E8  
              _Lap_Hours 01EA            ??_LCD_SendCMD 0073      start_initialization 0013  
            __end_of_ISR 07A3                 ??___bmul 0074               init_fetch0 07E8  
            __pdataBANK0 0020              __pdataBANK3 01EF      __end_of_LCD_DisChar 0711  
    __end_of_LCD_Int2Str 050F              __pbssCOMMON 0078                ___latbits 0002  
          __pcstackBANK0 0049            __pcstackBANK3 0190      __end_of_LCD_SendCMD 06A2  
           ?_Timer1_Init 0070        _Start_Stop_Status 01EE                 ?___aldiv 0049  
               ?___almod 0049            _Timer_Counter 0078         main@save_counter 0190  
       ___almod@dividend 004D                _first_lap 007A          LCD_DisChar@DATA 0075  
        ___aldiv@divisor 0049        interrupt_function 0004          ___aldiv@counter 0051  
               _LCD_Init 0768                 _LAP_flag 01E7              _LCD_DisChar 06A2  
            _LCD_Int2Str 045F              _LCD_SendCMD 0633                 _Massage1 0030  
               _Massage2 0020                 _Massage3 0042                 _Massage4 003B  
        LCD_DisStrRC@row 004E          LCD_DisStrRC@str 004C         __size_of___aldiv 009D  
       __size_of___almod 0087                 __ptext10 0711                 __ptext11 06A2  
               __ptext12 0789          ___almod@divisor 0049          ___almod@counter 0074  
          __size_of_main 0426               _LCD_DisStr 0711     __size_of_Timer1_Init 0013  
             _LCD_GotoRC 07BB                 main@Laps 019E                 main@temp 0192  
        LCD_Int2Str@temp 005C                 init_ram0 07EC                 intlevel1 0000  
           ___aldiv@sign 0052             ___almod@sign 0075       LCD_SendCMD@COMMAND 0075  
