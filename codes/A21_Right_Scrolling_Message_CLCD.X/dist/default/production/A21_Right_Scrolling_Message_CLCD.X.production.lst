

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Thu Nov 05 03:16:12 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	inittext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F877A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0098                     	;# 
   101  0099                     	;# 
   102  009C                     	;# 
   103  009D                     	;# 
   104  009E                     	;# 
   105  009F                     	;# 
   106  010C                     	;# 
   107  010D                     	;# 
   108  010E                     	;# 
   109  010F                     	;# 
   110  018C                     	;# 
   111  018D                     	;# 
   112  0000                     	;# 
   113  0001                     	;# 
   114  0002                     	;# 
   115  0003                     	;# 
   116  0004                     	;# 
   117  0005                     	;# 
   118  0006                     	;# 
   119  0007                     	;# 
   120  0008                     	;# 
   121  0009                     	;# 
   122  000A                     	;# 
   123  000B                     	;# 
   124  000C                     	;# 
   125  000D                     	;# 
   126  000E                     	;# 
   127  000E                     	;# 
   128  000F                     	;# 
   129  0010                     	;# 
   130  0011                     	;# 
   131  0012                     	;# 
   132  0013                     	;# 
   133  0014                     	;# 
   134  0015                     	;# 
   135  0015                     	;# 
   136  0016                     	;# 
   137  0017                     	;# 
   138  0018                     	;# 
   139  0019                     	;# 
   140  001A                     	;# 
   141  001B                     	;# 
   142  001B                     	;# 
   143  001C                     	;# 
   144  001D                     	;# 
   145  001E                     	;# 
   146  001F                     	;# 
   147  0081                     	;# 
   148  0085                     	;# 
   149  0086                     	;# 
   150  0087                     	;# 
   151  0088                     	;# 
   152  0089                     	;# 
   153  008C                     	;# 
   154  008D                     	;# 
   155  008E                     	;# 
   156  0091                     	;# 
   157  0092                     	;# 
   158  0093                     	;# 
   159  0094                     	;# 
   160  0098                     	;# 
   161  0099                     	;# 
   162  009C                     	;# 
   163  009D                     	;# 
   164  009E                     	;# 
   165  009F                     	;# 
   166  010C                     	;# 
   167  010D                     	;# 
   168  010E                     	;# 
   169  010F                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  0000                     	;# 
   173  0001                     	;# 
   174  0002                     	;# 
   175  0003                     	;# 
   176  0004                     	;# 
   177  0005                     	;# 
   178  0006                     	;# 
   179  0007                     	;# 
   180  0008                     	;# 
   181  0009                     	;# 
   182  000A                     	;# 
   183  000B                     	;# 
   184  000C                     	;# 
   185  000D                     	;# 
   186  000E                     	;# 
   187  000E                     	;# 
   188  000F                     	;# 
   189  0010                     	;# 
   190  0011                     	;# 
   191  0012                     	;# 
   192  0013                     	;# 
   193  0014                     	;# 
   194  0015                     	;# 
   195  0015                     	;# 
   196  0016                     	;# 
   197  0017                     	;# 
   198  0018                     	;# 
   199  0019                     	;# 
   200  001A                     	;# 
   201  001B                     	;# 
   202  001B                     	;# 
   203  001C                     	;# 
   204  001D                     	;# 
   205  001E                     	;# 
   206  001F                     	;# 
   207  0081                     	;# 
   208  0085                     	;# 
   209  0086                     	;# 
   210  0087                     	;# 
   211  0088                     	;# 
   212  0089                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0091                     	;# 
   217  0092                     	;# 
   218  0093                     	;# 
   219  0094                     	;# 
   220  0098                     	;# 
   221  0099                     	;# 
   222  009C                     	;# 
   223  009D                     	;# 
   224  009E                     	;# 
   225  009F                     	;# 
   226  010C                     	;# 
   227  010D                     	;# 
   228  010E                     	;# 
   229  010F                     	;# 
   230  018C                     	;# 
   231  018D                     	;# 
   232                           
   233                           	psect	idataBANK0
   234  06AE                     __pidataBANK0:
   235                           
   236                           ;initializer for _Massage
   237  06AE  3454               	retlw	84
   238  06AF  3468               	retlw	104
   239  06B0  3469               	retlw	105
   240  06B1  3473               	retlw	115
   241  06B2  3420               	retlw	32
   242  06B3  3469               	retlw	105
   243  06B4  3473               	retlw	115
   244  06B5  3420               	retlw	32
   245  06B6  3461               	retlw	97
   246  06B7  3420               	retlw	32
   247  06B8  3473               	retlw	115
   248  06B9  3474               	retlw	116
   249  06BA  3461               	retlw	97
   250  06BB  3474               	retlw	116
   251  06BC  3469               	retlw	105
   252  06BD  3463               	retlw	99
   253  06BE  3420               	retlw	32
   254  06BF  346D               	retlw	109
   255  06C0  3461               	retlw	97
   256  06C1  3473               	retlw	115
   257  06C2  3473               	retlw	115
   258  06C3  3461               	retlw	97
   259  06C4  3467               	retlw	103
   260  06C5  3465               	retlw	101
   261  06C6  3420               	retlw	32
   262  06C7  3472               	retlw	114
   263  06C8  3469               	retlw	105
   264  06C9  3467               	retlw	103
   265  06CA  3468               	retlw	104
   266  06CB  3474               	retlw	116
   267  06CC  3420               	retlw	32
   268  06CD  3473               	retlw	115
   269  06CE  3468               	retlw	104
   270  06CF  3469               	retlw	105
   271  06D0  3466               	retlw	102
   272  06D1  3474               	retlw	116
   273  06D2  3465               	retlw	101
   274  06D3  3464               	retlw	100
   275  06D4  3400               	retlw	0
   276  06D5  3400               	retlw	0
   277  0008                     _PORTD	set	8
   278  0049                     _RE1	set	73
   279  004A                     _RE2	set	74
   280  0089                     _TRISEbits	set	137
   281  0088                     _TRISD	set	136
   282                           
   283                           	psect	cinit
   284  07ED                     start_initialization:	
   285                           ; #config settings
   286                           
   287  07ED                     __initialization:
   288                           
   289                           ; Initialize objects allocated to BANK0
   290  07ED  1383               	bcf	3,7	;select IRP bank0
   291  07EE  3048               	movlw	low (__pdataBANK0+40)
   292  07EF  00FD               	movwf	btemp+-1
   293  07F0  3006               	movlw	high __pidataBANK0
   294  07F1  00FE               	movwf	btemp
   295  07F2  30AE               	movlw	low __pidataBANK0
   296  07F3  00FF               	movwf	btemp+1
   297  07F4  3020               	movlw	low __pdataBANK0
   298  07F5  0084               	movwf	4
   299  07F6  120A  118A  2669  120A  118A  	fcall	init_ram0
   300                           
   301                           ; Clear objects allocated to COMMON
   302  07FB  01F9               	clrf	__pbssCOMMON& (0+127)
   303  07FC                     end_of_initialization:	
   304                           ;End of C runtime variable initialization code
   305                           
   306  07FC                     __end_of__initialization:
   307  07FC  0183               	clrf	3
   308  07FD  120A  118A  2ED6   	ljmp	_main	;jump to C main() function
   309                           
   310                           	psect	bssCOMMON
   311  0079                     __pbssCOMMON:
   312  0079                     _Offset:
   313  0079                     	ds	1
   314                           
   315                           	psect	dataBANK0
   316  0020                     __pdataBANK0:
   317  0020                     _Massage:
   318  0020                     	ds	40
   319                           
   320                           	psect	inittext
   321  0665                     init_fetch0:	
   322                           ;	Called with low address in FSR and high address in W
   323                           
   324  0665  087E               	movf	btemp,w
   325  0666  008A               	movwf	10
   326  0667  087F               	movf	btemp+1,w
   327  0668  0082               	movwf	2
   328  0669                     init_ram0:	
   329                           ;Called with:
   330                           ;	high address of idata address in btemp 
   331                           ;	low address of idata address in btemp+1 
   332                           ;	low address of data in FSR
   333                           ;	high address + 1 of data in btemp-1
   334                           
   335  0669  120A  118A  2665  120A  118A  	fcall	init_fetch0
   336  066E  0080               	movwf	0
   337  066F  0A84               	incf	4,f
   338  0670  0804               	movf	4,w
   339  0671  067D               	xorwf	btemp+-1,w
   340  0672  1903               	btfsc	3,2
   341  0673  3400               	retlw	0
   342  0674  0AFF               	incf	btemp+1,f
   343  0675  1903               	btfsc	3,2
   344  0676  0AFE               	incf	btemp,f
   345  0677  2E69               	goto	init_ram0
   346                           
   347                           	psect	cstackCOMMON
   348  0070                     __pcstackCOMMON:
   349  0070                     ?_LCD_Init:
   350  0070                     ?_LCD_DisChar:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ??_LCD_DisChar:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_LCD_SendCMD:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ??_LCD_SendCMD:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_main:	
   363                           ; 1 bytes @ 0x0
   364                           
   365                           
   366                           ; 1 bytes @ 0x0
   367  0070                     	ds	2
   368  0072                     LCD_SendCMD@COMMAND:
   369  0072                     LCD_DisChar@DATA:	
   370                           ; 1 bytes @ 0x2
   371                           
   372                           
   373                           ; 1 bytes @ 0x2
   374  0072                     	ds	1
   375  0073                     ??_LCD_Init:
   376  0073                     ?_LCD_GotoRC:	
   377                           ; 1 bytes @ 0x3
   378                           
   379  0073                     LCD_GotoRC@column:	
   380                           ; 1 bytes @ 0x3
   381                           
   382                           
   383                           ; 1 bytes @ 0x3
   384  0073                     	ds	1
   385  0074                     ??_LCD_GotoRC:
   386  0074                     LCD_GotoRC@row:	
   387                           ; 1 bytes @ 0x4
   388                           
   389                           
   390                           ; 1 bytes @ 0x4
   391  0074                     	ds	1
   392  0075                     ??_main:
   393                           
   394                           ; 1 bytes @ 0x5
   395  0075                     	ds	3
   396  0078                     main@i:
   397                           
   398                           ; 1 bytes @ 0x8
   399  0078                     	ds	1
   400                           
   401                           	psect	maintext
   402  06D6                     __pmaintext:	
   403 ;;
   404 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   405 ;;
   406 ;; *************** function _main *****************
   407 ;; Defined at:
   408 ;;		line 15 in file "main.c"
   409 ;; Parameters:    Size  Location     Type
   410 ;;		None
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  i               1    8[COMMON] unsigned char 
   413 ;; Return value:  Size  Location     Type
   414 ;;                  1    wreg      void 
   415 ;; Registers used:
   416 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   417 ;; Tracked objects:
   418 ;;		On entry : B00/0
   419 ;;		On exit  : 0/0
   420 ;;		Unchanged: 0/0
   421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   422 ;;      Params:         0       0       0       0       0
   423 ;;      Locals:         1       0       0       0       0
   424 ;;      Temps:          3       0       0       0       0
   425 ;;      Totals:         4       0       0       0       0
   426 ;;Total ram usage:        4 bytes
   427 ;; Hardware stack levels required when called:    2
   428 ;; This function calls:
   429 ;;		_LCD_DisChar
   430 ;;		_LCD_GotoRC
   431 ;;		_LCD_Init
   432 ;; This function is called by:
   433 ;;		Startup code after reset
   434 ;; This function uses a non-reentrant model
   435 ;;
   436                           
   437                           
   438                           ;psect for function _main
   439  06D6                     _main:
   440  06D6                     l749:	
   441                           ;incstack = 0
   442                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   443                           
   444                           
   445                           ;main.c: 17:     LCD_Init();
   446  06D6  120A  118A  2690  120A  118A  	fcall	_LCD_Init
   447  06DB                     l751:
   448                           
   449                           ;main.c: 20:     uint8_t i = 0;
   450  06DB  01F8               	clrf	main@i
   451  06DC                     l753:
   452                           
   453                           ;main.c: 23:         LCD_GotoRC(0,0);
   454  06DC  01F3               	clrf	LCD_GotoRC@column
   455  06DD  3000               	movlw	0
   456  06DE  120A  118A  2678  120A  118A  	fcall	_LCD_GotoRC
   457                           
   458                           ;main.c: 25:         while (i < 40) {
   459  06E3  2F04               	goto	l763
   460  06E4                     l755:
   461                           
   462                           ;main.c: 26:             LCD_DisChar(Massage[i+Offset]);
   463  06E4  3020               	movlw	(low (_Massage| 0))& (0+255)
   464  06E5  0779               	addwf	_Offset,w
   465  06E6  00F5               	movwf	??_main
   466  06E7  0878               	movf	main@i,w
   467  06E8  0775               	addwf	??_main,w
   468  06E9  00F6               	movwf	??_main+1
   469  06EA  0876               	movf	??_main+1,w
   470  06EB  0084               	movwf	4
   471  06EC  1383               	bcf	3,7	;select IRP bank0
   472  06ED  0800               	movf	0,w
   473  06EE  120A  118A  2727  120A  118A  	fcall	_LCD_DisChar
   474  06F3                     l757:
   475                           
   476                           ;main.c: 27:             i++;
   477  06F3  3001               	movlw	1
   478  06F4  00FF               	movwf	btemp+1
   479  06F5  087F               	movf	btemp+1,w
   480  06F6  07F8               	addwf	main@i,f
   481  06F7                     l759:
   482                           
   483                           ;main.c: 28:             if(i==16){
   484  06F7  3010               	movlw	16
   485  06F8  0678               	xorwf	main@i,w
   486  06F9  1D03               	btfss	3,2
   487  06FA  2EFC               	goto	u81
   488  06FB  2EFD               	goto	u80
   489  06FC                     u81:
   490  06FC  2F04               	goto	l763
   491  06FD                     u80:
   492  06FD                     l761:
   493                           
   494                           ;main.c: 29:                LCD_GotoRC(1,0);
   495  06FD  01F3               	clrf	LCD_GotoRC@column
   496  06FE  3001               	movlw	1
   497  06FF  120A  118A  2678  120A  118A  	fcall	_LCD_GotoRC
   498  0704                     l763:
   499                           
   500                           ;main.c: 25:         while (i < 40) {
   501  0704  3028               	movlw	40
   502  0705  0278               	subwf	main@i,w
   503  0706  1C03               	skipc
   504  0707  2F09               	goto	u91
   505  0708  2F0A               	goto	u90
   506  0709                     u91:
   507  0709  2EE4               	goto	l755
   508  070A                     u90:
   509  070A                     l765:
   510                           
   511                           ;main.c: 33:         i = 0;
   512  070A  01F8               	clrf	main@i
   513  070B                     l767:
   514                           
   515                           ;main.c: 34:         Offset++;
   516  070B  3001               	movlw	1
   517  070C  00FF               	movwf	btemp+1
   518  070D  087F               	movf	btemp+1,w
   519  070E  07F9               	addwf	_Offset,f
   520  070F                     l769:
   521                           
   522                           ;main.c: 36:         if(Offset > 40){
   523  070F  3029               	movlw	41
   524  0710  0279               	subwf	_Offset,w
   525  0711  1C03               	skipc
   526  0712  2F14               	goto	u101
   527  0713  2F15               	goto	u100
   528  0714                     u101:
   529  0714  2F16               	goto	l773
   530  0715                     u100:
   531  0715                     l771:
   532                           
   533                           ;main.c: 37:             Offset=0;
   534  0715  01F9               	clrf	_Offset
   535  0716                     l773:
   536                           
   537                           ;main.c: 40:         _delay((unsigned long)((500)*(8000000UL/4000.0)));
   538  0716  3006               	movlw	6
   539  0717  00F7               	movwf	??_main+2
   540  0718  3013               	movlw	19
   541  0719  00F6               	movwf	??_main+1
   542  071A  30AD               	movlw	173
   543  071B  00F5               	movwf	??_main
   544  071C                     u117:
   545  071C  0BF5               	decfsz	??_main,f
   546  071D  2F1C               	goto	u117
   547  071E  0BF6               	decfsz	??_main+1,f
   548  071F  2F1C               	goto	u117
   549  0720  0BF7               	decfsz	??_main+2,f
   550  0721  2F1C               	goto	u117
   551  0722  2F23               	nop2
   552  0723  2EDC               	goto	l753
   553  0724  120A  118A  2800   	ljmp	start
   554  0727                     __end_of_main:
   555                           
   556                           	psect	text1
   557  0690                     __ptext1:	
   558 ;; *************** function _LCD_Init *****************
   559 ;; Defined at:
   560 ;;		line 6 in file "LCD.c"
   561 ;; Parameters:    Size  Location     Type
   562 ;;		None
   563 ;; Auto vars:     Size  Location     Type
   564 ;;		None
   565 ;; Return value:  Size  Location     Type
   566 ;;                  1    wreg      void 
   567 ;; Registers used:
   568 ;;		wreg, status,2, status,0, pclath, cstack
   569 ;; Tracked objects:
   570 ;;		On entry : 0/0
   571 ;;		On exit  : 0/0
   572 ;;		Unchanged: 0/0
   573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   574 ;;      Params:         0       0       0       0       0
   575 ;;      Locals:         0       0       0       0       0
   576 ;;      Temps:          0       0       0       0       0
   577 ;;      Totals:         0       0       0       0       0
   578 ;;Total ram usage:        0 bytes
   579 ;; Hardware stack levels used:    1
   580 ;; Hardware stack levels required when called:    1
   581 ;; This function calls:
   582 ;;		_LCD_SendCMD
   583 ;; This function is called by:
   584 ;;		_main
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _LCD_Init
   590  0690                     _LCD_Init:
   591  0690                     l671:	
   592                           ;incstack = 0
   593                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
   594                           
   595                           
   596                           ;LCD.c: 9:     TRISD = 0;
   597  0690  1683               	bsf	3,5	;RP0=1, select bank1
   598  0691  1303               	bcf	3,6	;RP1=0, select bank1
   599  0692  0188               	clrf	8	;volatile
   600  0693                     l673:
   601                           
   602                           ;LCD.c: 10:     TRISEbits.TRISE2 = 0;
   603  0693  1109               	bcf	9,2	;volatile
   604  0694                     l675:
   605                           
   606                           ;LCD.c: 11:     TRISEbits.TRISE1 = 0;
   607  0694  1089               	bcf	9,1	;volatile
   608  0695                     l677:
   609                           
   610                           ;LCD.c: 14:  LCD_SendCMD((0x02));
   611  0695  3002               	movlw	2
   612  0696  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   613  069B                     l679:
   614                           
   615                           ;LCD.c: 17:   LCD_SendCMD((0x28));
   616  069B  3028               	movlw	40
   617  069C  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   618  06A1                     l681:
   619                           
   620                           ;LCD.c: 22:  LCD_SendCMD((0x0C));
   621  06A1  300C               	movlw	12
   622  06A2  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   623  06A7                     l683:
   624                           
   625                           ;LCD.c: 23:  LCD_SendCMD((0x01));
   626  06A7  3001               	movlw	1
   627  06A8  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   628  06AD                     l42:
   629  06AD  0008               	return
   630  06AE                     __end_of_LCD_Init:
   631                           
   632                           	psect	text2
   633  0678                     __ptext2:	
   634 ;; *************** function _LCD_GotoRC *****************
   635 ;; Defined at:
   636 ;;		line 170 in file "LCD.c"
   637 ;; Parameters:    Size  Location     Type
   638 ;;  row             1    wreg     unsigned char 
   639 ;;  column          1    3[COMMON] unsigned char 
   640 ;; Auto vars:     Size  Location     Type
   641 ;;  row             1    4[COMMON] unsigned char 
   642 ;; Return value:  Size  Location     Type
   643 ;;                  1    wreg      void 
   644 ;; Registers used:
   645 ;;		wreg, status,2, status,0, pclath, cstack
   646 ;; Tracked objects:
   647 ;;		On entry : 0/0
   648 ;;		On exit  : 0/0
   649 ;;		Unchanged: 0/0
   650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   651 ;;      Params:         1       0       0       0       0
   652 ;;      Locals:         1       0       0       0       0
   653 ;;      Temps:          0       0       0       0       0
   654 ;;      Totals:         2       0       0       0       0
   655 ;;Total ram usage:        2 bytes
   656 ;; Hardware stack levels used:    1
   657 ;; Hardware stack levels required when called:    1
   658 ;; This function calls:
   659 ;;		_LCD_SendCMD
   660 ;; This function is called by:
   661 ;;		_main
   662 ;; This function uses a non-reentrant model
   663 ;;
   664                           
   665                           
   666                           ;psect for function _LCD_GotoRC
   667  0678                     _LCD_GotoRC:
   668                           
   669                           ;incstack = 0
   670                           ; Regs used in _LCD_GotoRC: [wreg+status,2+status,0+pclath+cstack]
   671                           ;LCD_GotoRC@row stored from wreg
   672  0678  00F4               	movwf	LCD_GotoRC@row
   673  0679                     l743:
   674                           
   675                           ;LCD.c: 170: void LCD_GotoRC(uint8_t row ,uint8_t column);LCD.c: 171: {;LCD.c: 172:   if
      +                          (row == 0)
   676  0679  0874               	movf	LCD_GotoRC@row,w
   677  067A  1D03               	btfss	3,2
   678  067B  2E7D               	goto	u71
   679  067C  2E7E               	goto	u70
   680  067D                     u71:
   681  067D  2E87               	goto	l747
   682  067E                     u70:
   683  067E                     l745:
   684                           
   685                           ;LCD.c: 173:    LCD_SendCMD( (0x80) | (row + column) );
   686  067E  0873               	movf	LCD_GotoRC@column,w
   687  067F  0774               	addwf	LCD_GotoRC@row,w
   688  0680  3880               	iorlw	128
   689  0681  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   690  0686  2E8F               	goto	l53
   691  0687                     l747:
   692                           
   693                           ;LCD.c: 176:    LCD_SendCMD( (0x80) | (column + 0x40) );
   694  0687  0873               	movf	LCD_GotoRC@column,w
   695  0688  3E40               	addlw	64
   696  0689  3880               	iorlw	128
   697  068A  120A  118A  278A  120A  118A  	fcall	_LCD_SendCMD
   698  068F                     l53:
   699  068F  0008               	return
   700  0690                     __end_of_LCD_GotoRC:
   701                           
   702                           	psect	text3
   703  078A                     __ptext3:	
   704 ;; *************** function _LCD_SendCMD *****************
   705 ;; Defined at:
   706 ;;		line 31 in file "LCD.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;  COMMAND         1    wreg     unsigned char 
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  COMMAND         1    2[COMMON] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, status,2, status,0
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         1       0       0       0       0
   722 ;;      Temps:          2       0       0       0       0
   723 ;;      Totals:         3       0       0       0       0
   724 ;;Total ram usage:        3 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; This function calls:
   727 ;;		Nothing
   728 ;; This function is called by:
   729 ;;		_LCD_Init
   730 ;;		_LCD_GotoRC
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           
   735                           ;psect for function _LCD_SendCMD
   736  078A                     _LCD_SendCMD:
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _LCD_SendCMD: [wreg+status,2+status,0]
   740                           ;LCD_SendCMD@COMMAND stored from wreg
   741  078A  00F2               	movwf	LCD_SendCMD@COMMAND
   742  078B                     l645:
   743                           
   744                           ;LCD.c: 31: void LCD_SendCMD(uint8_t COMMAND);LCD.c: 32: {;LCD.c: 34:     RE2 = 0;
   745  078B  1283               	bcf	3,5	;RP0=0, select bank0
   746  078C  1303               	bcf	3,6	;RP1=0, select bank0
   747  078D  1109               	bcf	9,2	;volatile
   748  078E                     l647:
   749                           
   750                           ;LCD.c: 35:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
   751  078E  3003               	movlw	3
   752  078F  00F1               	movwf	??_LCD_SendCMD+1
   753  0790  3097               	movlw	151
   754  0791  00F0               	movwf	??_LCD_SendCMD
   755  0792                     u127:
   756  0792  0BF0               	decfsz	??_LCD_SendCMD,f
   757  0793  2F92               	goto	u127
   758  0794  0BF1               	decfsz	??_LCD_SendCMD+1,f
   759  0795  2F92               	goto	u127
   760  0796  2F97               	nop2
   761  0797                     l649:
   762                           
   763                           ;LCD.c: 39:         RE1 = 1;
   764  0797  1283               	bcf	3,5	;RP0=0, select bank0
   765  0798  1303               	bcf	3,6	;RP1=0, select bank0
   766  0799  1489               	bsf	9,1	;volatile
   767                           
   768                           ;LCD.c: 40:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   769  079A  3003               	movlw	3
   770  079B  00F1               	movwf	??_LCD_SendCMD+1
   771  079C  3097               	movlw	151
   772  079D  00F0               	movwf	??_LCD_SendCMD
   773  079E                     u137:
   774  079E  0BF0               	decfsz	??_LCD_SendCMD,f
   775  079F  2F9E               	goto	u137
   776  07A0  0BF1               	decfsz	??_LCD_SendCMD+1,f
   777  07A1  2F9E               	goto	u137
   778  07A2  2FA3               	nop2
   779  07A3                     l651:
   780                           
   781                           ;LCD.c: 42:         PORTD = (COMMAND & 0xF0);
   782  07A3  0872               	movf	LCD_SendCMD@COMMAND,w
   783  07A4  39F0               	andlw	240
   784  07A5  1283               	bcf	3,5	;RP0=0, select bank0
   785  07A6  1303               	bcf	3,6	;RP1=0, select bank0
   786  07A7  0088               	movwf	8	;volatile
   787  07A8                     l653:
   788                           
   789                           ;LCD.c: 43:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
   790  07A8  3003               	movlw	3
   791  07A9  00F1               	movwf	??_LCD_SendCMD+1
   792  07AA  3097               	movlw	151
   793  07AB  00F0               	movwf	??_LCD_SendCMD
   794  07AC                     u147:
   795  07AC  0BF0               	decfsz	??_LCD_SendCMD,f
   796  07AD  2FAC               	goto	u147
   797  07AE  0BF1               	decfsz	??_LCD_SendCMD+1,f
   798  07AF  2FAC               	goto	u147
   799  07B0  2FB1               	nop2
   800  07B1                     l655:
   801                           
   802                           ;LCD.c: 45:   RE1 = 0;
   803  07B1  1283               	bcf	3,5	;RP0=0, select bank0
   804  07B2  1303               	bcf	3,6	;RP1=0, select bank0
   805  07B3  1089               	bcf	9,1	;volatile
   806  07B4                     l657:
   807                           
   808                           ;LCD.c: 46:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   809  07B4  3003               	movlw	3
   810  07B5  00F1               	movwf	??_LCD_SendCMD+1
   811  07B6  3097               	movlw	151
   812  07B7  00F0               	movwf	??_LCD_SendCMD
   813  07B8                     u157:
   814  07B8  0BF0               	decfsz	??_LCD_SendCMD,f
   815  07B9  2FB8               	goto	u157
   816  07BA  0BF1               	decfsz	??_LCD_SendCMD+1,f
   817  07BB  2FB8               	goto	u157
   818  07BC  2FBD               	nop2
   819  07BD                     l659:
   820                           
   821                           ;LCD.c: 49:         RE1 = 1;
   822  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   823  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   824  07BF  1489               	bsf	9,1	;volatile
   825  07C0                     l661:
   826                           
   827                           ;LCD.c: 50:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   828  07C0  3003               	movlw	3
   829  07C1  00F1               	movwf	??_LCD_SendCMD+1
   830  07C2  3097               	movlw	151
   831  07C3  00F0               	movwf	??_LCD_SendCMD
   832  07C4                     u167:
   833  07C4  0BF0               	decfsz	??_LCD_SendCMD,f
   834  07C5  2FC4               	goto	u167
   835  07C6  0BF1               	decfsz	??_LCD_SendCMD+1,f
   836  07C7  2FC4               	goto	u167
   837  07C8  2FC9               	nop2
   838  07C9                     l663:
   839                           
   840                           ;LCD.c: 52:         PORTD = ((COMMAND << 4) & 0xF0);
   841  07C9  0872               	movf	LCD_SendCMD@COMMAND,w
   842  07CA  00F0               	movwf	??_LCD_SendCMD
   843  07CB  3003               	movlw	3
   844  07CC                     u15:
   845  07CC  1003               	clrc
   846  07CD  0DF0               	rlf	??_LCD_SendCMD,f
   847  07CE  3EFF               	addlw	-1
   848  07CF  1D03               	skipz
   849  07D0  2FCC               	goto	u15
   850  07D1  1003               	clrc
   851  07D2  0D70               	rlf	??_LCD_SendCMD,w
   852  07D3  39F0               	andlw	240
   853  07D4  1283               	bcf	3,5	;RP0=0, select bank0
   854  07D5  1303               	bcf	3,6	;RP1=0, select bank0
   855  07D6  0088               	movwf	8	;volatile
   856  07D7                     l665:
   857                           
   858                           ;LCD.c: 53:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   859  07D7  3003               	movlw	3
   860  07D8  00F1               	movwf	??_LCD_SendCMD+1
   861  07D9  3097               	movlw	151
   862  07DA  00F0               	movwf	??_LCD_SendCMD
   863  07DB                     u177:
   864  07DB  0BF0               	decfsz	??_LCD_SendCMD,f
   865  07DC  2FDB               	goto	u177
   866  07DD  0BF1               	decfsz	??_LCD_SendCMD+1,f
   867  07DE  2FDB               	goto	u177
   868  07DF  2FE0               	nop2
   869  07E0                     l667:
   870                           
   871                           ;LCD.c: 55:   RE1 = 0;
   872  07E0  1283               	bcf	3,5	;RP0=0, select bank0
   873  07E1  1303               	bcf	3,6	;RP1=0, select bank0
   874  07E2  1089               	bcf	9,1	;volatile
   875  07E3                     l669:
   876                           
   877                           ;LCD.c: 56:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   878  07E3  3003               	movlw	3
   879  07E4  00F1               	movwf	??_LCD_SendCMD+1
   880  07E5  3097               	movlw	151
   881  07E6  00F0               	movwf	??_LCD_SendCMD
   882  07E7                     u187:
   883  07E7  0BF0               	decfsz	??_LCD_SendCMD,f
   884  07E8  2FE7               	goto	u187
   885  07E9  0BF1               	decfsz	??_LCD_SendCMD+1,f
   886  07EA  2FE7               	goto	u187
   887  07EB  2FEC               	nop2
   888  07EC                     l45:
   889  07EC  0008               	return
   890  07ED                     __end_of_LCD_SendCMD:
   891                           
   892                           	psect	text4
   893  0727                     __ptext4:	
   894 ;; *************** function _LCD_DisChar *****************
   895 ;; Defined at:
   896 ;;		line 74 in file "LCD.c"
   897 ;; Parameters:    Size  Location     Type
   898 ;;  DATA            1    wreg     unsigned char 
   899 ;; Auto vars:     Size  Location     Type
   900 ;;  DATA            1    2[COMMON] unsigned char 
   901 ;; Return value:  Size  Location     Type
   902 ;;                  1    wreg      void 
   903 ;; Registers used:
   904 ;;		wreg, status,2, status,0
   905 ;; Tracked objects:
   906 ;;		On entry : 0/0
   907 ;;		On exit  : 0/0
   908 ;;		Unchanged: 0/0
   909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   910 ;;      Params:         0       0       0       0       0
   911 ;;      Locals:         1       0       0       0       0
   912 ;;      Temps:          2       0       0       0       0
   913 ;;      Totals:         3       0       0       0       0
   914 ;;Total ram usage:        3 bytes
   915 ;; Hardware stack levels used:    1
   916 ;; This function calls:
   917 ;;		Nothing
   918 ;; This function is called by:
   919 ;;		_main
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           
   924                           ;psect for function _LCD_DisChar
   925  0727                     _LCD_DisChar:
   926                           
   927                           ;incstack = 0
   928                           ; Regs used in _LCD_DisChar: [wreg+status,2+status,0]
   929                           ;LCD_DisChar@DATA stored from wreg
   930  0727  00F2               	movwf	LCD_DisChar@DATA
   931  0728                     l691:
   932                           
   933                           ;LCD.c: 74: void LCD_DisChar(uint8_t DATA);LCD.c: 75: {;LCD.c: 76:     RE2 = 1;
   934  0728  1283               	bcf	3,5	;RP0=0, select bank0
   935  0729  1303               	bcf	3,6	;RP1=0, select bank0
   936  072A  1509               	bsf	9,2	;volatile
   937  072B                     l693:
   938                           
   939                           ;LCD.c: 77:  _delay((unsigned long)((1)*(8000000UL/4000.0)));
   940  072B  3003               	movlw	3
   941  072C  00F1               	movwf	??_LCD_DisChar+1
   942  072D  3097               	movlw	151
   943  072E  00F0               	movwf	??_LCD_DisChar
   944  072F                     u197:
   945  072F  0BF0               	decfsz	??_LCD_DisChar,f
   946  0730  2F2F               	goto	u197
   947  0731  0BF1               	decfsz	??_LCD_DisChar+1,f
   948  0732  2F2F               	goto	u197
   949  0733  2F34               	nop2
   950  0734                     l695:
   951                           
   952                           ;LCD.c: 81:         RE1 = 1;
   953  0734  1283               	bcf	3,5	;RP0=0, select bank0
   954  0735  1303               	bcf	3,6	;RP1=0, select bank0
   955  0736  1489               	bsf	9,1	;volatile
   956                           
   957                           ;LCD.c: 82:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   958  0737  3003               	movlw	3
   959  0738  00F1               	movwf	??_LCD_DisChar+1
   960  0739  3097               	movlw	151
   961  073A  00F0               	movwf	??_LCD_DisChar
   962  073B                     u207:
   963  073B  0BF0               	decfsz	??_LCD_DisChar,f
   964  073C  2F3B               	goto	u207
   965  073D  0BF1               	decfsz	??_LCD_DisChar+1,f
   966  073E  2F3B               	goto	u207
   967  073F  2F40               	nop2
   968  0740                     l697:
   969                           
   970                           ;LCD.c: 84:         PORTD = (DATA & 0xF0);
   971  0740  0872               	movf	LCD_DisChar@DATA,w
   972  0741  39F0               	andlw	240
   973  0742  1283               	bcf	3,5	;RP0=0, select bank0
   974  0743  1303               	bcf	3,6	;RP1=0, select bank0
   975  0744  0088               	movwf	8	;volatile
   976  0745                     l699:
   977                           
   978                           ;LCD.c: 85:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
   979  0745  3003               	movlw	3
   980  0746  00F1               	movwf	??_LCD_DisChar+1
   981  0747  3097               	movlw	151
   982  0748  00F0               	movwf	??_LCD_DisChar
   983  0749                     u217:
   984  0749  0BF0               	decfsz	??_LCD_DisChar,f
   985  074A  2F49               	goto	u217
   986  074B  0BF1               	decfsz	??_LCD_DisChar+1,f
   987  074C  2F49               	goto	u217
   988  074D  2F4E               	nop2
   989  074E                     l701:
   990                           
   991                           ;LCD.c: 87:         RE1 = 0;
   992  074E  1283               	bcf	3,5	;RP0=0, select bank0
   993  074F  1303               	bcf	3,6	;RP1=0, select bank0
   994  0750  1089               	bcf	9,1	;volatile
   995  0751                     l703:
   996                           
   997                           ;LCD.c: 88:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
   998  0751  3003               	movlw	3
   999  0752  00F1               	movwf	??_LCD_DisChar+1
  1000  0753  3097               	movlw	151
  1001  0754  00F0               	movwf	??_LCD_DisChar
  1002  0755                     u227:
  1003  0755  0BF0               	decfsz	??_LCD_DisChar,f
  1004  0756  2F55               	goto	u227
  1005  0757  0BF1               	decfsz	??_LCD_DisChar+1,f
  1006  0758  2F55               	goto	u227
  1007  0759  2F5A               	nop2
  1008  075A                     l705:
  1009                           
  1010                           ;LCD.c: 90:         RE1 = 1;
  1011  075A  1283               	bcf	3,5	;RP0=0, select bank0
  1012  075B  1303               	bcf	3,6	;RP1=0, select bank0
  1013  075C  1489               	bsf	9,1	;volatile
  1014  075D                     l707:
  1015                           
  1016                           ;LCD.c: 91:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1017  075D  3003               	movlw	3
  1018  075E  00F1               	movwf	??_LCD_DisChar+1
  1019  075F  3097               	movlw	151
  1020  0760  00F0               	movwf	??_LCD_DisChar
  1021  0761                     u237:
  1022  0761  0BF0               	decfsz	??_LCD_DisChar,f
  1023  0762  2F61               	goto	u237
  1024  0763  0BF1               	decfsz	??_LCD_DisChar+1,f
  1025  0764  2F61               	goto	u237
  1026  0765  2F66               	nop2
  1027  0766                     l709:
  1028                           
  1029                           ;LCD.c: 93:   PORTD = ((DATA << 4) & 0xF0);
  1030  0766  0872               	movf	LCD_DisChar@DATA,w
  1031  0767  00F0               	movwf	??_LCD_DisChar
  1032  0768  3003               	movlw	3
  1033  0769                     u35:
  1034  0769  1003               	clrc
  1035  076A  0DF0               	rlf	??_LCD_DisChar,f
  1036  076B  3EFF               	addlw	-1
  1037  076C  1D03               	skipz
  1038  076D  2F69               	goto	u35
  1039  076E  1003               	clrc
  1040  076F  0D70               	rlf	??_LCD_DisChar,w
  1041  0770  39F0               	andlw	240
  1042  0771  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0772  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0773  0088               	movwf	8	;volatile
  1045  0774                     l711:
  1046                           
  1047                           ;LCD.c: 94:   _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1048  0774  3003               	movlw	3
  1049  0775  00F1               	movwf	??_LCD_DisChar+1
  1050  0776  3097               	movlw	151
  1051  0777  00F0               	movwf	??_LCD_DisChar
  1052  0778                     u247:
  1053  0778  0BF0               	decfsz	??_LCD_DisChar,f
  1054  0779  2F78               	goto	u247
  1055  077A  0BF1               	decfsz	??_LCD_DisChar+1,f
  1056  077B  2F78               	goto	u247
  1057  077C  2F7D               	nop2
  1058  077D                     l713:
  1059                           
  1060                           ;LCD.c: 96:   RE1 = 0;
  1061  077D  1283               	bcf	3,5	;RP0=0, select bank0
  1062  077E  1303               	bcf	3,6	;RP1=0, select bank0
  1063  077F  1089               	bcf	9,1	;volatile
  1064  0780                     l715:
  1065                           
  1066                           ;LCD.c: 97:         _delay((unsigned long)((1)*(8000000UL/4000.0)));
  1067  0780  3003               	movlw	3
  1068  0781  00F1               	movwf	??_LCD_DisChar+1
  1069  0782  3097               	movlw	151
  1070  0783  00F0               	movwf	??_LCD_DisChar
  1071  0784                     u257:
  1072  0784  0BF0               	decfsz	??_LCD_DisChar,f
  1073  0785  2F84               	goto	u257
  1074  0786  0BF1               	decfsz	??_LCD_DisChar+1,f
  1075  0787  2F84               	goto	u257
  1076  0788  2F89               	nop2
  1077  0789                     l48:
  1078  0789  0008               	return
  1079  078A                     __end_of_LCD_DisChar:
  1080  007E                     btemp	set	126	;btemp
  1081  007E                     wtemp0	set	126
  1082                           
  1083                           	psect	config
  1084                           
  1085                           ;Config register CONFIG @ 0x2007
  1086                           ;	Oscillator Selection bits
  1087                           ;	FOSC = XT, XT oscillator
  1088                           ;	Watchdog Timer Enable bit
  1089                           ;	WDTE = OFF, WDT disabled
  1090                           ;	Power-up Timer Enable bit
  1091                           ;	PWRTE = ON, PWRT enabled
  1092                           ;	Brown-out Reset Enable bit
  1093                           ;	BOREN = ON, BOR enabled
  1094                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1095                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1096                           ;	Data EEPROM Memory Code Protection bit
  1097                           ;	CPD = OFF, Data EEPROM code protection off
  1098                           ;	Flash Program Memory Write Enable bits
  1099                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1100                           ;	In-Circuit Debugger Mode bit
  1101                           ;	DEBUG = 0x1, unprogrammed default
  1102                           ;	Flash Program Memory Code Protection bit
  1103                           ;	CP = OFF, Code protection off
  1104  2007                     	org	8199
  1105  2007  3F71               	dw	16241

Data Sizes:
    Strings     0
    Constant    0
    Data        40
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      10
    BANK0            80      0      40
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LCD_GotoRC
    _LCD_Init->_LCD_SendCMD
    _LCD_GotoRC->_LCD_SendCMD

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     399
                                              5 COMMON     4     4      0
                        _LCD_DisChar
                         _LCD_GotoRC
                           _LCD_Init
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0      30
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (1) _LCD_GotoRC                                           2     1      1     270
                                              3 COMMON     2     1      1
                        _LCD_SendCMD
 ---------------------------------------------------------------------------------
 (2) _LCD_SendCMD                                          3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_DisChar                                          3     3      0      30
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_DisChar
   _LCD_GotoRC
     _LCD_SendCMD
   _LCD_Init
     _LCD_SendCMD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      28       5       50.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      9       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      32      12        0.0%
ABS                  0      0      32       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Thu Nov 05 03:16:12 2020

           ?_LCD_DisChar 0070                        pc 0002              ?_LCD_GotoRC 0073  
                     l42 06AD                       l45 07EC                       l53 068F  
                     l48 0789                       u15 07CC                       u35 0769  
                     u70 067E                       u71 067D                       u80 06FD  
                     u81 06FC                       u90 070A                       u91 0709  
                     fsr 0004             ?_LCD_SendCMD 0070                      l701 074E  
                    l711 0774                      l703 0751                      l713 077D  
                    l705 075A                      l715 0780                      l707 075D  
                    l651 07A3                      l709 0766                      l661 07C0  
                    l653 07A8                      l645 078B                      l663 07C9  
                    l655 07B1                      l647 078E                      l743 0679  
                    l671 0690                      l751 06DB                      l665 07D7  
                    l657 07B4                      l649 0797                      l745 067E  
                    l681 06A1                      l673 0693                      l761 06FD  
                    l753 06DC                      l691 0728                      l667 07E0  
                    l659 07BD                      l747 0687                      l683 06A7  
                    l675 0694                      l771 0715                      l755 06E4  
                    l763 0704                      l693 072B                      l669 07E3  
                    l677 0695                      l773 0716                      l765 070A  
                    l757 06F3                      l749 06D6                      l695 0734  
                    l679 069B                      l767 070B                      l759 06F7  
                    l697 0740                      l769 070F                      l699 0745  
                    _RE1 0049                      u100 0715                      _RE2 004A  
                    u101 0714                      u117 071C                      u207 073B  
                    u127 0792                      u217 0749                      u137 079E  
                    u227 0755                      u147 07AC                      u237 0761  
                    u157 07B8                      u247 0778                      u167 07C4  
                    u257 0784                      u177 07DB                      u187 07E7  
                    u197 072F                      fsr0 0004                      indf 0000  
       LCD_GotoRC@column 0073                     _main 06D6                     btemp 007E  
                   start 0000         __end_of_LCD_Init 06AE                    ?_main 0070  
                  _PORTD 0008                    _TRISD 0088                    main@i 0078  
    __size_of_LCD_GotoRC 0018                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07ED             __end_of_main 0727  
                 ??_main 0075                   _Offset 0079     __size_of_LCD_DisChar 0063  
   __size_of_LCD_SendCMD 0063  __end_of__initialization 07FC                ?_LCD_Init 0070  
          LCD_GotoRC@row 0074           __pcstackCOMMON 0070             __pidataBANK0 06AE  
           ??_LCD_GotoRC 0074       __end_of_LCD_GotoRC 0690               ??_LCD_Init 0073  
             __pmaintext 06D6                  _Massage 0020                  __ptext1 0690  
                __ptext2 0678                  __ptext3 078A                  __ptext4 0727  
   end_of_initialization 07FC                _TRISEbits 0089        __size_of_LCD_Init 001E  
          ??_LCD_DisChar 0070            ??_LCD_SendCMD 0070      start_initialization 07ED  
             init_fetch0 0665              __pdataBANK0 0020      __end_of_LCD_DisChar 078A  
            __pbssCOMMON 0079                ___latbits 0002      __end_of_LCD_SendCMD 07ED  
        LCD_DisChar@DATA 0072                 _LCD_Init 0690              _LCD_DisChar 0727  
            _LCD_SendCMD 078A            __size_of_main 0051               _LCD_GotoRC 0678  
               init_ram0 0669       LCD_SendCMD@COMMAND 0072  
